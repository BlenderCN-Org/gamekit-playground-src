// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamedb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class PUser;
class PList;
class PGame;
class PScore;
class PRegistrationInfo;
class PBooleanMsg;
class PIntMsg;
class PFloatMsg;
class PLongMsg;
class PStringMsg;

// ===================================================================

class PUser : public ::google::protobuf::Message {
 public:
  PUser();
  virtual ~PUser();

  PUser(const PUser& from);

  inline PUser& operator=(const PUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PUser& default_instance();

  void Swap(PUser* other);

  // implements Message ----------------------------------------------

  PUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PUser& from);
  void MergeFrom(const PUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:gamedb.PUser)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* email_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PUser* default_instance_;
};
// -------------------------------------------------------------------

class PList : public ::google::protobuf::Message {
 public:
  PList();
  virtual ~PList();

  PList(const PList& from);

  inline PList& operator=(const PList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PList& default_instance();

  void Swap(PList* other);

  // implements Message ----------------------------------------------

  PList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PList& from);
  void MergeFrom(const PList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated bytes listdata = 2;
  inline int listdata_size() const;
  inline void clear_listdata();
  static const int kListdataFieldNumber = 2;
  inline const ::std::string& listdata(int index) const;
  inline ::std::string* mutable_listdata(int index);
  inline void set_listdata(int index, const ::std::string& value);
  inline void set_listdata(int index, const char* value);
  inline void set_listdata(int index, const void* value, size_t size);
  inline ::std::string* add_listdata();
  inline void add_listdata(const ::std::string& value);
  inline void add_listdata(const char* value);
  inline void add_listdata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listdata();

  // @@protoc_insertion_point(class_scope:gamedb.PList)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PList* default_instance_;
};
// -------------------------------------------------------------------

class PGame : public ::google::protobuf::Message {
 public:
  PGame();
  virtual ~PGame();

  PGame(const PGame& from);

  inline PGame& operator=(const PGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PGame& default_instance();

  void Swap(PGame* other);

  // implements Message ----------------------------------------------

  PGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGame& from);
  void MergeFrom(const PGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gamedb.PGame)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PGame* default_instance_;
};
// -------------------------------------------------------------------

class PScore : public ::google::protobuf::Message {
 public:
  PScore();
  virtual ~PScore();

  PScore(const PScore& from);

  inline PScore& operator=(const PScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PScore& default_instance();

  void Swap(PScore* other);

  // implements Message ----------------------------------------------

  PScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PScore& from);
  void MergeFrom(const PScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline float score() const;
  inline void set_score(float value);

  // @@protoc_insertion_point(class_scope:gamedb.PScore)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PScore* default_instance_;
};
// -------------------------------------------------------------------

class PRegistrationInfo : public ::google::protobuf::Message {
 public:
  PRegistrationInfo();
  virtual ~PRegistrationInfo();

  PRegistrationInfo(const PRegistrationInfo& from);

  inline PRegistrationInfo& operator=(const PRegistrationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRegistrationInfo& default_instance();

  void Swap(PRegistrationInfo* other);

  // implements Message ----------------------------------------------

  PRegistrationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRegistrationInfo& from);
  void MergeFrom(const PRegistrationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 fromDate = 1;
  inline bool has_fromdate() const;
  inline void clear_fromdate();
  static const int kFromDateFieldNumber = 1;
  inline ::google::protobuf::int64 fromdate() const;
  inline void set_fromdate(::google::protobuf::int64 value);

  // optional int64 toDate = 2 [default = 0];
  inline bool has_todate() const;
  inline void clear_todate();
  static const int kToDateFieldNumber = 2;
  inline ::google::protobuf::int64 todate() const;
  inline void set_todate(::google::protobuf::int64 value);

  // optional uint32 amountLogins = 3 [default = 95];
  inline bool has_amountlogins() const;
  inline void clear_amountlogins();
  static const int kAmountLoginsFieldNumber = 3;
  inline ::google::protobuf::uint32 amountlogins() const;
  inline void set_amountlogins(::google::protobuf::uint32 value);

  // optional uint64 timePlayed = 4 [default = 0];
  inline bool has_timeplayed() const;
  inline void clear_timeplayed();
  static const int kTimePlayedFieldNumber = 4;
  inline ::google::protobuf::uint64 timeplayed() const;
  inline void set_timeplayed(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gamedb.PRegistrationInfo)
 private:
  inline void set_has_fromdate();
  inline void clear_has_fromdate();
  inline void set_has_todate();
  inline void clear_has_todate();
  inline void set_has_amountlogins();
  inline void clear_has_amountlogins();
  inline void set_has_timeplayed();
  inline void clear_has_timeplayed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 fromdate_;
  ::google::protobuf::int64 todate_;
  ::google::protobuf::uint64 timeplayed_;
  ::google::protobuf::uint32 amountlogins_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PRegistrationInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBooleanMsg : public ::google::protobuf::Message {
 public:
  PBooleanMsg();
  virtual ~PBooleanMsg();

  PBooleanMsg(const PBooleanMsg& from);

  inline PBooleanMsg& operator=(const PBooleanMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBooleanMsg& default_instance();

  void Swap(PBooleanMsg* other);

  // implements Message ----------------------------------------------

  PBooleanMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBooleanMsg& from);
  void MergeFrom(const PBooleanMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value() const;
  inline void set_value(bool value);

  // @@protoc_insertion_point(class_scope:gamedb.PBooleanMsg)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PBooleanMsg* default_instance_;
};
// -------------------------------------------------------------------

class PIntMsg : public ::google::protobuf::Message {
 public:
  PIntMsg();
  virtual ~PIntMsg();

  PIntMsg(const PIntMsg& from);

  inline PIntMsg& operator=(const PIntMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PIntMsg& default_instance();

  void Swap(PIntMsg* other);

  // implements Message ----------------------------------------------

  PIntMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PIntMsg& from);
  void MergeFrom(const PIntMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gamedb.PIntMsg)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PIntMsg* default_instance_;
};
// -------------------------------------------------------------------

class PFloatMsg : public ::google::protobuf::Message {
 public:
  PFloatMsg();
  virtual ~PFloatMsg();

  PFloatMsg(const PFloatMsg& from);

  inline PFloatMsg& operator=(const PFloatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PFloatMsg& default_instance();

  void Swap(PFloatMsg* other);

  // implements Message ----------------------------------------------

  PFloatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PFloatMsg& from);
  void MergeFrom(const PFloatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:gamedb.PFloatMsg)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PFloatMsg* default_instance_;
};
// -------------------------------------------------------------------

class PLongMsg : public ::google::protobuf::Message {
 public:
  PLongMsg();
  virtual ~PLongMsg();

  PLongMsg(const PLongMsg& from);

  inline PLongMsg& operator=(const PLongMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PLongMsg& default_instance();

  void Swap(PLongMsg* other);

  // implements Message ----------------------------------------------

  PLongMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PLongMsg& from);
  void MergeFrom(const PLongMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gamedb.PLongMsg)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PLongMsg* default_instance_;
};
// -------------------------------------------------------------------

class PStringMsg : public ::google::protobuf::Message {
 public:
  PStringMsg();
  virtual ~PStringMsg();

  PStringMsg(const PStringMsg& from);

  inline PStringMsg& operator=(const PStringMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PStringMsg& default_instance();

  void Swap(PStringMsg* other);

  // implements Message ----------------------------------------------

  PStringMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PStringMsg& from);
  void MergeFrom(const PStringMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:gamedb.PStringMsg)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static PStringMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// PUser

// required string username = 1;
inline bool PUser::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PUser::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PUser::username() const {
  return *username_;
}
inline void PUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PUser::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool PUser::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PUser::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PUser::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PUser::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PUser::password() const {
  return *password_;
}
inline void PUser::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PUser::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PUser::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PUser::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PUser::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PUser::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string email = 3;
inline bool PUser::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PUser::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PUser::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PUser::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PUser::email() const {
  return *email_;
}
inline void PUser::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PUser::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PUser::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PUser::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* PUser::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PUser::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PList

// required string type = 1;
inline bool PList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PList::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PList::type() const {
  return *type_;
}
inline void PList::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PList::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PList::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PList::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PList::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PList::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes listdata = 2;
inline int PList::listdata_size() const {
  return listdata_.size();
}
inline void PList::clear_listdata() {
  listdata_.Clear();
}
inline const ::std::string& PList::listdata(int index) const {
  return listdata_.Get(index);
}
inline ::std::string* PList::mutable_listdata(int index) {
  return listdata_.Mutable(index);
}
inline void PList::set_listdata(int index, const ::std::string& value) {
  listdata_.Mutable(index)->assign(value);
}
inline void PList::set_listdata(int index, const char* value) {
  listdata_.Mutable(index)->assign(value);
}
inline void PList::set_listdata(int index, const void* value, size_t size) {
  listdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PList::add_listdata() {
  return listdata_.Add();
}
inline void PList::add_listdata(const ::std::string& value) {
  listdata_.Add()->assign(value);
}
inline void PList::add_listdata(const char* value) {
  listdata_.Add()->assign(value);
}
inline void PList::add_listdata(const void* value, size_t size) {
  listdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PList::listdata() const {
  return listdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PList::mutable_listdata() {
  return &listdata_;
}

// -------------------------------------------------------------------

// PGame

// required string name = 1;
inline bool PGame::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGame::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGame::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGame::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PGame::name() const {
  return *name_;
}
inline void PGame::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PGame::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PGame::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PGame::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PGame::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PGame::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PScore

// required float score = 1;
inline bool PScore::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PScore::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float PScore::score() const {
  return score_;
}
inline void PScore::set_score(float value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// PRegistrationInfo

// required int64 fromDate = 1;
inline bool PRegistrationInfo::has_fromdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRegistrationInfo::set_has_fromdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRegistrationInfo::clear_has_fromdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRegistrationInfo::clear_fromdate() {
  fromdate_ = GOOGLE_LONGLONG(0);
  clear_has_fromdate();
}
inline ::google::protobuf::int64 PRegistrationInfo::fromdate() const {
  return fromdate_;
}
inline void PRegistrationInfo::set_fromdate(::google::protobuf::int64 value) {
  set_has_fromdate();
  fromdate_ = value;
}

// optional int64 toDate = 2 [default = 0];
inline bool PRegistrationInfo::has_todate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRegistrationInfo::set_has_todate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRegistrationInfo::clear_has_todate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRegistrationInfo::clear_todate() {
  todate_ = GOOGLE_LONGLONG(0);
  clear_has_todate();
}
inline ::google::protobuf::int64 PRegistrationInfo::todate() const {
  return todate_;
}
inline void PRegistrationInfo::set_todate(::google::protobuf::int64 value) {
  set_has_todate();
  todate_ = value;
}

// optional uint32 amountLogins = 3 [default = 95];
inline bool PRegistrationInfo::has_amountlogins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PRegistrationInfo::set_has_amountlogins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PRegistrationInfo::clear_has_amountlogins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PRegistrationInfo::clear_amountlogins() {
  amountlogins_ = 95u;
  clear_has_amountlogins();
}
inline ::google::protobuf::uint32 PRegistrationInfo::amountlogins() const {
  return amountlogins_;
}
inline void PRegistrationInfo::set_amountlogins(::google::protobuf::uint32 value) {
  set_has_amountlogins();
  amountlogins_ = value;
}

// optional uint64 timePlayed = 4 [default = 0];
inline bool PRegistrationInfo::has_timeplayed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PRegistrationInfo::set_has_timeplayed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PRegistrationInfo::clear_has_timeplayed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PRegistrationInfo::clear_timeplayed() {
  timeplayed_ = GOOGLE_ULONGLONG(0);
  clear_has_timeplayed();
}
inline ::google::protobuf::uint64 PRegistrationInfo::timeplayed() const {
  return timeplayed_;
}
inline void PRegistrationInfo::set_timeplayed(::google::protobuf::uint64 value) {
  set_has_timeplayed();
  timeplayed_ = value;
}

// -------------------------------------------------------------------

// PBooleanMsg

// required bool value = 1;
inline bool PBooleanMsg::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBooleanMsg::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBooleanMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBooleanMsg::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool PBooleanMsg::value() const {
  return value_;
}
inline void PBooleanMsg::set_value(bool value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PIntMsg

// required int32 value = 1;
inline bool PIntMsg::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PIntMsg::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PIntMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PIntMsg::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PIntMsg::value() const {
  return value_;
}
inline void PIntMsg::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PFloatMsg

// required float value = 1;
inline bool PFloatMsg::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PFloatMsg::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PFloatMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PFloatMsg::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float PFloatMsg::value() const {
  return value_;
}
inline void PFloatMsg::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PLongMsg

// required int64 value = 1;
inline bool PLongMsg::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PLongMsg::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PLongMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PLongMsg::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 PLongMsg::value() const {
  return value_;
}
inline void PLongMsg::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PStringMsg

// required string value = 1;
inline bool PStringMsg::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PStringMsg::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PStringMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PStringMsg::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PStringMsg::value() const {
  return *value_;
}
inline void PStringMsg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PStringMsg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PStringMsg::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PStringMsg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PStringMsg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PStringMsg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamedb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
