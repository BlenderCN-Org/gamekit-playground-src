/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gameserver_TYPES_H
#define gameserver_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace gs {

struct TAddUserResultCode {
  enum type {
    ok = 0,
    username_exists = 1,
    email_exists = 2,
    not_allowed_operation = 3
  };
};

extern const std::map<int, const char*> _TAddUserResultCode_VALUES_TO_NAMES;

struct TAddScoreResultCode {
  enum type {
    nothing_special = 0,
    player_highscore = 1,
    current_highscore = 2,
    alltime_highscore = 3
  };
};

extern const std::map<int, const char*> _TAddScoreResultCode_VALUES_TO_NAMES;

struct TLoginResultCode {
  enum type {
    ok = 0,
    no_game = 1,
    player_not_allowed_to_register_for_game = 2,
    player_password_invalid = 3,
    player_suspended = 4,
    no_salt_requested = 5
  };
};

extern const std::map<int, const char*> _TLoginResultCode_VALUES_TO_NAMES;

struct TGetUserResultCode {
  enum type {
    ok = 0,
    unknown = 1
  };
};

extern const std::map<int, const char*> _TGetUserResultCode_VALUES_TO_NAMES;

struct ErrorCode {
  enum type {
    no_user = 0,
    no_game = 1,
    unknown_mode = 2,
    no_os = 3
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct TUserDataResponse {
  enum type {
    ok = 0,
    email_used = 1,
    username_used = 2,
    both = 3
  };
};

extern const std::map<int, const char*> _TUserDataResponse_VALUES_TO_NAMES;

struct TSetGameResult {
  enum type {
    ok = 0,
    unknown = 1,
    client_not_supported = 2
  };
};

extern const std::map<int, const char*> _TSetGameResult_VALUES_TO_NAMES;

struct TAutoLoginResultCode {
  enum type {
    ok = 0,
    invalid = 1,
    wrong_meta = 2
  };
};

extern const std::map<int, const char*> _TAutoLoginResultCode_VALUES_TO_NAMES;

typedef struct _TUser__isset {
  _TUser__isset() : username(false), password(false), email(false), data(false) {}
  bool username;
  bool password;
  bool email;
  bool data;
} _TUser__isset;

class TUser {
 public:

  static const char* ascii_fingerprint; // = "67969F1488D4D99C7F78F564155E4938";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x96,0x9F,0x14,0x88,0xD4,0xD9,0x9C,0x7F,0x78,0xF5,0x64,0x15,0x5E,0x49,0x38};

  TUser() : username(), password(), email(), data() {
  }

  virtual ~TUser() throw() {}

  std::string username;
  std::string password;
  std::string email;
  std::string data;

  _TUser__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_data(const std::string& val) {
    data = val;
    __isset.data = true;
  }

  bool operator == (const TUser & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(email == rhs.email))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUser &a, TUser &b);

typedef struct _TScore__isset {
  _TScore__isset() : score(true), time(true), data(false), username(false), gamename(false), mode(false), os(false) {}
  bool score;
  bool time;
  bool data;
  bool username;
  bool gamename;
  bool mode;
  bool os;
} _TScore__isset;

class TScore {
 public:

  static const char* ascii_fingerprint; // = "890DE3E083E8C3933E6B7DFD00E969E7";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x0D,0xE3,0xE0,0x83,0xE8,0xC3,0x93,0x3E,0x6B,0x7D,0xFD,0x00,0xE9,0x69,0xE7};

  TScore() : score(0), time(0LL), data(), username(), gamename(), mode(0), os(0) {
  }

  virtual ~TScore() throw() {}

  double score;
  int64_t time;
  std::string data;
  std::string username;
  std::string gamename;
  int32_t mode;
  int32_t os;

  _TScore__isset __isset;

  void __set_score(const double val) {
    score = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_data(const std::string& val) {
    data = val;
    __isset.data = true;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_gamename(const std::string& val) {
    gamename = val;
  }

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_os(const int32_t val) {
    os = val;
  }

  bool operator == (const TScore & rhs) const
  {
    if (!(score == rhs.score))
      return false;
    if (!(time == rhs.time))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(gamename == rhs.gamename))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(os == rhs.os))
      return false;
    return true;
  }
  bool operator != (const TScore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TScore &a, TScore &b);

typedef struct _TGame__isset {
  _TGame__isset() : name(false), data(false) {}
  bool name;
  bool data;
} _TGame__isset;

class TGame {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  TGame() : name(), data() {
  }

  virtual ~TGame() throw() {}

  std::string name;
  std::string data;

  _TGame__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_data(const std::string& val) {
    data = val;
    __isset.data = true;
  }

  bool operator == (const TGame & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGame &a, TGame &b);

typedef struct _TMode__isset {
  _TMode__isset() : modeNr(false) {}
  bool modeNr;
} _TMode__isset;

class TMode {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  TMode() : modeNr(0) {
  }

  virtual ~TMode() throw() {}

  int32_t modeNr;

  _TMode__isset __isset;

  void __set_modeNr(const int32_t val) {
    modeNr = val;
  }

  bool operator == (const TMode & rhs) const
  {
    if (!(modeNr == rhs.modeNr))
      return false;
    return true;
  }
  bool operator != (const TMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TMode &a, TMode &b);

typedef struct _TRegInfo__isset {
  _TRegInfo__isset() : register_date(false), amount_logins(false) {}
  bool register_date;
  bool amount_logins;
} _TRegInfo__isset;

class TRegInfo {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  TRegInfo() : register_date(0), amount_logins(0) {
  }

  virtual ~TRegInfo() throw() {}

  int64_t register_date;
  int32_t amount_logins;

  _TRegInfo__isset __isset;

  void __set_register_date(const int64_t val) {
    register_date = val;
  }

  void __set_amount_logins(const int32_t val) {
    amount_logins = val;
  }

  bool operator == (const TRegInfo & rhs) const
  {
    if (!(register_date == rhs.register_date))
      return false;
    if (!(amount_logins == rhs.amount_logins))
      return false;
    return true;
  }
  bool operator != (const TRegInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegInfo &a, TRegInfo &b);

typedef struct _TAddScoreResponse__isset {
  _TAddScoreResponse__isset() : pos(false), result_code(false), os(false) {}
  bool pos;
  bool result_code;
  bool os;
} _TAddScoreResponse__isset;

class TAddScoreResponse {
 public:

  static const char* ascii_fingerprint; // = "DE035C7565A0274CBA4FB0CDABB89798";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x03,0x5C,0x75,0x65,0xA0,0x27,0x4C,0xBA,0x4F,0xB0,0xCD,0xAB,0xB8,0x97,0x98};

  TAddScoreResponse() : pos(0), result_code((TAddScoreResultCode::type)0), os(0) {
  }

  virtual ~TAddScoreResponse() throw() {}

  int32_t pos;
  TAddScoreResultCode::type result_code;
  int32_t os;

  _TAddScoreResponse__isset __isset;

  void __set_pos(const int32_t val) {
    pos = val;
  }

  void __set_result_code(const TAddScoreResultCode::type val) {
    result_code = val;
  }

  void __set_os(const int32_t val) {
    os = val;
  }

  bool operator == (const TAddScoreResponse & rhs) const
  {
    if (!(pos == rhs.pos))
      return false;
    if (!(result_code == rhs.result_code))
      return false;
    if (!(os == rhs.os))
      return false;
    return true;
  }
  bool operator != (const TAddScoreResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAddScoreResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TAddScoreResponse &a, TAddScoreResponse &b);

typedef struct _TLoginResponse__isset {
  _TLoginResponse__isset() : result_code(false), user(false) {}
  bool result_code;
  bool user;
} _TLoginResponse__isset;

class TLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "F62EAFE279CB8EA254A8EE63276D1444";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x2E,0xAF,0xE2,0x79,0xCB,0x8E,0xA2,0x54,0xA8,0xEE,0x63,0x27,0x6D,0x14,0x44};

  TLoginResponse() : result_code((TLoginResultCode::type)0) {
  }

  virtual ~TLoginResponse() throw() {}

  TLoginResultCode::type result_code;
  TUser user;

  _TLoginResponse__isset __isset;

  void __set_result_code(const TLoginResultCode::type val) {
    result_code = val;
  }

  void __set_user(const TUser& val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const TLoginResponse & rhs) const
  {
    if (!(result_code == rhs.result_code))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TLoginResponse &a, TLoginResponse &b);

typedef struct _TGetUserResponse__isset {
  _TGetUserResponse__isset() : result_code(false), user(false) {}
  bool result_code;
  bool user;
} _TGetUserResponse__isset;

class TGetUserResponse {
 public:

  static const char* ascii_fingerprint; // = "F62EAFE279CB8EA254A8EE63276D1444";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x2E,0xAF,0xE2,0x79,0xCB,0x8E,0xA2,0x54,0xA8,0xEE,0x63,0x27,0x6D,0x14,0x44};

  TGetUserResponse() : result_code((TGetUserResultCode::type)0) {
  }

  virtual ~TGetUserResponse() throw() {}

  TGetUserResultCode::type result_code;
  TUser user;

  _TGetUserResponse__isset __isset;

  void __set_result_code(const TGetUserResultCode::type val) {
    result_code = val;
  }

  void __set_user(const TUser& val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const TGetUserResponse & rhs) const
  {
    if (!(result_code == rhs.result_code))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TGetUserResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetUserResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGetUserResponse &a, TGetUserResponse &b);

typedef struct _TErrorException__isset {
  _TErrorException__isset() : error_code(false), error_msg(false) {}
  bool error_code;
  bool error_msg;
} _TErrorException__isset;

class TErrorException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  TErrorException() : error_code((ErrorCode::type)0), error_msg() {
  }

  virtual ~TErrorException() throw() {}

  ErrorCode::type error_code;
  std::string error_msg;

  _TErrorException__isset __isset;

  void __set_error_code(const ErrorCode::type val) {
    error_code = val;
  }

  void __set_error_msg(const std::string& val) {
    error_msg = val;
    __isset.error_msg = true;
  }

  bool operator == (const TErrorException & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (__isset.error_msg != rhs.__isset.error_msg)
      return false;
    else if (__isset.error_msg && !(error_msg == rhs.error_msg))
      return false;
    return true;
  }
  bool operator != (const TErrorException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TErrorException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TErrorException &a, TErrorException &b);

typedef struct _TSessionCheck__isset {
  _TSessionCheck__isset() : hasGame(false), hasPlayer(false) {}
  bool hasGame;
  bool hasPlayer;
} _TSessionCheck__isset;

class TSessionCheck {
 public:

  static const char* ascii_fingerprint; // = "403F0C4586060E367DA428DD09C59C9C";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

  TSessionCheck() : hasGame(0), hasPlayer(0) {
  }

  virtual ~TSessionCheck() throw() {}

  bool hasGame;
  bool hasPlayer;

  _TSessionCheck__isset __isset;

  void __set_hasGame(const bool val) {
    hasGame = val;
  }

  void __set_hasPlayer(const bool val) {
    hasPlayer = val;
  }

  bool operator == (const TSessionCheck & rhs) const
  {
    if (!(hasGame == rhs.hasGame))
      return false;
    if (!(hasPlayer == rhs.hasPlayer))
      return false;
    return true;
  }
  bool operator != (const TSessionCheck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSessionCheck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSessionCheck &a, TSessionCheck &b);

typedef struct _TSigninToken__isset {
  _TSigninToken__isset() : tokenName(false), tokenHash(false) {}
  bool tokenName;
  bool tokenHash;
} _TSigninToken__isset;

class TSigninToken {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TSigninToken() : tokenName(), tokenHash() {
  }

  virtual ~TSigninToken() throw() {}

  std::string tokenName;
  std::string tokenHash;

  _TSigninToken__isset __isset;

  void __set_tokenName(const std::string& val) {
    tokenName = val;
  }

  void __set_tokenHash(const std::string& val) {
    tokenHash = val;
  }

  bool operator == (const TSigninToken & rhs) const
  {
    if (!(tokenName == rhs.tokenName))
      return false;
    if (!(tokenHash == rhs.tokenHash))
      return false;
    return true;
  }
  bool operator != (const TSigninToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSigninToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSigninToken &a, TSigninToken &b);

typedef struct _TAutoLoginResponse__isset {
  _TAutoLoginResponse__isset() : resultCode(false), tokenName(false), tokenHash(false), user(false) {}
  bool resultCode;
  bool tokenName;
  bool tokenHash;
  bool user;
} _TAutoLoginResponse__isset;

class TAutoLoginResponse {
 public:

  static const char* ascii_fingerprint; // = "A54D40CD7BFBABB0B1D43595AFC81566";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x4D,0x40,0xCD,0x7B,0xFB,0xAB,0xB0,0xB1,0xD4,0x35,0x95,0xAF,0xC8,0x15,0x66};

  TAutoLoginResponse() : resultCode((TAutoLoginResultCode::type)0), tokenName(), tokenHash() {
  }

  virtual ~TAutoLoginResponse() throw() {}

  TAutoLoginResultCode::type resultCode;
  std::string tokenName;
  std::string tokenHash;
  TUser user;

  _TAutoLoginResponse__isset __isset;

  void __set_resultCode(const TAutoLoginResultCode::type val) {
    resultCode = val;
  }

  void __set_tokenName(const std::string& val) {
    tokenName = val;
    __isset.tokenName = true;
  }

  void __set_tokenHash(const std::string& val) {
    tokenHash = val;
    __isset.tokenHash = true;
  }

  void __set_user(const TUser& val) {
    user = val;
    __isset.user = true;
  }

  bool operator == (const TAutoLoginResponse & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (__isset.tokenName != rhs.__isset.tokenName)
      return false;
    else if (__isset.tokenName && !(tokenName == rhs.tokenName))
      return false;
    if (__isset.tokenHash != rhs.__isset.tokenHash)
      return false;
    else if (__isset.tokenHash && !(tokenHash == rhs.tokenHash))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const TAutoLoginResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAutoLoginResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TAutoLoginResponse &a, TAutoLoginResponse &b);

typedef struct _TBeforeLevelData__isset {
  _TBeforeLevelData__isset() : top(false), around_player(false), around_player_offset(false), player_pos(false), player_score(false) {}
  bool top;
  bool around_player;
  bool around_player_offset;
  bool player_pos;
  bool player_score;
} _TBeforeLevelData__isset;

class TBeforeLevelData {
 public:

  static const char* ascii_fingerprint; // = "7597CFC433E8824B938012EC42D92CFC";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x97,0xCF,0xC4,0x33,0xE8,0x82,0x4B,0x93,0x80,0x12,0xEC,0x42,0xD9,0x2C,0xFC};

  TBeforeLevelData() : around_player_offset(0), player_pos(0) {
  }

  virtual ~TBeforeLevelData() throw() {}

  std::vector<TScore>  top;
  std::vector<TScore>  around_player;
  int32_t around_player_offset;
  int32_t player_pos;
  TScore player_score;

  _TBeforeLevelData__isset __isset;

  void __set_top(const std::vector<TScore> & val) {
    top = val;
  }

  void __set_around_player(const std::vector<TScore> & val) {
    around_player = val;
  }

  void __set_around_player_offset(const int32_t val) {
    around_player_offset = val;
  }

  void __set_player_pos(const int32_t val) {
    player_pos = val;
  }

  void __set_player_score(const TScore& val) {
    player_score = val;
  }

  bool operator == (const TBeforeLevelData & rhs) const
  {
    if (!(top == rhs.top))
      return false;
    if (!(around_player == rhs.around_player))
      return false;
    if (!(around_player_offset == rhs.around_player_offset))
      return false;
    if (!(player_pos == rhs.player_pos))
      return false;
    if (!(player_score == rhs.player_score))
      return false;
    return true;
  }
  bool operator != (const TBeforeLevelData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBeforeLevelData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TBeforeLevelData &a, TBeforeLevelData &b);

} // namespace

#endif
