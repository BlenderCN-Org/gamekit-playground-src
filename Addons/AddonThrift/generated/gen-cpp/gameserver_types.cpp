/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gameserver_types.h"

#include <algorithm>

namespace gs {

int _kTAddUserResultCodeValues[] = {
  TAddUserResultCode::ok,
  TAddUserResultCode::username_exists,
  TAddUserResultCode::email_exists,
  TAddUserResultCode::not_allowed_operation
};
const char* _kTAddUserResultCodeNames[] = {
  "ok",
  "username_exists",
  "email_exists",
  "not_allowed_operation"
};
const std::map<int, const char*> _TAddUserResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTAddUserResultCodeValues, _kTAddUserResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTAddScoreResultCodeValues[] = {
  TAddScoreResultCode::nothing_special,
  TAddScoreResultCode::player_highscore,
  TAddScoreResultCode::current_highscore,
  TAddScoreResultCode::alltime_highscore
};
const char* _kTAddScoreResultCodeNames[] = {
  "nothing_special",
  "player_highscore",
  "current_highscore",
  "alltime_highscore"
};
const std::map<int, const char*> _TAddScoreResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTAddScoreResultCodeValues, _kTAddScoreResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTLoginResultCodeValues[] = {
  TLoginResultCode::ok,
  TLoginResultCode::no_game,
  TLoginResultCode::player_not_allowed_to_register_for_game,
  TLoginResultCode::player_password_invalid,
  TLoginResultCode::player_suspended,
  TLoginResultCode::no_salt_requested
};
const char* _kTLoginResultCodeNames[] = {
  "ok",
  "no_game",
  "player_not_allowed_to_register_for_game",
  "player_password_invalid",
  "player_suspended",
  "no_salt_requested"
};
const std::map<int, const char*> _TLoginResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTLoginResultCodeValues, _kTLoginResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTGetUserResultCodeValues[] = {
  TGetUserResultCode::ok,
  TGetUserResultCode::unknown
};
const char* _kTGetUserResultCodeNames[] = {
  "ok",
  "unknown"
};
const std::map<int, const char*> _TGetUserResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTGetUserResultCodeValues, _kTGetUserResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorCodeValues[] = {
  ErrorCode::no_user,
  ErrorCode::no_game,
  ErrorCode::unknown_mode,
  ErrorCode::no_os
};
const char* _kErrorCodeNames[] = {
  "no_user",
  "no_game",
  "unknown_mode",
  "no_os"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTUserDataResponseValues[] = {
  TUserDataResponse::ok,
  TUserDataResponse::email_used,
  TUserDataResponse::username_used,
  TUserDataResponse::both
};
const char* _kTUserDataResponseNames[] = {
  "ok",
  "email_used",
  "username_used",
  "both"
};
const std::map<int, const char*> _TUserDataResponse_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTUserDataResponseValues, _kTUserDataResponseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTSetGameResultValues[] = {
  TSetGameResult::ok,
  TSetGameResult::unknown,
  TSetGameResult::client_not_supported
};
const char* _kTSetGameResultNames[] = {
  "ok",
  "unknown",
  "client_not_supported"
};
const std::map<int, const char*> _TSetGameResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSetGameResultValues, _kTSetGameResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTAutoLoginResultCodeValues[] = {
  TAutoLoginResultCode::ok,
  TAutoLoginResultCode::invalid,
  TAutoLoginResultCode::wrong_meta
};
const char* _kTAutoLoginResultCodeNames[] = {
  "ok",
  "invalid",
  "wrong_meta"
};
const std::map<int, const char*> _TAutoLoginResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTAutoLoginResultCodeValues, _kTAutoLoginResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TUser::ascii_fingerprint = "67969F1488D4D99C7F78F564155E4938";
const uint8_t TUser::binary_fingerprint[16] = {0x67,0x96,0x9F,0x14,0x88,0xD4,0xD9,0x9C,0x7F,0x78,0xF5,0x64,0x15,0x5E,0x49,0x38};

uint32_t TUser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TUser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TUser");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TUser &a, TUser &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.password, b.password);
  swap(a.email, b.email);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* TScore::ascii_fingerprint = "890DE3E083E8C3933E6B7DFD00E969E7";
const uint8_t TScore::binary_fingerprint[16] = {0x89,0x0D,0xE3,0xE0,0x83,0xE8,0xC3,0x93,0x3E,0x6B,0x7D,0xFD,0x00,0xE9,0x69,0xE7};

uint32_t TScore::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->score);
          this->__isset.score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gamename);
          this->__isset.gamename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TScore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TScore");

  xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gamename", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->gamename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TScore &a, TScore &b) {
  using ::std::swap;
  swap(a.score, b.score);
  swap(a.time, b.time);
  swap(a.data, b.data);
  swap(a.username, b.username);
  swap(a.gamename, b.gamename);
  swap(a.mode, b.mode);
  swap(a.os, b.os);
  swap(a.__isset, b.__isset);
}

const char* TGame::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t TGame::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t TGame::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGame::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TGame");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGame &a, TGame &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

const char* TMode::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t TMode::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t TMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modeNr);
          this->__isset.modeNr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TMode");

  xfer += oprot->writeFieldBegin("modeNr", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->modeNr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMode &a, TMode &b) {
  using ::std::swap;
  swap(a.modeNr, b.modeNr);
  swap(a.__isset, b.__isset);
}

const char* TRegInfo::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t TRegInfo::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t TRegInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->register_date);
          this->__isset.register_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount_logins);
          this->__isset.amount_logins = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRegInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRegInfo");

  xfer += oprot->writeFieldBegin("register_date", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->register_date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount_logins", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->amount_logins);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRegInfo &a, TRegInfo &b) {
  using ::std::swap;
  swap(a.register_date, b.register_date);
  swap(a.amount_logins, b.amount_logins);
  swap(a.__isset, b.__isset);
}

const char* TAddScoreResponse::ascii_fingerprint = "DE035C7565A0274CBA4FB0CDABB89798";
const uint8_t TAddScoreResponse::binary_fingerprint[16] = {0xDE,0x03,0x5C,0x75,0x65,0xA0,0x27,0x4C,0xBA,0x4F,0xB0,0xCD,0xAB,0xB8,0x97,0x98};

uint32_t TAddScoreResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos);
          this->__isset.pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->result_code = (TAddScoreResultCode::type)ecast0;
          this->__isset.result_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAddScoreResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TAddScoreResponse");

  xfer += oprot->writeFieldBegin("pos", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result_code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->result_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAddScoreResponse &a, TAddScoreResponse &b) {
  using ::std::swap;
  swap(a.pos, b.pos);
  swap(a.result_code, b.result_code);
  swap(a.os, b.os);
  swap(a.__isset, b.__isset);
}

const char* TLoginResponse::ascii_fingerprint = "F62EAFE279CB8EA254A8EE63276D1444";
const uint8_t TLoginResponse::binary_fingerprint[16] = {0xF6,0x2E,0xAF,0xE2,0x79,0xCB,0x8E,0xA2,0x54,0xA8,0xEE,0x63,0x27,0x6D,0x14,0x44};

uint32_t TLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->result_code = (TLoginResultCode::type)ecast1;
          this->__isset.result_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TLoginResponse");

  xfer += oprot->writeFieldBegin("result_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TLoginResponse &a, TLoginResponse &b) {
  using ::std::swap;
  swap(a.result_code, b.result_code);
  swap(a.user, b.user);
  swap(a.__isset, b.__isset);
}

const char* TGetUserResponse::ascii_fingerprint = "F62EAFE279CB8EA254A8EE63276D1444";
const uint8_t TGetUserResponse::binary_fingerprint[16] = {0xF6,0x2E,0xAF,0xE2,0x79,0xCB,0x8E,0xA2,0x54,0xA8,0xEE,0x63,0x27,0x6D,0x14,0x44};

uint32_t TGetUserResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->result_code = (TGetUserResultCode::type)ecast2;
          this->__isset.result_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGetUserResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TGetUserResponse");

  xfer += oprot->writeFieldBegin("result_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGetUserResponse &a, TGetUserResponse &b) {
  using ::std::swap;
  swap(a.result_code, b.result_code);
  swap(a.user, b.user);
  swap(a.__isset, b.__isset);
}

const char* TErrorException::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t TErrorException::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t TErrorException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->error_code = (ErrorCode::type)ecast3;
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TErrorException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TErrorException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error_code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error_msg) {
    xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->error_msg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TErrorException &a, TErrorException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.__isset, b.__isset);
}

const char* TSessionCheck::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t TSessionCheck::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

uint32_t TSessionCheck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGame);
          this->__isset.hasGame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPlayer);
          this->__isset.hasPlayer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSessionCheck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSessionCheck");

  xfer += oprot->writeFieldBegin("hasGame", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasGame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasPlayer", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasPlayer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSessionCheck &a, TSessionCheck &b) {
  using ::std::swap;
  swap(a.hasGame, b.hasGame);
  swap(a.hasPlayer, b.hasPlayer);
  swap(a.__isset, b.__isset);
}

const char* TSigninToken::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t TSigninToken::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t TSigninToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenName);
          this->__isset.tokenName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenHash);
          this->__isset.tokenHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSigninToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSigninToken");

  xfer += oprot->writeFieldBegin("tokenName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenHash", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tokenHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSigninToken &a, TSigninToken &b) {
  using ::std::swap;
  swap(a.tokenName, b.tokenName);
  swap(a.tokenHash, b.tokenHash);
  swap(a.__isset, b.__isset);
}

const char* TAutoLoginResponse::ascii_fingerprint = "A54D40CD7BFBABB0B1D43595AFC81566";
const uint8_t TAutoLoginResponse::binary_fingerprint[16] = {0xA5,0x4D,0x40,0xCD,0x7B,0xFB,0xAB,0xB0,0xB1,0xD4,0x35,0x95,0xAF,0xC8,0x15,0x66};

uint32_t TAutoLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->resultCode = (TAutoLoginResultCode::type)ecast4;
          this->__isset.resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenName);
          this->__isset.tokenName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenHash);
          this->__isset.tokenHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAutoLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TAutoLoginResponse");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->resultCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tokenName) {
    xfer += oprot->writeFieldBegin("tokenName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tokenName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tokenHash) {
    xfer += oprot->writeFieldBegin("tokenHash", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->tokenHash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAutoLoginResponse &a, TAutoLoginResponse &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.tokenName, b.tokenName);
  swap(a.tokenHash, b.tokenHash);
  swap(a.user, b.user);
  swap(a.__isset, b.__isset);
}

const char* TBeforeLevelData::ascii_fingerprint = "7597CFC433E8824B938012EC42D92CFC";
const uint8_t TBeforeLevelData::binary_fingerprint[16] = {0x75,0x97,0xCF,0xC4,0x33,0xE8,0x82,0x4B,0x93,0x80,0x12,0xEC,0x42,0xD9,0x2C,0xFC};

uint32_t TBeforeLevelData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->top.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->top.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->top[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->around_player.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->around_player.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->around_player[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.around_player = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->around_player_offset);
          this->__isset.around_player_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_pos);
          this->__isset.player_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->player_score.read(iprot);
          this->__isset.player_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TBeforeLevelData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TBeforeLevelData");

  xfer += oprot->writeFieldBegin("top", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->top.size()));
    std::vector<TScore> ::const_iterator _iter15;
    for (_iter15 = this->top.begin(); _iter15 != this->top.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("around_player", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->around_player.size()));
    std::vector<TScore> ::const_iterator _iter16;
    for (_iter16 = this->around_player.begin(); _iter16 != this->around_player.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("around_player_offset", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->around_player_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_pos", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->player_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_score", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->player_score.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBeforeLevelData &a, TBeforeLevelData &b) {
  using ::std::swap;
  swap(a.top, b.top);
  swap(a.around_player, b.around_player);
  swap(a.around_player_offset, b.around_player_offset);
  swap(a.player_pos, b.player_pos);
  swap(a.player_score, b.player_score);
  swap(a.__isset, b.__isset);
}

} // namespace
