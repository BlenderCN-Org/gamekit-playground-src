// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TGameServerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::gs;

class TGameServerServiceHandler : virtual public TGameServerServiceIf {
 public:
  TGameServerServiceHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  TSetGameResult::type set_game(const std::string& gameid, const int32_t os, const int32_t version) {
    // Your implementation goes here
    printf("set_game\n");
  }

  void create_game(const std::string& name, const int32_t modeAmount, const bool ascOrdering) {
    // Your implementation goes here
    printf("create_game\n");
  }

  void create_modes(const std::string& gameid, const int32_t amount, const bool ascOrdering) {
    // Your implementation goes here
    printf("create_modes\n");
  }

  void get_all_games(std::set<TGame> & _return) {
    // Your implementation goes here
    printf("get_all_games\n");
  }

  void get_game(TGame& _return, const std::string& name) {
    // Your implementation goes here
    printf("get_game\n");
  }

  void set_mode_order_ascending(const int32_t mode, const bool asc) {
    // Your implementation goes here
    printf("set_mode_order_ascending\n");
  }

  TAddUserResultCode::type add_user(const TUser& u) {
    // Your implementation goes here
    printf("add_user\n");
  }

  void get_user_by_username(TGetUserResponse& _return, const std::string& username) {
    // Your implementation goes here
    printf("get_user_by_username\n");
  }

  void get_user_list(std::set<TUser> & _return) {
    // Your implementation goes here
    printf("get_user_list\n");
  }

  void request_logintoken(std::string& _return) {
    // Your implementation goes here
    printf("request_logintoken\n");
  }

  void login_user(TLoginResponse& _return, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("login_user\n");
  }

  void request_signintoken(TSigninToken& _return, const std::string& meta) {
    // Your implementation goes here
    printf("request_signintoken\n");
  }

  void login_by_token(TAutoLoginResponse& _return, const std::string& tokenUser, const std::string& tokenHash, const std::string& meta) {
    // Your implementation goes here
    printf("login_by_token\n");
  }

  TUserDataResponse::type check_userdata(const std::string& username, const std::string& email) {
    // Your implementation goes here
    printf("check_userdata\n");
  }

  void get_login_user(TGetUserResponse& _return) {
    // Your implementation goes here
    printf("get_login_user\n");
  }

  void check_session(TSessionCheck& _return) {
    // Your implementation goes here
    printf("check_session\n");
  }

  void add_score(std::vector<TAddScoreResponse> & _return, const int32_t mode, const double score) {
    // Your implementation goes here
    printf("add_score\n");
  }

  void get_player_scores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) {
    // Your implementation goes here
    printf("get_player_scores\n");
  }

  void get_highscores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) {
    // Your implementation goes here
    printf("get_highscores\n");
  }

  void get_player_highscores(std::vector<TScore> & _return) {
    // Your implementation goes here
    printf("get_player_highscores\n");
  }

  void get_player_highscore(TScore& _return, const int32_t mode) {
    // Your implementation goes here
    printf("get_player_highscore\n");
  }

  int32_t get_player_pos(const int32_t mode) {
    // Your implementation goes here
    printf("get_player_pos\n");
  }

  int32_t get_pos_by_score(const int32_t mode, const double score) {
    // Your implementation goes here
    printf("get_pos_by_score\n");
  }

  void get_before_level_data(TBeforeLevelData& _return, const int32_t mode, const int32_t top_amount, const int32_t me_amount) {
    // Your implementation goes here
    printf("get_before_level_data\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TGameServerServiceHandler> handler(new TGameServerServiceHandler());
  shared_ptr<TProcessor> processor(new TGameServerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

