/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TGameServerService_H
#define TGameServerService_H

#include <thrift/TDispatchProcessor.h>
#include "gameserver_types.h"

namespace gs {

class TGameServerServiceIf {
 public:
  virtual ~TGameServerServiceIf() {}
  virtual void ping() = 0;
  virtual TSetGameResult::type set_game(const std::string& gameid, const int32_t os, const int32_t version) = 0;
  virtual void create_game(const std::string& name, const int32_t modeAmount, const bool ascOrdering) = 0;
  virtual void create_modes(const std::string& gameid, const int32_t amount, const bool ascOrdering) = 0;
  virtual void get_all_games(std::set<TGame> & _return) = 0;
  virtual void get_game(TGame& _return, const std::string& name) = 0;
  virtual void set_mode_order_ascending(const int32_t mode, const bool asc) = 0;
  virtual TAddUserResultCode::type add_user(const TUser& u) = 0;
  virtual void get_user_by_username(TGetUserResponse& _return, const std::string& username) = 0;
  virtual void get_user_list(std::set<TUser> & _return) = 0;
  virtual void request_logintoken(std::string& _return) = 0;
  virtual void login_user(TLoginResponse& _return, const std::string& username, const std::string& password) = 0;
  virtual void request_signintoken(TSigninToken& _return, const std::string& meta) = 0;
  virtual void login_by_token(TAutoLoginResponse& _return, const std::string& tokenUser, const std::string& tokenHash, const std::string& meta) = 0;
  virtual TUserDataResponse::type check_userdata(const std::string& username, const std::string& email) = 0;
  virtual void get_login_user(TGetUserResponse& _return) = 0;
  virtual void check_session(TSessionCheck& _return) = 0;
  virtual void add_score(std::vector<TAddScoreResponse> & _return, const int32_t mode, const double score) = 0;
  virtual void get_player_scores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) = 0;
  virtual void get_highscores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) = 0;
  virtual void get_player_highscores(std::vector<TScore> & _return) = 0;
  virtual void get_player_highscore(TScore& _return, const int32_t mode) = 0;
  virtual int32_t get_player_pos(const int32_t mode) = 0;
  virtual int32_t get_pos_by_score(const int32_t mode, const double score) = 0;
  virtual void get_before_level_data(TBeforeLevelData& _return, const int32_t mode, const int32_t top_amount, const int32_t me_amount) = 0;
};

class TGameServerServiceIfFactory {
 public:
  typedef TGameServerServiceIf Handler;

  virtual ~TGameServerServiceIfFactory() {}

  virtual TGameServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TGameServerServiceIf* /* handler */) = 0;
};

class TGameServerServiceIfSingletonFactory : virtual public TGameServerServiceIfFactory {
 public:
  TGameServerServiceIfSingletonFactory(const boost::shared_ptr<TGameServerServiceIf>& iface) : iface_(iface) {}
  virtual ~TGameServerServiceIfSingletonFactory() {}

  virtual TGameServerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TGameServerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TGameServerServiceIf> iface_;
};

class TGameServerServiceNull : virtual public TGameServerServiceIf {
 public:
  virtual ~TGameServerServiceNull() {}
  void ping() {
    return;
  }
  TSetGameResult::type set_game(const std::string& /* gameid */, const int32_t /* os */, const int32_t /* version */) {
    TSetGameResult::type _return = (TSetGameResult::type)0;
    return _return;
  }
  void create_game(const std::string& /* name */, const int32_t /* modeAmount */, const bool /* ascOrdering */) {
    return;
  }
  void create_modes(const std::string& /* gameid */, const int32_t /* amount */, const bool /* ascOrdering */) {
    return;
  }
  void get_all_games(std::set<TGame> & /* _return */) {
    return;
  }
  void get_game(TGame& /* _return */, const std::string& /* name */) {
    return;
  }
  void set_mode_order_ascending(const int32_t /* mode */, const bool /* asc */) {
    return;
  }
  TAddUserResultCode::type add_user(const TUser& /* u */) {
    TAddUserResultCode::type _return = (TAddUserResultCode::type)0;
    return _return;
  }
  void get_user_by_username(TGetUserResponse& /* _return */, const std::string& /* username */) {
    return;
  }
  void get_user_list(std::set<TUser> & /* _return */) {
    return;
  }
  void request_logintoken(std::string& /* _return */) {
    return;
  }
  void login_user(TLoginResponse& /* _return */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void request_signintoken(TSigninToken& /* _return */, const std::string& /* meta */) {
    return;
  }
  void login_by_token(TAutoLoginResponse& /* _return */, const std::string& /* tokenUser */, const std::string& /* tokenHash */, const std::string& /* meta */) {
    return;
  }
  TUserDataResponse::type check_userdata(const std::string& /* username */, const std::string& /* email */) {
    TUserDataResponse::type _return = (TUserDataResponse::type)0;
    return _return;
  }
  void get_login_user(TGetUserResponse& /* _return */) {
    return;
  }
  void check_session(TSessionCheck& /* _return */) {
    return;
  }
  void add_score(std::vector<TAddScoreResponse> & /* _return */, const int32_t /* mode */, const double /* score */) {
    return;
  }
  void get_player_scores(std::vector<TScore> & /* _return */, const int32_t /* mode */, const int32_t /* amount */, const int32_t /* offset */) {
    return;
  }
  void get_highscores(std::vector<TScore> & /* _return */, const int32_t /* mode */, const int32_t /* amount */, const int32_t /* offset */) {
    return;
  }
  void get_player_highscores(std::vector<TScore> & /* _return */) {
    return;
  }
  void get_player_highscore(TScore& /* _return */, const int32_t /* mode */) {
    return;
  }
  int32_t get_player_pos(const int32_t /* mode */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_pos_by_score(const int32_t /* mode */, const double /* score */) {
    int32_t _return = 0;
    return _return;
  }
  void get_before_level_data(TBeforeLevelData& /* _return */, const int32_t /* mode */, const int32_t /* top_amount */, const int32_t /* me_amount */) {
    return;
  }
};


class TGameServerService_ping_args {
 public:

  TGameServerService_ping_args() {
  }

  virtual ~TGameServerService_ping_args() throw() {}


  bool operator == (const TGameServerService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_ping_pargs {
 public:


  virtual ~TGameServerService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_ping_result {
 public:

  TGameServerService_ping_result() {
  }

  virtual ~TGameServerService_ping_result() throw() {}


  bool operator == (const TGameServerService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_ping_presult {
 public:


  virtual ~TGameServerService_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_set_game_args__isset {
  _TGameServerService_set_game_args__isset() : gameid(false), os(false), version(false) {}
  bool gameid;
  bool os;
  bool version;
} _TGameServerService_set_game_args__isset;

class TGameServerService_set_game_args {
 public:

  TGameServerService_set_game_args() : gameid(), os(0), version(0) {
  }

  virtual ~TGameServerService_set_game_args() throw() {}

  std::string gameid;
  int32_t os;
  int32_t version;

  _TGameServerService_set_game_args__isset __isset;

  void __set_gameid(const std::string& val) {
    gameid = val;
  }

  void __set_os(const int32_t val) {
    os = val;
  }

  void __set_version(const int32_t val) {
    version = val;
  }

  bool operator == (const TGameServerService_set_game_args & rhs) const
  {
    if (!(gameid == rhs.gameid))
      return false;
    if (!(os == rhs.os))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_set_game_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_set_game_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_set_game_pargs {
 public:


  virtual ~TGameServerService_set_game_pargs() throw() {}

  const std::string* gameid;
  const int32_t* os;
  const int32_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_set_game_result__isset {
  _TGameServerService_set_game_result__isset() : success(false) {}
  bool success;
} _TGameServerService_set_game_result__isset;

class TGameServerService_set_game_result {
 public:

  TGameServerService_set_game_result() : success((TSetGameResult::type)0) {
  }

  virtual ~TGameServerService_set_game_result() throw() {}

  TSetGameResult::type success;

  _TGameServerService_set_game_result__isset __isset;

  void __set_success(const TSetGameResult::type val) {
    success = val;
  }

  bool operator == (const TGameServerService_set_game_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_set_game_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_set_game_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_set_game_presult__isset {
  _TGameServerService_set_game_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_set_game_presult__isset;

class TGameServerService_set_game_presult {
 public:


  virtual ~TGameServerService_set_game_presult() throw() {}

  TSetGameResult::type* success;

  _TGameServerService_set_game_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_create_game_args__isset {
  _TGameServerService_create_game_args__isset() : name(false), modeAmount(false), ascOrdering(false) {}
  bool name;
  bool modeAmount;
  bool ascOrdering;
} _TGameServerService_create_game_args__isset;

class TGameServerService_create_game_args {
 public:

  TGameServerService_create_game_args() : name(), modeAmount(0), ascOrdering(0) {
  }

  virtual ~TGameServerService_create_game_args() throw() {}

  std::string name;
  int32_t modeAmount;
  bool ascOrdering;

  _TGameServerService_create_game_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_modeAmount(const int32_t val) {
    modeAmount = val;
  }

  void __set_ascOrdering(const bool val) {
    ascOrdering = val;
  }

  bool operator == (const TGameServerService_create_game_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(modeAmount == rhs.modeAmount))
      return false;
    if (!(ascOrdering == rhs.ascOrdering))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_create_game_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_create_game_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_game_pargs {
 public:


  virtual ~TGameServerService_create_game_pargs() throw() {}

  const std::string* name;
  const int32_t* modeAmount;
  const bool* ascOrdering;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_game_result {
 public:

  TGameServerService_create_game_result() {
  }

  virtual ~TGameServerService_create_game_result() throw() {}


  bool operator == (const TGameServerService_create_game_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_create_game_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_create_game_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_game_presult {
 public:


  virtual ~TGameServerService_create_game_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_create_modes_args__isset {
  _TGameServerService_create_modes_args__isset() : gameid(false), amount(false), ascOrdering(false) {}
  bool gameid;
  bool amount;
  bool ascOrdering;
} _TGameServerService_create_modes_args__isset;

class TGameServerService_create_modes_args {
 public:

  TGameServerService_create_modes_args() : gameid(), amount(0), ascOrdering(0) {
  }

  virtual ~TGameServerService_create_modes_args() throw() {}

  std::string gameid;
  int32_t amount;
  bool ascOrdering;

  _TGameServerService_create_modes_args__isset __isset;

  void __set_gameid(const std::string& val) {
    gameid = val;
  }

  void __set_amount(const int32_t val) {
    amount = val;
  }

  void __set_ascOrdering(const bool val) {
    ascOrdering = val;
  }

  bool operator == (const TGameServerService_create_modes_args & rhs) const
  {
    if (!(gameid == rhs.gameid))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(ascOrdering == rhs.ascOrdering))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_create_modes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_create_modes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_modes_pargs {
 public:


  virtual ~TGameServerService_create_modes_pargs() throw() {}

  const std::string* gameid;
  const int32_t* amount;
  const bool* ascOrdering;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_modes_result {
 public:

  TGameServerService_create_modes_result() {
  }

  virtual ~TGameServerService_create_modes_result() throw() {}


  bool operator == (const TGameServerService_create_modes_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_create_modes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_create_modes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_create_modes_presult {
 public:


  virtual ~TGameServerService_create_modes_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_get_all_games_args {
 public:

  TGameServerService_get_all_games_args() {
  }

  virtual ~TGameServerService_get_all_games_args() throw() {}


  bool operator == (const TGameServerService_get_all_games_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_get_all_games_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_all_games_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_all_games_pargs {
 public:


  virtual ~TGameServerService_get_all_games_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_all_games_result__isset {
  _TGameServerService_get_all_games_result__isset() : success(false) {}
  bool success;
} _TGameServerService_get_all_games_result__isset;

class TGameServerService_get_all_games_result {
 public:

  TGameServerService_get_all_games_result() {
  }

  virtual ~TGameServerService_get_all_games_result() throw() {}

  std::set<TGame>  success;

  _TGameServerService_get_all_games_result__isset __isset;

  void __set_success(const std::set<TGame> & val) {
    success = val;
  }

  bool operator == (const TGameServerService_get_all_games_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_all_games_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_all_games_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_all_games_presult__isset {
  _TGameServerService_get_all_games_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_get_all_games_presult__isset;

class TGameServerService_get_all_games_presult {
 public:


  virtual ~TGameServerService_get_all_games_presult() throw() {}

  std::set<TGame> * success;

  _TGameServerService_get_all_games_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_game_args__isset {
  _TGameServerService_get_game_args__isset() : name(false) {}
  bool name;
} _TGameServerService_get_game_args__isset;

class TGameServerService_get_game_args {
 public:

  TGameServerService_get_game_args() : name() {
  }

  virtual ~TGameServerService_get_game_args() throw() {}

  std::string name;

  _TGameServerService_get_game_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const TGameServerService_get_game_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_game_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_game_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_game_pargs {
 public:


  virtual ~TGameServerService_get_game_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_game_result__isset {
  _TGameServerService_get_game_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_game_result__isset;

class TGameServerService_get_game_result {
 public:

  TGameServerService_get_game_result() {
  }

  virtual ~TGameServerService_get_game_result() throw() {}

  TGame success;
  TErrorException e;

  _TGameServerService_get_game_result__isset __isset;

  void __set_success(const TGame& val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_game_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_game_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_game_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_game_presult__isset {
  _TGameServerService_get_game_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_game_presult__isset;

class TGameServerService_get_game_presult {
 public:


  virtual ~TGameServerService_get_game_presult() throw() {}

  TGame* success;
  TErrorException e;

  _TGameServerService_get_game_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_set_mode_order_ascending_args__isset {
  _TGameServerService_set_mode_order_ascending_args__isset() : mode(false), asc(false) {}
  bool mode;
  bool asc;
} _TGameServerService_set_mode_order_ascending_args__isset;

class TGameServerService_set_mode_order_ascending_args {
 public:

  TGameServerService_set_mode_order_ascending_args() : mode(0), asc(0) {
  }

  virtual ~TGameServerService_set_mode_order_ascending_args() throw() {}

  int32_t mode;
  bool asc;

  _TGameServerService_set_mode_order_ascending_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_asc(const bool val) {
    asc = val;
  }

  bool operator == (const TGameServerService_set_mode_order_ascending_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(asc == rhs.asc))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_set_mode_order_ascending_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_set_mode_order_ascending_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_set_mode_order_ascending_pargs {
 public:


  virtual ~TGameServerService_set_mode_order_ascending_pargs() throw() {}

  const int32_t* mode;
  const bool* asc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_set_mode_order_ascending_result__isset {
  _TGameServerService_set_mode_order_ascending_result__isset() : e(false) {}
  bool e;
} _TGameServerService_set_mode_order_ascending_result__isset;

class TGameServerService_set_mode_order_ascending_result {
 public:

  TGameServerService_set_mode_order_ascending_result() {
  }

  virtual ~TGameServerService_set_mode_order_ascending_result() throw() {}

  TErrorException e;

  _TGameServerService_set_mode_order_ascending_result__isset __isset;

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_set_mode_order_ascending_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_set_mode_order_ascending_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_set_mode_order_ascending_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_set_mode_order_ascending_presult__isset {
  _TGameServerService_set_mode_order_ascending_presult__isset() : e(false) {}
  bool e;
} _TGameServerService_set_mode_order_ascending_presult__isset;

class TGameServerService_set_mode_order_ascending_presult {
 public:


  virtual ~TGameServerService_set_mode_order_ascending_presult() throw() {}

  TErrorException e;

  _TGameServerService_set_mode_order_ascending_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_add_user_args__isset {
  _TGameServerService_add_user_args__isset() : u(false) {}
  bool u;
} _TGameServerService_add_user_args__isset;

class TGameServerService_add_user_args {
 public:

  TGameServerService_add_user_args() {
  }

  virtual ~TGameServerService_add_user_args() throw() {}

  TUser u;

  _TGameServerService_add_user_args__isset __isset;

  void __set_u(const TUser& val) {
    u = val;
  }

  bool operator == (const TGameServerService_add_user_args & rhs) const
  {
    if (!(u == rhs.u))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_add_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_add_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_add_user_pargs {
 public:


  virtual ~TGameServerService_add_user_pargs() throw() {}

  const TUser* u;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_add_user_result__isset {
  _TGameServerService_add_user_result__isset() : success(false) {}
  bool success;
} _TGameServerService_add_user_result__isset;

class TGameServerService_add_user_result {
 public:

  TGameServerService_add_user_result() : success((TAddUserResultCode::type)0) {
  }

  virtual ~TGameServerService_add_user_result() throw() {}

  TAddUserResultCode::type success;

  _TGameServerService_add_user_result__isset __isset;

  void __set_success(const TAddUserResultCode::type val) {
    success = val;
  }

  bool operator == (const TGameServerService_add_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_add_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_add_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_add_user_presult__isset {
  _TGameServerService_add_user_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_add_user_presult__isset;

class TGameServerService_add_user_presult {
 public:


  virtual ~TGameServerService_add_user_presult() throw() {}

  TAddUserResultCode::type* success;

  _TGameServerService_add_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_user_by_username_args__isset {
  _TGameServerService_get_user_by_username_args__isset() : username(false) {}
  bool username;
} _TGameServerService_get_user_by_username_args__isset;

class TGameServerService_get_user_by_username_args {
 public:

  TGameServerService_get_user_by_username_args() : username() {
  }

  virtual ~TGameServerService_get_user_by_username_args() throw() {}

  std::string username;

  _TGameServerService_get_user_by_username_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  bool operator == (const TGameServerService_get_user_by_username_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_user_by_username_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_user_by_username_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_user_by_username_pargs {
 public:


  virtual ~TGameServerService_get_user_by_username_pargs() throw() {}

  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_user_by_username_result__isset {
  _TGameServerService_get_user_by_username_result__isset() : success(false) {}
  bool success;
} _TGameServerService_get_user_by_username_result__isset;

class TGameServerService_get_user_by_username_result {
 public:

  TGameServerService_get_user_by_username_result() {
  }

  virtual ~TGameServerService_get_user_by_username_result() throw() {}

  TGetUserResponse success;

  _TGameServerService_get_user_by_username_result__isset __isset;

  void __set_success(const TGetUserResponse& val) {
    success = val;
  }

  bool operator == (const TGameServerService_get_user_by_username_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_user_by_username_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_user_by_username_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_user_by_username_presult__isset {
  _TGameServerService_get_user_by_username_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_get_user_by_username_presult__isset;

class TGameServerService_get_user_by_username_presult {
 public:


  virtual ~TGameServerService_get_user_by_username_presult() throw() {}

  TGetUserResponse* success;

  _TGameServerService_get_user_by_username_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_get_user_list_args {
 public:

  TGameServerService_get_user_list_args() {
  }

  virtual ~TGameServerService_get_user_list_args() throw() {}


  bool operator == (const TGameServerService_get_user_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_get_user_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_user_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_user_list_pargs {
 public:


  virtual ~TGameServerService_get_user_list_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_user_list_result__isset {
  _TGameServerService_get_user_list_result__isset() : success(false) {}
  bool success;
} _TGameServerService_get_user_list_result__isset;

class TGameServerService_get_user_list_result {
 public:

  TGameServerService_get_user_list_result() {
  }

  virtual ~TGameServerService_get_user_list_result() throw() {}

  std::set<TUser>  success;

  _TGameServerService_get_user_list_result__isset __isset;

  void __set_success(const std::set<TUser> & val) {
    success = val;
  }

  bool operator == (const TGameServerService_get_user_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_user_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_user_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_user_list_presult__isset {
  _TGameServerService_get_user_list_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_get_user_list_presult__isset;

class TGameServerService_get_user_list_presult {
 public:


  virtual ~TGameServerService_get_user_list_presult() throw() {}

  std::set<TUser> * success;

  _TGameServerService_get_user_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_request_logintoken_args {
 public:

  TGameServerService_request_logintoken_args() {
  }

  virtual ~TGameServerService_request_logintoken_args() throw() {}


  bool operator == (const TGameServerService_request_logintoken_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_request_logintoken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_request_logintoken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_request_logintoken_pargs {
 public:


  virtual ~TGameServerService_request_logintoken_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_request_logintoken_result__isset {
  _TGameServerService_request_logintoken_result__isset() : success(false) {}
  bool success;
} _TGameServerService_request_logintoken_result__isset;

class TGameServerService_request_logintoken_result {
 public:

  TGameServerService_request_logintoken_result() : success() {
  }

  virtual ~TGameServerService_request_logintoken_result() throw() {}

  std::string success;

  _TGameServerService_request_logintoken_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TGameServerService_request_logintoken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_request_logintoken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_request_logintoken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_request_logintoken_presult__isset {
  _TGameServerService_request_logintoken_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_request_logintoken_presult__isset;

class TGameServerService_request_logintoken_presult {
 public:


  virtual ~TGameServerService_request_logintoken_presult() throw() {}

  std::string* success;

  _TGameServerService_request_logintoken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_login_user_args__isset {
  _TGameServerService_login_user_args__isset() : username(false), password(false) {}
  bool username;
  bool password;
} _TGameServerService_login_user_args__isset;

class TGameServerService_login_user_args {
 public:

  TGameServerService_login_user_args() : username(), password() {
  }

  virtual ~TGameServerService_login_user_args() throw() {}

  std::string username;
  std::string password;

  _TGameServerService_login_user_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const TGameServerService_login_user_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_login_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_login_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_login_user_pargs {
 public:


  virtual ~TGameServerService_login_user_pargs() throw() {}

  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_login_user_result__isset {
  _TGameServerService_login_user_result__isset() : success(false) {}
  bool success;
} _TGameServerService_login_user_result__isset;

class TGameServerService_login_user_result {
 public:

  TGameServerService_login_user_result() {
  }

  virtual ~TGameServerService_login_user_result() throw() {}

  TLoginResponse success;

  _TGameServerService_login_user_result__isset __isset;

  void __set_success(const TLoginResponse& val) {
    success = val;
  }

  bool operator == (const TGameServerService_login_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_login_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_login_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_login_user_presult__isset {
  _TGameServerService_login_user_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_login_user_presult__isset;

class TGameServerService_login_user_presult {
 public:


  virtual ~TGameServerService_login_user_presult() throw() {}

  TLoginResponse* success;

  _TGameServerService_login_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_request_signintoken_args__isset {
  _TGameServerService_request_signintoken_args__isset() : meta(false) {}
  bool meta;
} _TGameServerService_request_signintoken_args__isset;

class TGameServerService_request_signintoken_args {
 public:

  TGameServerService_request_signintoken_args() : meta() {
  }

  virtual ~TGameServerService_request_signintoken_args() throw() {}

  std::string meta;

  _TGameServerService_request_signintoken_args__isset __isset;

  void __set_meta(const std::string& val) {
    meta = val;
  }

  bool operator == (const TGameServerService_request_signintoken_args & rhs) const
  {
    if (!(meta == rhs.meta))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_request_signintoken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_request_signintoken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_request_signintoken_pargs {
 public:


  virtual ~TGameServerService_request_signintoken_pargs() throw() {}

  const std::string* meta;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_request_signintoken_result__isset {
  _TGameServerService_request_signintoken_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_request_signintoken_result__isset;

class TGameServerService_request_signintoken_result {
 public:

  TGameServerService_request_signintoken_result() {
  }

  virtual ~TGameServerService_request_signintoken_result() throw() {}

  TSigninToken success;
  TErrorException e;

  _TGameServerService_request_signintoken_result__isset __isset;

  void __set_success(const TSigninToken& val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_request_signintoken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_request_signintoken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_request_signintoken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_request_signintoken_presult__isset {
  _TGameServerService_request_signintoken_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_request_signintoken_presult__isset;

class TGameServerService_request_signintoken_presult {
 public:


  virtual ~TGameServerService_request_signintoken_presult() throw() {}

  TSigninToken* success;
  TErrorException e;

  _TGameServerService_request_signintoken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_login_by_token_args__isset {
  _TGameServerService_login_by_token_args__isset() : tokenUser(false), tokenHash(false), meta(false) {}
  bool tokenUser;
  bool tokenHash;
  bool meta;
} _TGameServerService_login_by_token_args__isset;

class TGameServerService_login_by_token_args {
 public:

  TGameServerService_login_by_token_args() : tokenUser(), tokenHash(), meta() {
  }

  virtual ~TGameServerService_login_by_token_args() throw() {}

  std::string tokenUser;
  std::string tokenHash;
  std::string meta;

  _TGameServerService_login_by_token_args__isset __isset;

  void __set_tokenUser(const std::string& val) {
    tokenUser = val;
  }

  void __set_tokenHash(const std::string& val) {
    tokenHash = val;
  }

  void __set_meta(const std::string& val) {
    meta = val;
  }

  bool operator == (const TGameServerService_login_by_token_args & rhs) const
  {
    if (!(tokenUser == rhs.tokenUser))
      return false;
    if (!(tokenHash == rhs.tokenHash))
      return false;
    if (!(meta == rhs.meta))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_login_by_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_login_by_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_login_by_token_pargs {
 public:


  virtual ~TGameServerService_login_by_token_pargs() throw() {}

  const std::string* tokenUser;
  const std::string* tokenHash;
  const std::string* meta;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_login_by_token_result__isset {
  _TGameServerService_login_by_token_result__isset() : success(false) {}
  bool success;
} _TGameServerService_login_by_token_result__isset;

class TGameServerService_login_by_token_result {
 public:

  TGameServerService_login_by_token_result() {
  }

  virtual ~TGameServerService_login_by_token_result() throw() {}

  TAutoLoginResponse success;

  _TGameServerService_login_by_token_result__isset __isset;

  void __set_success(const TAutoLoginResponse& val) {
    success = val;
  }

  bool operator == (const TGameServerService_login_by_token_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_login_by_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_login_by_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_login_by_token_presult__isset {
  _TGameServerService_login_by_token_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_login_by_token_presult__isset;

class TGameServerService_login_by_token_presult {
 public:


  virtual ~TGameServerService_login_by_token_presult() throw() {}

  TAutoLoginResponse* success;

  _TGameServerService_login_by_token_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_check_userdata_args__isset {
  _TGameServerService_check_userdata_args__isset() : username(false), email(false) {}
  bool username;
  bool email;
} _TGameServerService_check_userdata_args__isset;

class TGameServerService_check_userdata_args {
 public:

  TGameServerService_check_userdata_args() : username(), email() {
  }

  virtual ~TGameServerService_check_userdata_args() throw() {}

  std::string username;
  std::string email;

  _TGameServerService_check_userdata_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  bool operator == (const TGameServerService_check_userdata_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_check_userdata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_check_userdata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_check_userdata_pargs {
 public:


  virtual ~TGameServerService_check_userdata_pargs() throw() {}

  const std::string* username;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_check_userdata_result__isset {
  _TGameServerService_check_userdata_result__isset() : success(false) {}
  bool success;
} _TGameServerService_check_userdata_result__isset;

class TGameServerService_check_userdata_result {
 public:

  TGameServerService_check_userdata_result() : success((TUserDataResponse::type)0) {
  }

  virtual ~TGameServerService_check_userdata_result() throw() {}

  TUserDataResponse::type success;

  _TGameServerService_check_userdata_result__isset __isset;

  void __set_success(const TUserDataResponse::type val) {
    success = val;
  }

  bool operator == (const TGameServerService_check_userdata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_check_userdata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_check_userdata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_check_userdata_presult__isset {
  _TGameServerService_check_userdata_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_check_userdata_presult__isset;

class TGameServerService_check_userdata_presult {
 public:


  virtual ~TGameServerService_check_userdata_presult() throw() {}

  TUserDataResponse::type* success;

  _TGameServerService_check_userdata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_get_login_user_args {
 public:

  TGameServerService_get_login_user_args() {
  }

  virtual ~TGameServerService_get_login_user_args() throw() {}


  bool operator == (const TGameServerService_get_login_user_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_get_login_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_login_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_login_user_pargs {
 public:


  virtual ~TGameServerService_get_login_user_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_login_user_result__isset {
  _TGameServerService_get_login_user_result__isset() : success(false) {}
  bool success;
} _TGameServerService_get_login_user_result__isset;

class TGameServerService_get_login_user_result {
 public:

  TGameServerService_get_login_user_result() {
  }

  virtual ~TGameServerService_get_login_user_result() throw() {}

  TGetUserResponse success;

  _TGameServerService_get_login_user_result__isset __isset;

  void __set_success(const TGetUserResponse& val) {
    success = val;
  }

  bool operator == (const TGameServerService_get_login_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_login_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_login_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_login_user_presult__isset {
  _TGameServerService_get_login_user_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_get_login_user_presult__isset;

class TGameServerService_get_login_user_presult {
 public:


  virtual ~TGameServerService_get_login_user_presult() throw() {}

  TGetUserResponse* success;

  _TGameServerService_get_login_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_check_session_args {
 public:

  TGameServerService_check_session_args() {
  }

  virtual ~TGameServerService_check_session_args() throw() {}


  bool operator == (const TGameServerService_check_session_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_check_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_check_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_check_session_pargs {
 public:


  virtual ~TGameServerService_check_session_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_check_session_result__isset {
  _TGameServerService_check_session_result__isset() : success(false) {}
  bool success;
} _TGameServerService_check_session_result__isset;

class TGameServerService_check_session_result {
 public:

  TGameServerService_check_session_result() {
  }

  virtual ~TGameServerService_check_session_result() throw() {}

  TSessionCheck success;

  _TGameServerService_check_session_result__isset __isset;

  void __set_success(const TSessionCheck& val) {
    success = val;
  }

  bool operator == (const TGameServerService_check_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_check_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_check_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_check_session_presult__isset {
  _TGameServerService_check_session_presult__isset() : success(false) {}
  bool success;
} _TGameServerService_check_session_presult__isset;

class TGameServerService_check_session_presult {
 public:


  virtual ~TGameServerService_check_session_presult() throw() {}

  TSessionCheck* success;

  _TGameServerService_check_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_add_score_args__isset {
  _TGameServerService_add_score_args__isset() : mode(false), score(false) {}
  bool mode;
  bool score;
} _TGameServerService_add_score_args__isset;

class TGameServerService_add_score_args {
 public:

  TGameServerService_add_score_args() : mode(0), score(0) {
  }

  virtual ~TGameServerService_add_score_args() throw() {}

  int32_t mode;
  double score;

  _TGameServerService_add_score_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_score(const double val) {
    score = val;
  }

  bool operator == (const TGameServerService_add_score_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_add_score_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_add_score_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_add_score_pargs {
 public:


  virtual ~TGameServerService_add_score_pargs() throw() {}

  const int32_t* mode;
  const double* score;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_add_score_result__isset {
  _TGameServerService_add_score_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_add_score_result__isset;

class TGameServerService_add_score_result {
 public:

  TGameServerService_add_score_result() {
  }

  virtual ~TGameServerService_add_score_result() throw() {}

  std::vector<TAddScoreResponse>  success;
  TErrorException e;

  _TGameServerService_add_score_result__isset __isset;

  void __set_success(const std::vector<TAddScoreResponse> & val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_add_score_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_add_score_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_add_score_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_add_score_presult__isset {
  _TGameServerService_add_score_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_add_score_presult__isset;

class TGameServerService_add_score_presult {
 public:


  virtual ~TGameServerService_add_score_presult() throw() {}

  std::vector<TAddScoreResponse> * success;
  TErrorException e;

  _TGameServerService_add_score_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_player_scores_args__isset {
  _TGameServerService_get_player_scores_args__isset() : mode(false), amount(false), offset(false) {}
  bool mode;
  bool amount;
  bool offset;
} _TGameServerService_get_player_scores_args__isset;

class TGameServerService_get_player_scores_args {
 public:

  TGameServerService_get_player_scores_args() : mode(0), amount(0), offset(0) {
  }

  virtual ~TGameServerService_get_player_scores_args() throw() {}

  int32_t mode;
  int32_t amount;
  int32_t offset;

  _TGameServerService_get_player_scores_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_amount(const int32_t val) {
    amount = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const TGameServerService_get_player_scores_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_scores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_scores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_player_scores_pargs {
 public:


  virtual ~TGameServerService_get_player_scores_pargs() throw() {}

  const int32_t* mode;
  const int32_t* amount;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_scores_result__isset {
  _TGameServerService_get_player_scores_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_scores_result__isset;

class TGameServerService_get_player_scores_result {
 public:

  TGameServerService_get_player_scores_result() {
  }

  virtual ~TGameServerService_get_player_scores_result() throw() {}

  std::vector<TScore>  success;
  TErrorException e;

  _TGameServerService_get_player_scores_result__isset __isset;

  void __set_success(const std::vector<TScore> & val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_player_scores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_scores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_scores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_scores_presult__isset {
  _TGameServerService_get_player_scores_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_scores_presult__isset;

class TGameServerService_get_player_scores_presult {
 public:


  virtual ~TGameServerService_get_player_scores_presult() throw() {}

  std::vector<TScore> * success;
  TErrorException e;

  _TGameServerService_get_player_scores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_highscores_args__isset {
  _TGameServerService_get_highscores_args__isset() : mode(false), amount(false), offset(false) {}
  bool mode;
  bool amount;
  bool offset;
} _TGameServerService_get_highscores_args__isset;

class TGameServerService_get_highscores_args {
 public:

  TGameServerService_get_highscores_args() : mode(0), amount(0), offset(0) {
  }

  virtual ~TGameServerService_get_highscores_args() throw() {}

  int32_t mode;
  int32_t amount;
  int32_t offset;

  _TGameServerService_get_highscores_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_amount(const int32_t val) {
    amount = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const TGameServerService_get_highscores_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_highscores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_highscores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_highscores_pargs {
 public:


  virtual ~TGameServerService_get_highscores_pargs() throw() {}

  const int32_t* mode;
  const int32_t* amount;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_highscores_result__isset {
  _TGameServerService_get_highscores_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_highscores_result__isset;

class TGameServerService_get_highscores_result {
 public:

  TGameServerService_get_highscores_result() {
  }

  virtual ~TGameServerService_get_highscores_result() throw() {}

  std::vector<TScore>  success;
  TErrorException e;

  _TGameServerService_get_highscores_result__isset __isset;

  void __set_success(const std::vector<TScore> & val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_highscores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_highscores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_highscores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_highscores_presult__isset {
  _TGameServerService_get_highscores_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_highscores_presult__isset;

class TGameServerService_get_highscores_presult {
 public:


  virtual ~TGameServerService_get_highscores_presult() throw() {}

  std::vector<TScore> * success;
  TErrorException e;

  _TGameServerService_get_highscores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TGameServerService_get_player_highscores_args {
 public:

  TGameServerService_get_player_highscores_args() {
  }

  virtual ~TGameServerService_get_player_highscores_args() throw() {}


  bool operator == (const TGameServerService_get_player_highscores_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGameServerService_get_player_highscores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_highscores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_player_highscores_pargs {
 public:


  virtual ~TGameServerService_get_player_highscores_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_highscores_result__isset {
  _TGameServerService_get_player_highscores_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_highscores_result__isset;

class TGameServerService_get_player_highscores_result {
 public:

  TGameServerService_get_player_highscores_result() {
  }

  virtual ~TGameServerService_get_player_highscores_result() throw() {}

  std::vector<TScore>  success;
  TErrorException e;

  _TGameServerService_get_player_highscores_result__isset __isset;

  void __set_success(const std::vector<TScore> & val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_player_highscores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_highscores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_highscores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_highscores_presult__isset {
  _TGameServerService_get_player_highscores_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_highscores_presult__isset;

class TGameServerService_get_player_highscores_presult {
 public:


  virtual ~TGameServerService_get_player_highscores_presult() throw() {}

  std::vector<TScore> * success;
  TErrorException e;

  _TGameServerService_get_player_highscores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_player_highscore_args__isset {
  _TGameServerService_get_player_highscore_args__isset() : mode(false) {}
  bool mode;
} _TGameServerService_get_player_highscore_args__isset;

class TGameServerService_get_player_highscore_args {
 public:

  TGameServerService_get_player_highscore_args() : mode(0) {
  }

  virtual ~TGameServerService_get_player_highscore_args() throw() {}

  int32_t mode;

  _TGameServerService_get_player_highscore_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  bool operator == (const TGameServerService_get_player_highscore_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_highscore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_highscore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_player_highscore_pargs {
 public:


  virtual ~TGameServerService_get_player_highscore_pargs() throw() {}

  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_highscore_result__isset {
  _TGameServerService_get_player_highscore_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_highscore_result__isset;

class TGameServerService_get_player_highscore_result {
 public:

  TGameServerService_get_player_highscore_result() {
  }

  virtual ~TGameServerService_get_player_highscore_result() throw() {}

  TScore success;
  TErrorException e;

  _TGameServerService_get_player_highscore_result__isset __isset;

  void __set_success(const TScore& val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_player_highscore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_highscore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_highscore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_highscore_presult__isset {
  _TGameServerService_get_player_highscore_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_highscore_presult__isset;

class TGameServerService_get_player_highscore_presult {
 public:


  virtual ~TGameServerService_get_player_highscore_presult() throw() {}

  TScore* success;
  TErrorException e;

  _TGameServerService_get_player_highscore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_player_pos_args__isset {
  _TGameServerService_get_player_pos_args__isset() : mode(false) {}
  bool mode;
} _TGameServerService_get_player_pos_args__isset;

class TGameServerService_get_player_pos_args {
 public:

  TGameServerService_get_player_pos_args() : mode(0) {
  }

  virtual ~TGameServerService_get_player_pos_args() throw() {}

  int32_t mode;

  _TGameServerService_get_player_pos_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  bool operator == (const TGameServerService_get_player_pos_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_pos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_pos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_player_pos_pargs {
 public:


  virtual ~TGameServerService_get_player_pos_pargs() throw() {}

  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_pos_result__isset {
  _TGameServerService_get_player_pos_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_pos_result__isset;

class TGameServerService_get_player_pos_result {
 public:

  TGameServerService_get_player_pos_result() : success(0) {
  }

  virtual ~TGameServerService_get_player_pos_result() throw() {}

  int32_t success;
  TErrorException e;

  _TGameServerService_get_player_pos_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_player_pos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_player_pos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_player_pos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_player_pos_presult__isset {
  _TGameServerService_get_player_pos_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_player_pos_presult__isset;

class TGameServerService_get_player_pos_presult {
 public:


  virtual ~TGameServerService_get_player_pos_presult() throw() {}

  int32_t* success;
  TErrorException e;

  _TGameServerService_get_player_pos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_pos_by_score_args__isset {
  _TGameServerService_get_pos_by_score_args__isset() : mode(false), score(false) {}
  bool mode;
  bool score;
} _TGameServerService_get_pos_by_score_args__isset;

class TGameServerService_get_pos_by_score_args {
 public:

  TGameServerService_get_pos_by_score_args() : mode(0), score(0) {
  }

  virtual ~TGameServerService_get_pos_by_score_args() throw() {}

  int32_t mode;
  double score;

  _TGameServerService_get_pos_by_score_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_score(const double val) {
    score = val;
  }

  bool operator == (const TGameServerService_get_pos_by_score_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_pos_by_score_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_pos_by_score_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_pos_by_score_pargs {
 public:


  virtual ~TGameServerService_get_pos_by_score_pargs() throw() {}

  const int32_t* mode;
  const double* score;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_pos_by_score_result__isset {
  _TGameServerService_get_pos_by_score_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_pos_by_score_result__isset;

class TGameServerService_get_pos_by_score_result {
 public:

  TGameServerService_get_pos_by_score_result() : success(0) {
  }

  virtual ~TGameServerService_get_pos_by_score_result() throw() {}

  int32_t success;
  TErrorException e;

  _TGameServerService_get_pos_by_score_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_pos_by_score_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_pos_by_score_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_pos_by_score_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_pos_by_score_presult__isset {
  _TGameServerService_get_pos_by_score_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_pos_by_score_presult__isset;

class TGameServerService_get_pos_by_score_presult {
 public:


  virtual ~TGameServerService_get_pos_by_score_presult() throw() {}

  int32_t* success;
  TErrorException e;

  _TGameServerService_get_pos_by_score_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TGameServerService_get_before_level_data_args__isset {
  _TGameServerService_get_before_level_data_args__isset() : mode(false), top_amount(false), me_amount(false) {}
  bool mode;
  bool top_amount;
  bool me_amount;
} _TGameServerService_get_before_level_data_args__isset;

class TGameServerService_get_before_level_data_args {
 public:

  TGameServerService_get_before_level_data_args() : mode(0), top_amount(0), me_amount(0) {
  }

  virtual ~TGameServerService_get_before_level_data_args() throw() {}

  int32_t mode;
  int32_t top_amount;
  int32_t me_amount;

  _TGameServerService_get_before_level_data_args__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_top_amount(const int32_t val) {
    top_amount = val;
  }

  void __set_me_amount(const int32_t val) {
    me_amount = val;
  }

  bool operator == (const TGameServerService_get_before_level_data_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(top_amount == rhs.top_amount))
      return false;
    if (!(me_amount == rhs.me_amount))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_before_level_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_before_level_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TGameServerService_get_before_level_data_pargs {
 public:


  virtual ~TGameServerService_get_before_level_data_pargs() throw() {}

  const int32_t* mode;
  const int32_t* top_amount;
  const int32_t* me_amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_before_level_data_result__isset {
  _TGameServerService_get_before_level_data_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_before_level_data_result__isset;

class TGameServerService_get_before_level_data_result {
 public:

  TGameServerService_get_before_level_data_result() {
  }

  virtual ~TGameServerService_get_before_level_data_result() throw() {}

  TBeforeLevelData success;
  TErrorException e;

  _TGameServerService_get_before_level_data_result__isset __isset;

  void __set_success(const TBeforeLevelData& val) {
    success = val;
  }

  void __set_e(const TErrorException& val) {
    e = val;
  }

  bool operator == (const TGameServerService_get_before_level_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TGameServerService_get_before_level_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGameServerService_get_before_level_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TGameServerService_get_before_level_data_presult__isset {
  _TGameServerService_get_before_level_data_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _TGameServerService_get_before_level_data_presult__isset;

class TGameServerService_get_before_level_data_presult {
 public:


  virtual ~TGameServerService_get_before_level_data_presult() throw() {}

  TBeforeLevelData* success;
  TErrorException e;

  _TGameServerService_get_before_level_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TGameServerServiceClient : virtual public TGameServerServiceIf {
 public:
  TGameServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TGameServerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  TSetGameResult::type set_game(const std::string& gameid, const int32_t os, const int32_t version);
  void send_set_game(const std::string& gameid, const int32_t os, const int32_t version);
  TSetGameResult::type recv_set_game();
  void create_game(const std::string& name, const int32_t modeAmount, const bool ascOrdering);
  void send_create_game(const std::string& name, const int32_t modeAmount, const bool ascOrdering);
  void recv_create_game();
  void create_modes(const std::string& gameid, const int32_t amount, const bool ascOrdering);
  void send_create_modes(const std::string& gameid, const int32_t amount, const bool ascOrdering);
  void recv_create_modes();
  void get_all_games(std::set<TGame> & _return);
  void send_get_all_games();
  void recv_get_all_games(std::set<TGame> & _return);
  void get_game(TGame& _return, const std::string& name);
  void send_get_game(const std::string& name);
  void recv_get_game(TGame& _return);
  void set_mode_order_ascending(const int32_t mode, const bool asc);
  void send_set_mode_order_ascending(const int32_t mode, const bool asc);
  void recv_set_mode_order_ascending();
  TAddUserResultCode::type add_user(const TUser& u);
  void send_add_user(const TUser& u);
  TAddUserResultCode::type recv_add_user();
  void get_user_by_username(TGetUserResponse& _return, const std::string& username);
  void send_get_user_by_username(const std::string& username);
  void recv_get_user_by_username(TGetUserResponse& _return);
  void get_user_list(std::set<TUser> & _return);
  void send_get_user_list();
  void recv_get_user_list(std::set<TUser> & _return);
  void request_logintoken(std::string& _return);
  void send_request_logintoken();
  void recv_request_logintoken(std::string& _return);
  void login_user(TLoginResponse& _return, const std::string& username, const std::string& password);
  void send_login_user(const std::string& username, const std::string& password);
  void recv_login_user(TLoginResponse& _return);
  void request_signintoken(TSigninToken& _return, const std::string& meta);
  void send_request_signintoken(const std::string& meta);
  void recv_request_signintoken(TSigninToken& _return);
  void login_by_token(TAutoLoginResponse& _return, const std::string& tokenUser, const std::string& tokenHash, const std::string& meta);
  void send_login_by_token(const std::string& tokenUser, const std::string& tokenHash, const std::string& meta);
  void recv_login_by_token(TAutoLoginResponse& _return);
  TUserDataResponse::type check_userdata(const std::string& username, const std::string& email);
  void send_check_userdata(const std::string& username, const std::string& email);
  TUserDataResponse::type recv_check_userdata();
  void get_login_user(TGetUserResponse& _return);
  void send_get_login_user();
  void recv_get_login_user(TGetUserResponse& _return);
  void check_session(TSessionCheck& _return);
  void send_check_session();
  void recv_check_session(TSessionCheck& _return);
  void add_score(std::vector<TAddScoreResponse> & _return, const int32_t mode, const double score);
  void send_add_score(const int32_t mode, const double score);
  void recv_add_score(std::vector<TAddScoreResponse> & _return);
  void get_player_scores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset);
  void send_get_player_scores(const int32_t mode, const int32_t amount, const int32_t offset);
  void recv_get_player_scores(std::vector<TScore> & _return);
  void get_highscores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset);
  void send_get_highscores(const int32_t mode, const int32_t amount, const int32_t offset);
  void recv_get_highscores(std::vector<TScore> & _return);
  void get_player_highscores(std::vector<TScore> & _return);
  void send_get_player_highscores();
  void recv_get_player_highscores(std::vector<TScore> & _return);
  void get_player_highscore(TScore& _return, const int32_t mode);
  void send_get_player_highscore(const int32_t mode);
  void recv_get_player_highscore(TScore& _return);
  int32_t get_player_pos(const int32_t mode);
  void send_get_player_pos(const int32_t mode);
  int32_t recv_get_player_pos();
  int32_t get_pos_by_score(const int32_t mode, const double score);
  void send_get_pos_by_score(const int32_t mode, const double score);
  int32_t recv_get_pos_by_score();
  void get_before_level_data(TBeforeLevelData& _return, const int32_t mode, const int32_t top_amount, const int32_t me_amount);
  void send_get_before_level_data(const int32_t mode, const int32_t top_amount, const int32_t me_amount);
  void recv_get_before_level_data(TBeforeLevelData& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TGameServerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TGameServerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TGameServerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_game(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_game(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_modes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_games(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_game(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_mode_order_ascending(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user_by_username(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request_logintoken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_login_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request_signintoken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_login_by_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_userdata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_login_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_score(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_player_scores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_highscores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_player_highscores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_player_highscore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_player_pos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_pos_by_score(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_before_level_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TGameServerServiceProcessor(boost::shared_ptr<TGameServerServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &TGameServerServiceProcessor::process_ping;
    processMap_["set_game"] = &TGameServerServiceProcessor::process_set_game;
    processMap_["create_game"] = &TGameServerServiceProcessor::process_create_game;
    processMap_["create_modes"] = &TGameServerServiceProcessor::process_create_modes;
    processMap_["get_all_games"] = &TGameServerServiceProcessor::process_get_all_games;
    processMap_["get_game"] = &TGameServerServiceProcessor::process_get_game;
    processMap_["set_mode_order_ascending"] = &TGameServerServiceProcessor::process_set_mode_order_ascending;
    processMap_["add_user"] = &TGameServerServiceProcessor::process_add_user;
    processMap_["get_user_by_username"] = &TGameServerServiceProcessor::process_get_user_by_username;
    processMap_["get_user_list"] = &TGameServerServiceProcessor::process_get_user_list;
    processMap_["request_logintoken"] = &TGameServerServiceProcessor::process_request_logintoken;
    processMap_["login_user"] = &TGameServerServiceProcessor::process_login_user;
    processMap_["request_signintoken"] = &TGameServerServiceProcessor::process_request_signintoken;
    processMap_["login_by_token"] = &TGameServerServiceProcessor::process_login_by_token;
    processMap_["check_userdata"] = &TGameServerServiceProcessor::process_check_userdata;
    processMap_["get_login_user"] = &TGameServerServiceProcessor::process_get_login_user;
    processMap_["check_session"] = &TGameServerServiceProcessor::process_check_session;
    processMap_["add_score"] = &TGameServerServiceProcessor::process_add_score;
    processMap_["get_player_scores"] = &TGameServerServiceProcessor::process_get_player_scores;
    processMap_["get_highscores"] = &TGameServerServiceProcessor::process_get_highscores;
    processMap_["get_player_highscores"] = &TGameServerServiceProcessor::process_get_player_highscores;
    processMap_["get_player_highscore"] = &TGameServerServiceProcessor::process_get_player_highscore;
    processMap_["get_player_pos"] = &TGameServerServiceProcessor::process_get_player_pos;
    processMap_["get_pos_by_score"] = &TGameServerServiceProcessor::process_get_pos_by_score;
    processMap_["get_before_level_data"] = &TGameServerServiceProcessor::process_get_before_level_data;
  }

  virtual ~TGameServerServiceProcessor() {}
};

class TGameServerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TGameServerServiceProcessorFactory(const ::boost::shared_ptr< TGameServerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TGameServerServiceIfFactory > handlerFactory_;
};

class TGameServerServiceMultiface : virtual public TGameServerServiceIf {
 public:
  TGameServerServiceMultiface(std::vector<boost::shared_ptr<TGameServerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TGameServerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TGameServerServiceIf> > ifaces_;
  TGameServerServiceMultiface() {}
  void add(boost::shared_ptr<TGameServerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  TSetGameResult::type set_game(const std::string& gameid, const int32_t os, const int32_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_game(gameid, os, version);
    }
    return ifaces_[i]->set_game(gameid, os, version);
  }

  void create_game(const std::string& name, const int32_t modeAmount, const bool ascOrdering) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_game(name, modeAmount, ascOrdering);
    }
    ifaces_[i]->create_game(name, modeAmount, ascOrdering);
  }

  void create_modes(const std::string& gameid, const int32_t amount, const bool ascOrdering) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_modes(gameid, amount, ascOrdering);
    }
    ifaces_[i]->create_modes(gameid, amount, ascOrdering);
  }

  void get_all_games(std::set<TGame> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_games(_return);
    }
    ifaces_[i]->get_all_games(_return);
    return;
  }

  void get_game(TGame& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_game(_return, name);
    }
    ifaces_[i]->get_game(_return, name);
    return;
  }

  void set_mode_order_ascending(const int32_t mode, const bool asc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_mode_order_ascending(mode, asc);
    }
    ifaces_[i]->set_mode_order_ascending(mode, asc);
  }

  TAddUserResultCode::type add_user(const TUser& u) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_user(u);
    }
    return ifaces_[i]->add_user(u);
  }

  void get_user_by_username(TGetUserResponse& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user_by_username(_return, username);
    }
    ifaces_[i]->get_user_by_username(_return, username);
    return;
  }

  void get_user_list(std::set<TUser> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user_list(_return);
    }
    ifaces_[i]->get_user_list(_return);
    return;
  }

  void request_logintoken(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request_logintoken(_return);
    }
    ifaces_[i]->request_logintoken(_return);
    return;
  }

  void login_user(TLoginResponse& _return, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login_user(_return, username, password);
    }
    ifaces_[i]->login_user(_return, username, password);
    return;
  }

  void request_signintoken(TSigninToken& _return, const std::string& meta) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request_signintoken(_return, meta);
    }
    ifaces_[i]->request_signintoken(_return, meta);
    return;
  }

  void login_by_token(TAutoLoginResponse& _return, const std::string& tokenUser, const std::string& tokenHash, const std::string& meta) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login_by_token(_return, tokenUser, tokenHash, meta);
    }
    ifaces_[i]->login_by_token(_return, tokenUser, tokenHash, meta);
    return;
  }

  TUserDataResponse::type check_userdata(const std::string& username, const std::string& email) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_userdata(username, email);
    }
    return ifaces_[i]->check_userdata(username, email);
  }

  void get_login_user(TGetUserResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_login_user(_return);
    }
    ifaces_[i]->get_login_user(_return);
    return;
  }

  void check_session(TSessionCheck& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_session(_return);
    }
    ifaces_[i]->check_session(_return);
    return;
  }

  void add_score(std::vector<TAddScoreResponse> & _return, const int32_t mode, const double score) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_score(_return, mode, score);
    }
    ifaces_[i]->add_score(_return, mode, score);
    return;
  }

  void get_player_scores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_player_scores(_return, mode, amount, offset);
    }
    ifaces_[i]->get_player_scores(_return, mode, amount, offset);
    return;
  }

  void get_highscores(std::vector<TScore> & _return, const int32_t mode, const int32_t amount, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_highscores(_return, mode, amount, offset);
    }
    ifaces_[i]->get_highscores(_return, mode, amount, offset);
    return;
  }

  void get_player_highscores(std::vector<TScore> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_player_highscores(_return);
    }
    ifaces_[i]->get_player_highscores(_return);
    return;
  }

  void get_player_highscore(TScore& _return, const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_player_highscore(_return, mode);
    }
    ifaces_[i]->get_player_highscore(_return, mode);
    return;
  }

  int32_t get_player_pos(const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_player_pos(mode);
    }
    return ifaces_[i]->get_player_pos(mode);
  }

  int32_t get_pos_by_score(const int32_t mode, const double score) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pos_by_score(mode, score);
    }
    return ifaces_[i]->get_pos_by_score(mode, score);
  }

  void get_before_level_data(TBeforeLevelData& _return, const int32_t mode, const int32_t top_amount, const int32_t me_amount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_before_level_data(_return, mode, top_amount, me_amount);
    }
    ifaces_[i]->get_before_level_data(_return, mode, top_amount, me_amount);
    return;
  }

};

} // namespace

#endif
