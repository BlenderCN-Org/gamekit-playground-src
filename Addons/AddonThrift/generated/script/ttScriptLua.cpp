/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include <lua.h>
#include <lauxlib.h>
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AsyncCaller swig_types[0]
#define SWIGTYPE_p_AsyncThriftService swig_types[1]
#define SWIGTYPE_p_Thrift swig_types[2]
#define SWIGTYPE_p_ThriftService swig_types[3]
#define SWIGTYPE_p_apache__thrift__protocol__TProtocol swig_types[4]
#define SWIGTYPE_p_gkPreparedLuaEvent swig_types[5]
#define SWIGTYPE_p_gs__ErrorCode swig_types[6]
#define SWIGTYPE_p_gs__TAddScoreResponse swig_types[7]
#define SWIGTYPE_p_gs__TAddScoreResultCode swig_types[8]
#define SWIGTYPE_p_gs__TAddUserResultCode swig_types[9]
#define SWIGTYPE_p_gs__TAutoLoginResponse swig_types[10]
#define SWIGTYPE_p_gs__TAutoLoginResultCode swig_types[11]
#define SWIGTYPE_p_gs__TBeforeLevelData swig_types[12]
#define SWIGTYPE_p_gs__TErrorException swig_types[13]
#define SWIGTYPE_p_gs__TGame swig_types[14]
#define SWIGTYPE_p_gs__TGetUserResponse swig_types[15]
#define SWIGTYPE_p_gs__TGetUserResultCode swig_types[16]
#define SWIGTYPE_p_gs__TLoginResponse swig_types[17]
#define SWIGTYPE_p_gs__TLoginResultCode swig_types[18]
#define SWIGTYPE_p_gs__TMode swig_types[19]
#define SWIGTYPE_p_gs__TRegInfo swig_types[20]
#define SWIGTYPE_p_gs__TScore swig_types[21]
#define SWIGTYPE_p_gs__TSessionCheck swig_types[22]
#define SWIGTYPE_p_gs__TSetGameResult swig_types[23]
#define SWIGTYPE_p_gs__TSigninToken swig_types[24]
#define SWIGTYPE_p_gs__TUser swig_types[25]
#define SWIGTYPE_p_gs__TUserDataResponse swig_types[26]
#define SWIGTYPE_p_gs___TAddScoreResponse__isset swig_types[27]
#define SWIGTYPE_p_gs___TAutoLoginResponse__isset swig_types[28]
#define SWIGTYPE_p_gs___TBeforeLevelData__isset swig_types[29]
#define SWIGTYPE_p_gs___TErrorException__isset swig_types[30]
#define SWIGTYPE_p_gs___TGame__isset swig_types[31]
#define SWIGTYPE_p_gs___TGetUserResponse__isset swig_types[32]
#define SWIGTYPE_p_gs___TLoginResponse__isset swig_types[33]
#define SWIGTYPE_p_gs___TMode__isset swig_types[34]
#define SWIGTYPE_p_gs___TRegInfo__isset swig_types[35]
#define SWIGTYPE_p_gs___TScore__isset swig_types[36]
#define SWIGTYPE_p_gs___TSessionCheck__isset swig_types[37]
#define SWIGTYPE_p_gs___TSigninToken__isset swig_types[38]
#define SWIGTYPE_p_gs___TUser__isset swig_types[39]
#define SWIGTYPE_p_int64_t swig_types[40]
#define SWIGTYPE_p_std__mapT_int_char_const_p_t swig_types[41]
#define SWIGTYPE_p_std__setT_gs__TGame_t swig_types[42]
#define SWIGTYPE_p_std__setT_gs__TUser_t swig_types[43]
#define SWIGTYPE_p_std__string swig_types[44]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[45]
#define SWIGTYPE_p_std__vectorT_gs__TAddScoreResponse_t swig_types[46]
#define SWIGTYPE_p_std__vectorT_gs__TScore_t swig_types[47]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[48]
#define SWIGTYPE_p_uint32_t swig_types[49]
#define SWIGTYPE_p_uint8_t swig_types[50]
static swig_type_info *swig_types[52];
static swig_module_info swig_module = {swig_types, 51, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ta"
#define SWIG_init      luaopen_ta
#define SWIG_init_user luaopen_ta_user

#define SWIG_LUACODE   luaopen_ta_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#define GS_TYPEOF(a, b)   ((a) && typeid(*a) == typeid(b))
#define GS_TYPE_RET(GK, GS, T) if (GS_TYPEOF(GK, gk##T)) { SWIG_NewPointerObj(L, GS, SWIGTYPE_p_##gs##T, 1); return 1; }

// ------------------------------------------------------------------------------
// Convert & store gk<Class> objects as gs<Class> with consistent userdata values
// ------------------------------------------------------------------------------
template <class GKTYPE, class GSTYPE>
static int gsLuaStoreAndReturnObject(lua_State *L, GKTYPE* obj, const char* className, swig_type_info* swigTypeInfo)
{
    // Early exit on nil
    if (!obj)
    {
        lua_pushnil(L);
        return 1;
    }
    
    // Create the storage name
    char tableName[256];
    sprintf(tableName, ".gsCache{%s}", className);
    
    // Try to get the table in which the objects would be stored
    lua_pushstring(L, tableName);
    lua_rawget(L,     LUA_REGISTRYINDEX);
    
    // If that did not work - create it and put it on top
    if (!lua_istable(L, -1))
    {
        lua_pushstring(L, tableName);
        lua_newtable(L);
        
        lua_createtable(L,  0, 1);
        lua_pushstring(L,   "v");
        lua_setfield(L,     -2, "__mode");
        lua_setmetatable(L, -2);
        
        lua_rawset(L, LUA_REGISTRYINDEX);
        
        // Try to get the table
        lua_pushstring(L, tableName);
        lua_rawget(L,     LUA_REGISTRYINDEX);
    }
    
    // We now have a table to get the user data from - so check if it's there
    lua_pushlightuserdata(L, obj);
    lua_gettable(L, -2);
    
    if (lua_isnil(L, -1))
    {
        // We no longer need the nil value
        lua_pop(L, 1);
        
        // Push the pointer value onto the stack (as the key)
        lua_pushlightuserdata(L, obj);
        
        // Create and push the value
        GSTYPE* wrappedObject = new GSTYPE(obj);
        SWIG_NewPointerObj(L, wrappedObject, swigTypeInfo, 1);
        
        // Store it in the table
        lua_settable(L, -3);
        
        // Reget the value from the table
        lua_pushlightuserdata(L, obj);
        lua_gettable(L, -2);
    }
    return 1;
}
#define GS_LUA_OBJECT_WRAP_STORE_RAW(OBJ, T, WT) gsLuaStoreAndReturnObject<T, WT>(L, (T*)OBJ, #WT, SWIGTYPE_p_##WT)
#define GS_LUA_OBJECT_WRAP_STORE(OBJ, T, WT) gsLuaStoreAndReturnObject<gk##T, gs##WT>(L, (gk##T*)OBJ, #WT, SWIGTYPE_p_##gs##WT)
#define GS_LUA_OBJECT_STORE(OBJ, T) GS_LUA_OBJECT_WRAP_STORE(OBJ, T, T)
#define GS_LUA_OBJECT_RET(OBJ, T) if (GS_TYPEOF(OBJ, gk##T)) { return GS_LUA_OBJECT_STORE(OBJ, T); }
#define GS_LUA_OBJECT_WRAP_RET(OBJ, T, WT) if (GS_TYPEOF(OBJ, gk##T)) { return GS_LUA_OBJECT_WRAP_STORE(OBJ, T, WT); }



#include "script/ttScript.h"

SWIGINTERN int std_vector_Sl_int_Sg____getitem__(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN double std_vector_Sl_double_Sg____getitem__(std::vector< double > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN gs::TScore std_vector_Sl_gs_TScore_Sg____getitem__(std::vector< gs::TScore > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_gs_TScore_Sg____setitem__(std::vector< gs::TScore > *self,unsigned int idx,gs::TScore val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_ThriftService_ping(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  
  SWIG_check_num_args("ThriftService::ping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::ping",1,"ThriftService *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_ping",1,SWIGTYPE_p_ThriftService);
  }
  
  (arg1)->ping();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_set_game(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::string temp2 ;
  gs::TSetGameResult::type result;
  
  SWIG_check_num_args("ThriftService::set_game",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::set_game",1,"ThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ThriftService::set_game",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::set_game",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ThriftService::set_game",4,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_set_game",1,SWIGTYPE_p_ThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  result = (gs::TSetGameResult::type)(arg1)->set_game((std::string const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_create_game(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ThriftService::create_game",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::create_game",1,"ThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ThriftService::create_game",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::create_game",3,"int const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ThriftService::create_game",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_create_game",1,SWIGTYPE_p_ThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->create_game((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_create_modes(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ThriftService::create_modes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::create_modes",1,"ThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ThriftService::create_modes",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::create_modes",3,"int const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ThriftService::create_modes",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_create_modes",1,SWIGTYPE_p_ThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->create_modes((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_all_games(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::set< gs::TGame > *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::get_all_games",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_all_games",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_all_games",2,"std::set< gs::TGame > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_all_games",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__setT_gs__TGame_t,0))){
    SWIG_fail_ptr("ThriftService_get_all_games",2,SWIGTYPE_p_std__setT_gs__TGame_t);
  }
  
  (arg1)->get_all_games(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_add_user(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TUser *arg2 = 0 ;
  gs::TAddUserResultCode::type result;
  
  SWIG_check_num_args("ThriftService::add_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::add_user",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::add_user",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_add_user",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("ThriftService_add_user",2,SWIGTYPE_p_gs__TUser);
  }
  
  result = (gs::TAddUserResultCode::type)(arg1)->add_user((gs::TUser const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_user_by_username(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TGetUserResponse *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("ThriftService::get_user_by_username",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_user_by_username",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_user_by_username",2,"gs::TGetUserResponse &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ThriftService::get_user_by_username",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_user_by_username",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("ThriftService_get_user_by_username",2,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->get_user_by_username(*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_user_list(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::set< gs::TUser > *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::get_user_list",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_user_list",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_user_list",2,"std::set< gs::TUser > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_user_list",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__setT_gs__TUser_t,0))){
    SWIG_fail_ptr("ThriftService_get_user_list",2,SWIGTYPE_p_std__setT_gs__TUser_t);
  }
  
  (arg1)->get_user_list(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_request_logintoken(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::request_logintoken",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::request_logintoken",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::request_logintoken",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_request_logintoken",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ThriftService_request_logintoken",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->request_logintoken(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_login_user(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TLoginResponse *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp3 ;
  std::string temp4 ;
  
  SWIG_check_num_args("ThriftService::login_user",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::login_user",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::login_user",2,"gs::TLoginResponse &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ThriftService::login_user",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ThriftService::login_user",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_login_user",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("ThriftService_login_user",2,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (arg1)->login_user(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_check_userdata(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  gs::TUserDataResponse::type result;
  
  SWIG_check_num_args("ThriftService::check_userdata",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::check_userdata",1,"ThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ThriftService::check_userdata",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ThriftService::check_userdata",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_check_userdata",1,SWIGTYPE_p_ThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (gs::TUserDataResponse::type)(arg1)->check_userdata((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_login_user(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TGetUserResponse *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::get_login_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_login_user",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_login_user",2,"gs::TGetUserResponse &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_login_user",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("ThriftService_get_login_user",2,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  (arg1)->get_login_user(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_check_session(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TSessionCheck *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::check_session",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::check_session",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::check_session",2,"gs::TSessionCheck &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_check_session",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("ThriftService_check_session",2,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  (arg1)->check_session(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_add_score(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::vector< gs::TAddScoreResponse > *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("ThriftService::add_score",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::add_score",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::add_score",2,"std::vector< gs::TAddScoreResponse > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::add_score",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ThriftService::add_score",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_add_score",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TAddScoreResponse_t,0))){
    SWIG_fail_ptr("ThriftService_add_score",2,SWIGTYPE_p_std__vectorT_gs__TAddScoreResponse_t);
  }
  
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (double const)lua_tonumber(L, 4);
  (arg1)->add_score(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_player_scores(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::vector< gs::TScore > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ThriftService::get_player_scores",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_player_scores",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_player_scores",2,"std::vector< gs::TScore > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::get_player_scores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ThriftService::get_player_scores",4,"int const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ThriftService::get_player_scores",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_player_scores",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("ThriftService_get_player_scores",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->get_player_scores(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_highscores(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::vector< gs::TScore > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ThriftService::get_highscores",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_highscores",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_highscores",2,"std::vector< gs::TScore > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::get_highscores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ThriftService::get_highscores",4,"int const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ThriftService::get_highscores",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_highscores",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("ThriftService_get_highscores",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->get_highscores(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_player_pos(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("ThriftService::get_player_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_player_pos",1,"ThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThriftService::get_player_pos",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_player_pos",1,SWIGTYPE_p_ThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (int)(arg1)->get_player_pos(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_pos_by_score(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("ThriftService::get_pos_by_score",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_pos_by_score",1,"ThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThriftService::get_pos_by_score",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::get_pos_by_score",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_pos_by_score",1,SWIGTYPE_p_ThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (int)(arg1)->get_pos_by_score(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_request_signintoken(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TSigninToken *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("ThriftService::request_signintoken",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::request_signintoken",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::request_signintoken",2,"gs::TSigninToken &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ThriftService::request_signintoken",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_request_signintoken",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("ThriftService_request_signintoken",2,SWIGTYPE_p_gs__TSigninToken);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (arg1)->request_signintoken(*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_login_by_token(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TAutoLoginResponse *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  
  SWIG_check_num_args("ThriftService::login_by_token",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::login_by_token",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::login_by_token",2,"gs::TAutoLoginResponse &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ThriftService::login_by_token",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ThriftService::login_by_token",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("ThriftService::login_by_token",5,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_login_by_token",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("ThriftService_login_by_token",2,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_strlen(L,5)); arg5=&temp5;
  (arg1)->login_by_token(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_before_level_data(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TBeforeLevelData *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("ThriftService::get_before_level_data",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_before_level_data",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_before_level_data",2,"gs::TBeforeLevelData &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::get_before_level_data",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ThriftService::get_before_level_data",4,"int const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ThriftService::get_before_level_data",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_before_level_data",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("ThriftService_get_before_level_data",2,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->get_before_level_data(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_player_highscores(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  std::vector< gs::TScore > *arg2 = 0 ;
  
  SWIG_check_num_args("ThriftService::get_player_highscores",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_player_highscores",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_player_highscores",2,"std::vector< gs::TScore > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_player_highscores",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("ThriftService_get_player_highscores",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  (arg1)->get_player_highscores(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThriftService_get_player_highscore(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *arg1 = (ThriftService *) 0 ;
  gs::TScore *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ThriftService::get_player_highscore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThriftService::get_player_highscore",1,"ThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ThriftService::get_player_highscore",2,"gs::TScore &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThriftService::get_player_highscore",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("ThriftService_get_player_highscore",1,SWIGTYPE_p_ThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("ThriftService_get_player_highscore",2,SWIGTYPE_p_gs__TScore);
  }
  
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->get_player_highscore(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ThriftService(void *obj) {
ThriftService *arg1 = (ThriftService *) obj;
delete arg1;
}
static swig_lua_method swig_ThriftService_methods[] = {
    {"ping", _wrap_ThriftService_ping}, 
    {"set_game", _wrap_ThriftService_set_game}, 
    {"create_game", _wrap_ThriftService_create_game}, 
    {"create_modes", _wrap_ThriftService_create_modes}, 
    {"get_all_games", _wrap_ThriftService_get_all_games}, 
    {"add_user", _wrap_ThriftService_add_user}, 
    {"get_user_by_username", _wrap_ThriftService_get_user_by_username}, 
    {"get_user_list", _wrap_ThriftService_get_user_list}, 
    {"request_logintoken", _wrap_ThriftService_request_logintoken}, 
    {"login_user", _wrap_ThriftService_login_user}, 
    {"check_userdata", _wrap_ThriftService_check_userdata}, 
    {"get_login_user", _wrap_ThriftService_get_login_user}, 
    {"check_session", _wrap_ThriftService_check_session}, 
    {"add_score", _wrap_ThriftService_add_score}, 
    {"get_player_scores", _wrap_ThriftService_get_player_scores}, 
    {"get_highscores", _wrap_ThriftService_get_highscores}, 
    {"get_player_pos", _wrap_ThriftService_get_player_pos}, 
    {"get_pos_by_score", _wrap_ThriftService_get_pos_by_score}, 
    {"request_signintoken", _wrap_ThriftService_request_signintoken}, 
    {"login_by_token", _wrap_ThriftService_login_by_token}, 
    {"get_before_level_data", _wrap_ThriftService_get_before_level_data}, 
    {"get_player_highscores", _wrap_ThriftService_get_player_highscores}, 
    {"get_player_highscore", _wrap_ThriftService_get_player_highscore}, 
    {0,0}
};
static swig_lua_attribute swig_ThriftService_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ThriftService_bases[] = {0};
static const char *swig_ThriftService_base_names[] = {0};
static swig_lua_class _wrap_class_ThriftService = { "ThriftService", &SWIGTYPE_p_ThriftService,0, swig_delete_ThriftService, swig_ThriftService_methods, swig_ThriftService_attributes, swig_ThriftService_bases, swig_ThriftService_base_names };

static int _wrap_new_AsyncCaller(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  ThriftService *arg2 = (ThriftService *) 0 ;
  AsyncCaller::FuncCall arg3 ;
  gsSelf arg4 ;
  gsFunction arg5 ;
  AsyncCaller *result = 0 ;
  
  SWIG_check_num_args("AsyncCaller::AsyncCaller",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::AsyncCaller",1,"Thrift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::AsyncCaller",2,"ThriftService *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncCaller::AsyncCaller",3,"AsyncCaller::FuncCall");
  if(!lua_istable(L,4)) SWIG_fail_arg("AsyncCaller::AsyncCaller",4,"gsSelf");
  if(!lua_isfunction(L,5)) SWIG_fail_arg("AsyncCaller::AsyncCaller",5,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("new_AsyncCaller",1,SWIGTYPE_p_Thrift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("new_AsyncCaller",2,SWIGTYPE_p_ThriftService);
  }
  
  arg3 = (AsyncCaller::FuncCall)(int)lua_tonumber(L, 3);
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  result = (AsyncCaller *)new AsyncCaller(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AsyncCaller,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_dispose(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::dispose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::dispose",1,"AsyncCaller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_dispose",1,SWIGTYPE_p_AsyncCaller);
  }
  
  (arg1)->dispose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArgs",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArgs",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArgs",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AsyncCaller::setArgs",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AsyncCaller::setArgs",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("AsyncCaller::setArgs",5,"void *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("AsyncCaller::setArgs",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArgs",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArgs");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"AsyncCaller_setArgs");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"AsyncCaller_setArgs");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"AsyncCaller_setArgs");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"AsyncCaller_setArgs");
  (arg1)->setArgs(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArgs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArgs",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArgs",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AsyncCaller::setArgs",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AsyncCaller::setArgs",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("AsyncCaller::setArgs",5,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArgs",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArgs");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"AsyncCaller_setArgs");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"AsyncCaller_setArgs");
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"AsyncCaller_setArgs");
  (arg1)->setArgs(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArgs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArgs",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArgs",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AsyncCaller::setArgs",3,"void *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AsyncCaller::setArgs",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArgs",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArgs");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"AsyncCaller_setArgs");
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"AsyncCaller_setArgs");
  (arg1)->setArgs(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArgs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArgs",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArgs",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AsyncCaller::setArgs",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArgs",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArgs");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"AsyncCaller_setArgs");
  (arg1)->setArgs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArgs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArgs",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArgs",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArgs",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArgs");
  (arg1)->setArgs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArgs(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncCaller, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AsyncCaller_setArgs__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncCaller, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AsyncCaller_setArgs__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncCaller, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AsyncCaller_setArgs__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncCaller, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_AsyncCaller_setArgs__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncCaller, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_AsyncCaller_setArgs__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AsyncCaller_setArgs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AsyncCaller::setArgs(void *,void *,void *,void *,void *)\n"
    "    AsyncCaller::setArgs(void *,void *,void *,void *)\n"
    "    AsyncCaller::setArgs(void *,void *,void *)\n"
    "    AsyncCaller::setArgs(void *,void *)\n"
    "    AsyncCaller::setArgs(void *)\n");
  lua_error(L);return 0;
}


static int _wrap_AsyncCaller_setArg1(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArg1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArg1",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArg1",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArg1",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArg1");
  (arg1)->setArg1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArg2(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArg2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArg2",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArg2",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArg2",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArg2");
  (arg1)->setArg2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArg3(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArg3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArg3",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArg3",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArg3",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArg3");
  (arg1)->setArg3(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArg4(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArg4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArg4",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArg4",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArg4",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArg4");
  (arg1)->setArg4(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_setArg5(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::setArg5",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::setArg5",1,"AsyncCaller *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncCaller::setArg5",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_setArg5",1,SWIGTYPE_p_AsyncCaller);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AsyncCaller_setArg5");
  (arg1)->setArg5(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncCaller_run(lua_State* L) {
  int SWIG_arg = 0;
  AsyncCaller *arg1 = (AsyncCaller *) 0 ;
  
  SWIG_check_num_args("AsyncCaller::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncCaller::run",1,"AsyncCaller *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncCaller,0))){
    SWIG_fail_ptr("AsyncCaller_run",1,SWIGTYPE_p_AsyncCaller);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AsyncCaller(void *obj) {
AsyncCaller *arg1 = (AsyncCaller *) obj;
delete arg1;
}
static swig_lua_method swig_AsyncCaller_methods[] = {
    {"dispose", _wrap_AsyncCaller_dispose}, 
    {"setArgs", _wrap_AsyncCaller_setArgs}, 
    {"setArg1", _wrap_AsyncCaller_setArg1}, 
    {"setArg2", _wrap_AsyncCaller_setArg2}, 
    {"setArg3", _wrap_AsyncCaller_setArg3}, 
    {"setArg4", _wrap_AsyncCaller_setArg4}, 
    {"setArg5", _wrap_AsyncCaller_setArg5}, 
    {"run", _wrap_AsyncCaller_run}, 
    {0,0}
};
static swig_lua_attribute swig_AsyncCaller_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AsyncCaller_bases[] = {0};
static const char *swig_AsyncCaller_base_names[] = {0};
static swig_lua_class _wrap_class_AsyncCaller = { "AsyncCaller", &SWIGTYPE_p_AsyncCaller,_wrap_new_AsyncCaller, swig_delete_AsyncCaller, swig_AsyncCaller_methods, swig_AsyncCaller_attributes, swig_AsyncCaller_bases, swig_AsyncCaller_base_names };

static int _wrap_new_AsyncThriftService(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  ThriftService *arg2 = (ThriftService *) 0 ;
  AsyncThriftService *result = 0 ;
  
  SWIG_check_num_args("AsyncThriftService::AsyncThriftService",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::AsyncThriftService",1,"Thrift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AsyncThriftService::AsyncThriftService",2,"ThriftService *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("new_AsyncThriftService",1,SWIGTYPE_p_Thrift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ThriftService,0))){
    SWIG_fail_ptr("new_AsyncThriftService",2,SWIGTYPE_p_ThriftService);
  }
  
  result = (AsyncThriftService *)new AsyncThriftService(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AsyncThriftService,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_ping(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  gsSelf arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("AsyncThriftService::ping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::ping",1,"AsyncThriftService *");
  if(!lua_istable(L,2)) SWIG_fail_arg("AsyncThriftService::ping",2,"gsSelf");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("AsyncThriftService::ping",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_ping",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  (&arg2)->m_id = 2; (&arg2)->L = L; 
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->ping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_createGame(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  std::string temp2 ;
  
  SWIG_check_num_args("AsyncThriftService::createGame",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::createGame",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::createGame",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::createGame",3,"int const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AsyncThriftService::createGame",4,"bool const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::createGame",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::createGame",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_createGame",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  (arg1)->createGame((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_add_user(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  gs::TUser *arg2 = 0 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  int result;
  
  SWIG_check_num_args("AsyncThriftService::add_user",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::add_user",1,"AsyncThriftService *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AsyncThriftService::add_user",2,"gs::TUser &");
  if(!lua_istable(L,3)) SWIG_fail_arg("AsyncThriftService::add_user",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("AsyncThriftService::add_user",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_add_user",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("AsyncThriftService_add_user",2,SWIGTYPE_p_gs__TUser);
  }
  
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  result = (int)(arg1)->add_user(*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_add_score(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  double arg3 ;
  gsSelf arg4 ;
  gsFunction arg5 ;
  int result;
  
  SWIG_check_num_args("AsyncThriftService::add_score",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::add_score",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::add_score",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::add_score",3,"double const");
  if(!lua_istable(L,4)) SWIG_fail_arg("AsyncThriftService::add_score",4,"gsSelf");
  if(!lua_isfunction(L,5)) SWIG_fail_arg("AsyncThriftService::add_score",5,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_add_score",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  result = (int)(arg1)->add_score(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_login_user(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsSelf arg4 ;
  gsFunction arg5 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AsyncThriftService::login_user",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::login_user",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::login_user",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AsyncThriftService::login_user",3,"std::string const &");
  if(!lua_istable(L,4)) SWIG_fail_arg("AsyncThriftService::login_user",4,"gsSelf");
  if(!lua_isfunction(L,5)) SWIG_fail_arg("AsyncThriftService::login_user",5,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_login_user",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (arg1)->login_user((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_player_scores__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  gkString *arg7 = 0 ;
  gkString temp7 ;
  
  SWIG_check_num_args("AsyncThriftService::get_player_scores",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_player_scores",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_player_scores",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_player_scores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AsyncThriftService::get_player_scores",4,"int const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::get_player_scores",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::get_player_scores",6,"gsFunction");
  if(!lua_isstring(L,7)) SWIG_fail_arg("AsyncThriftService::get_player_scores",7,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_player_scores",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  
  temp7 = gkString((const char*)lua_tostring(L, 7));
  arg7 = &temp7;
  
  (arg1)->get_player_scores(arg2,arg3,arg4,arg5,arg6,(gkString const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_player_scores__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  
  SWIG_check_num_args("AsyncThriftService::get_player_scores",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_player_scores",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_player_scores",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_player_scores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AsyncThriftService::get_player_scores",4,"int const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::get_player_scores",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::get_player_scores",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_player_scores",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  (arg1)->get_player_scores(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_player_scores(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncThriftService, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            _v = lua_istable(L, argv[4]); 
            if (_v) {
              _v = lua_isfunction(L, argv[5]); 
              if (_v) {
                return _wrap_AsyncThriftService_get_player_scores__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncThriftService, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            _v = lua_istable(L, argv[4]); 
            if (_v) {
              _v = lua_isfunction(L, argv[5]); 
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AsyncThriftService_get_player_scores__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AsyncThriftService_get_player_scores'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AsyncThriftService::get_player_scores(int const,int const,int const,gsSelf,gsFunction,gkString const &)\n"
    "    AsyncThriftService::get_player_scores(int const,int const,int const,gsSelf,gsFunction)\n");
  lua_error(L);return 0;
}


static int _wrap_AsyncThriftService_get_highscores__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  gkString *arg7 = 0 ;
  gkString temp7 ;
  
  SWIG_check_num_args("AsyncThriftService::get_highscores",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_highscores",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_highscores",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_highscores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AsyncThriftService::get_highscores",4,"int const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::get_highscores",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::get_highscores",6,"gsFunction");
  if(!lua_isstring(L,7)) SWIG_fail_arg("AsyncThriftService::get_highscores",7,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_highscores",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  
  temp7 = gkString((const char*)lua_tostring(L, 7));
  arg7 = &temp7;
  
  (arg1)->get_highscores(arg2,arg3,arg4,arg5,arg6,(gkString const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_highscores__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  
  SWIG_check_num_args("AsyncThriftService::get_highscores",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_highscores",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_highscores",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_highscores",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AsyncThriftService::get_highscores",4,"int const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::get_highscores",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::get_highscores",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_highscores",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  (arg1)->get_highscores(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_highscores(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncThriftService, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            _v = lua_istable(L, argv[4]); 
            if (_v) {
              _v = lua_isfunction(L, argv[5]); 
              if (_v) {
                return _wrap_AsyncThriftService_get_highscores__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AsyncThriftService, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            _v = lua_istable(L, argv[4]); 
            if (_v) {
              _v = lua_isfunction(L, argv[5]); 
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_AsyncThriftService_get_highscores__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AsyncThriftService_get_highscores'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AsyncThriftService::get_highscores(int const,int const,int const,gsSelf,gsFunction,gkString const &)\n"
    "    AsyncThriftService::get_highscores(int const,int const,int const,gsSelf,gsFunction)\n");
  lua_error(L);return 0;
}


static int _wrap_AsyncThriftService_set_game(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("AsyncThriftService::set_game",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::set_game",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::set_game",2,"std::string const &");
  if(!lua_istable(L,3)) SWIG_fail_arg("AsyncThriftService::set_game",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("AsyncThriftService::set_game",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_set_game",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->set_game((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_check_session(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  gsSelf arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("AsyncThriftService::check_session",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::check_session",1,"AsyncThriftService *");
  if(!lua_istable(L,2)) SWIG_fail_arg("AsyncThriftService::check_session",2,"gsSelf");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("AsyncThriftService::check_session",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_check_session",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  (&arg2)->m_id = 2; (&arg2)->L = L; 
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->check_session(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_check_userdata(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsSelf arg4 ;
  gsFunction arg5 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("AsyncThriftService::check_userdata",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::check_userdata",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::check_userdata",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AsyncThriftService::check_userdata",3,"std::string const &");
  if(!lua_istable(L,4)) SWIG_fail_arg("AsyncThriftService::check_userdata",4,"gsSelf");
  if(!lua_isfunction(L,5)) SWIG_fail_arg("AsyncThriftService::check_userdata",5,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_check_userdata",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (arg1)->check_userdata((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_player_pos(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("AsyncThriftService::get_player_pos",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_player_pos",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_player_pos",2,"int const");
  if(!lua_istable(L,3)) SWIG_fail_arg("AsyncThriftService::get_player_pos",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("AsyncThriftService::get_player_pos",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_player_pos",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->get_player_pos(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_pos_by_score(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  double arg3 ;
  gsSelf arg4 ;
  gsFunction arg5 ;
  
  SWIG_check_num_args("AsyncThriftService::get_pos_by_score",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_pos_by_score",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_pos_by_score",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_pos_by_score",3,"double const");
  if(!lua_istable(L,4)) SWIG_fail_arg("AsyncThriftService::get_pos_by_score",4,"gsSelf");
  if(!lua_isfunction(L,5)) SWIG_fail_arg("AsyncThriftService::get_pos_by_score",5,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_pos_by_score",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (arg1)->get_pos_by_score(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_request_signintoken(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("AsyncThriftService::request_signintoken",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::request_signintoken",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::request_signintoken",2,"std::string const &");
  if(!lua_istable(L,3)) SWIG_fail_arg("AsyncThriftService::request_signintoken",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("AsyncThriftService::request_signintoken",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_request_signintoken",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->request_signintoken((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_login_by_token(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  
  SWIG_check_num_args("AsyncThriftService::login_by_token",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::login_by_token",1,"AsyncThriftService *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AsyncThriftService::login_by_token",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AsyncThriftService::login_by_token",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("AsyncThriftService::login_by_token",4,"std::string const &");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::login_by_token",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::login_by_token",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_login_by_token",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  (arg1)->login_by_token((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsyncThriftService_get_before_level_data(lua_State* L) {
  int SWIG_arg = 0;
  AsyncThriftService *arg1 = (AsyncThriftService *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  
  SWIG_check_num_args("AsyncThriftService::get_before_level_data",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",1,"AsyncThriftService *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",3,"int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",4,"int const");
  if(!lua_istable(L,5)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("AsyncThriftService::get_before_level_data",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AsyncThriftService,0))){
    SWIG_fail_ptr("AsyncThriftService_get_before_level_data",1,SWIGTYPE_p_AsyncThriftService);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  (arg1)->get_before_level_data(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AsyncThriftService(void *obj) {
AsyncThriftService *arg1 = (AsyncThriftService *) obj;
delete arg1;
}
static swig_lua_method swig_AsyncThriftService_methods[] = {
    {"ping", _wrap_AsyncThriftService_ping}, 
    {"createGame", _wrap_AsyncThriftService_createGame}, 
    {"add_user", _wrap_AsyncThriftService_add_user}, 
    {"add_score", _wrap_AsyncThriftService_add_score}, 
    {"login_user", _wrap_AsyncThriftService_login_user}, 
    {"get_player_scores", _wrap_AsyncThriftService_get_player_scores}, 
    {"get_highscores", _wrap_AsyncThriftService_get_highscores}, 
    {"set_game", _wrap_AsyncThriftService_set_game}, 
    {"check_session", _wrap_AsyncThriftService_check_session}, 
    {"check_userdata", _wrap_AsyncThriftService_check_userdata}, 
    {"get_player_pos", _wrap_AsyncThriftService_get_player_pos}, 
    {"get_pos_by_score", _wrap_AsyncThriftService_get_pos_by_score}, 
    {"request_signintoken", _wrap_AsyncThriftService_request_signintoken}, 
    {"login_by_token", _wrap_AsyncThriftService_login_by_token}, 
    {"get_before_level_data", _wrap_AsyncThriftService_get_before_level_data}, 
    {0,0}
};
static swig_lua_attribute swig_AsyncThriftService_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AsyncThriftService_bases[] = {0};
static const char *swig_AsyncThriftService_base_names[] = {0};
static swig_lua_class _wrap_class_AsyncThriftService = { "AsyncThriftService", &SWIGTYPE_p_AsyncThriftService,_wrap_new_AsyncThriftService, swig_delete_AsyncThriftService, swig_AsyncThriftService_methods, swig_AsyncThriftService_attributes, swig_AsyncThriftService_bases, swig_AsyncThriftService_base_names };

static int _wrap_new_Thrift__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  gkString temp1 ;
  Thrift *result = 0 ;
  
  SWIG_check_num_args("Thrift::Thrift",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Thrift::Thrift",1,"gkString const &");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  result = (Thrift *)new Thrift((gkString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Thrift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Thrift__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  int arg2 ;
  gkString temp1 ;
  Thrift *result = 0 ;
  
  SWIG_check_num_args("Thrift::Thrift",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Thrift::Thrift",1,"gkString const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Thrift::Thrift",2,"int");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Thrift *)new Thrift((gkString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Thrift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Thrift__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  gkString *arg2 = 0 ;
  int arg3 ;
  gkString temp1 ;
  gkString temp2 ;
  Thrift *result = 0 ;
  
  SWIG_check_num_args("Thrift::Thrift",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Thrift::Thrift",1,"gkString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Thrift::Thrift",2,"gkString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Thrift::Thrift",3,"int");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (Thrift *)new Thrift((gkString const &)*arg1,(gkString const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Thrift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Thrift(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Thrift__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Thrift__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Thrift__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Thrift'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Thrift::Thrift(gkString const &)\n"
    "    Thrift::Thrift(gkString const &,int)\n"
    "    Thrift::Thrift(gkString const &,gkString const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Thrift_getService(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  ThriftService *result = 0 ;
  
  SWIG_check_num_args("Thrift::getService",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::getService",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_getService",1,SWIGTYPE_p_Thrift);
  }
  
  result = (ThriftService *)(arg1)->getService();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ThriftService,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_refreshConnection(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  
  SWIG_check_num_args("Thrift::refreshConnection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::refreshConnection",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_refreshConnection",1,SWIGTYPE_p_Thrift);
  }
  
  (arg1)->refreshConnection();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  
  SWIG_check_num_args("Thrift::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::disconnect",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_disconnect",1,SWIGTYPE_p_Thrift);
  }
  
  (arg1)->disconnect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_getErrorCallback(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  gkPreparedLuaEvent *result = 0 ;
  
  SWIG_check_num_args("Thrift::getErrorCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::getErrorCallback",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_getErrorCallback",1,SWIGTYPE_p_Thrift);
  }
  
  result = (gkPreparedLuaEvent *)(arg1)->getErrorCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gkPreparedLuaEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_setErrorCallback(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  gsSelf arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("Thrift::setErrorCallback",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::setErrorCallback",1,"Thrift *");
  if(!lua_istable(L,2)) SWIG_fail_arg("Thrift::setErrorCallback",2,"gsSelf");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("Thrift::setErrorCallback",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_setErrorCallback",1,SWIGTYPE_p_Thrift);
  }
  
  (&arg2)->m_id = 2; (&arg2)->L = L; 
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->setErrorCallback(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_getExceptionCallback(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  gkPreparedLuaEvent *result = 0 ;
  
  SWIG_check_num_args("Thrift::getExceptionCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::getExceptionCallback",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_getExceptionCallback",1,SWIGTYPE_p_Thrift);
  }
  
  result = (gkPreparedLuaEvent *)(arg1)->getExceptionCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gkPreparedLuaEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_setExceptionCallback(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  gsSelf arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("Thrift::setExceptionCallback",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::setExceptionCallback",1,"Thrift *");
  if(!lua_istable(L,2)) SWIG_fail_arg("Thrift::setExceptionCallback",2,"gsSelf");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("Thrift::setExceptionCallback",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_setExceptionCallback",1,SWIGTYPE_p_Thrift);
  }
  
  (&arg2)->m_id = 2; (&arg2)->L = L; 
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->setExceptionCallback(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thrift_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  Thrift *arg1 = (Thrift *) 0 ;
  bool result;
  
  SWIG_check_num_args("Thrift::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Thrift::isOpen",1,"Thrift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Thrift,0))){
    SWIG_fail_ptr("Thrift_isOpen",1,SWIGTYPE_p_Thrift);
  }
  
  result = (bool)(arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Thrift(void *obj) {
Thrift *arg1 = (Thrift *) obj;
delete arg1;
}
static swig_lua_method swig_Thrift_methods[] = {
    {"getService", _wrap_Thrift_getService}, 
    {"refreshConnection", _wrap_Thrift_refreshConnection}, 
    {"disconnect", _wrap_Thrift_disconnect}, 
    {"getErrorCallback", _wrap_Thrift_getErrorCallback}, 
    {"setErrorCallback", _wrap_Thrift_setErrorCallback}, 
    {"getExceptionCallback", _wrap_Thrift_getExceptionCallback}, 
    {"setExceptionCallback", _wrap_Thrift_setExceptionCallback}, 
    {"isOpen", _wrap_Thrift_isOpen}, 
    {0,0}
};
static swig_lua_attribute swig_Thrift_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Thrift_bases[] = {0};
static const char *swig_Thrift_base_names[] = {0};
static swig_lua_class _wrap_class_Thrift = { "Thrift", &SWIGTYPE_p_Thrift,_wrap_new_Thrift, swig_delete_Thrift, swig_Thrift_methods, swig_Thrift_attributes, swig_Thrift_bases, swig_Thrift_base_names };

static int _wrap_getThriftService(lua_State* L) {
  int SWIG_arg = 0;
  ThriftService *result = 0 ;
  
  SWIG_check_num_args("getThriftService",0,0)
  result = (ThriftService *)getThriftService();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ThriftService,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TAddUserResultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddUserResultCode *result = 0 ;
  
  SWIG_check_num_args("gs::TAddUserResultCode::TAddUserResultCode",0,0)
  result = (gs::TAddUserResultCode *)new gs::TAddUserResultCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TAddUserResultCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TAddUserResultCode(void *obj) {
gs::TAddUserResultCode *arg1 = (gs::TAddUserResultCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TAddUserResultCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TAddUserResultCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TAddUserResultCode_bases[] = {0};
static const char *swig_gs_TAddUserResultCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TAddUserResultCode = { "TAddUserResultCode", &SWIGTYPE_p_gs__TAddUserResultCode,_wrap_new_TAddUserResultCode, swig_delete_TAddUserResultCode, swig_gs_TAddUserResultCode_methods, swig_gs_TAddUserResultCode_attributes, swig_gs_TAddUserResultCode_bases, swig_gs_TAddUserResultCode_base_names };

static int _wrap__TAddUserResultCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TAddUserResultCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TAddUserResultCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TAddScoreResultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResultCode *result = 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResultCode::TAddScoreResultCode",0,0)
  result = (gs::TAddScoreResultCode *)new gs::TAddScoreResultCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TAddScoreResultCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TAddScoreResultCode(void *obj) {
gs::TAddScoreResultCode *arg1 = (gs::TAddScoreResultCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TAddScoreResultCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TAddScoreResultCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TAddScoreResultCode_bases[] = {0};
static const char *swig_gs_TAddScoreResultCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TAddScoreResultCode = { "TAddScoreResultCode", &SWIGTYPE_p_gs__TAddScoreResultCode,_wrap_new_TAddScoreResultCode, swig_delete_TAddScoreResultCode, swig_gs_TAddScoreResultCode_methods, swig_gs_TAddScoreResultCode_attributes, swig_gs_TAddScoreResultCode_bases, swig_gs_TAddScoreResultCode_base_names };

static int _wrap__TAddScoreResultCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TAddScoreResultCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TAddScoreResultCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TLoginResultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResultCode *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResultCode::TLoginResultCode",0,0)
  result = (gs::TLoginResultCode *)new gs::TLoginResultCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TLoginResultCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TLoginResultCode(void *obj) {
gs::TLoginResultCode *arg1 = (gs::TLoginResultCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TLoginResultCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TLoginResultCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TLoginResultCode_bases[] = {0};
static const char *swig_gs_TLoginResultCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TLoginResultCode = { "TLoginResultCode", &SWIGTYPE_p_gs__TLoginResultCode,_wrap_new_TLoginResultCode, swig_delete_TLoginResultCode, swig_gs_TLoginResultCode_methods, swig_gs_TLoginResultCode_attributes, swig_gs_TLoginResultCode_bases, swig_gs_TLoginResultCode_base_names };

static int _wrap__TLoginResultCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TLoginResultCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TLoginResultCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TGetUserResultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResultCode *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResultCode::TGetUserResultCode",0,0)
  result = (gs::TGetUserResultCode *)new gs::TGetUserResultCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TGetUserResultCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TGetUserResultCode(void *obj) {
gs::TGetUserResultCode *arg1 = (gs::TGetUserResultCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TGetUserResultCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TGetUserResultCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TGetUserResultCode_bases[] = {0};
static const char *swig_gs_TGetUserResultCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TGetUserResultCode = { "TGetUserResultCode", &SWIGTYPE_p_gs__TGetUserResultCode,_wrap_new_TGetUserResultCode, swig_delete_TGetUserResultCode, swig_gs_TGetUserResultCode_methods, swig_gs_TGetUserResultCode_attributes, swig_gs_TGetUserResultCode_bases, swig_gs_TGetUserResultCode_base_names };

static int _wrap__TGetUserResultCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TGetUserResultCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TGetUserResultCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ErrorCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::ErrorCode *result = 0 ;
  
  SWIG_check_num_args("gs::ErrorCode::ErrorCode",0,0)
  result = (gs::ErrorCode *)new gs::ErrorCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__ErrorCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ErrorCode(void *obj) {
gs::ErrorCode *arg1 = (gs::ErrorCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_ErrorCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_ErrorCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_ErrorCode_bases[] = {0};
static const char *swig_gs_ErrorCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_ErrorCode = { "ErrorCode", &SWIGTYPE_p_gs__ErrorCode,_wrap_new_ErrorCode, swig_delete_ErrorCode, swig_gs_ErrorCode_methods, swig_gs_ErrorCode_attributes, swig_gs_ErrorCode_bases, swig_gs_ErrorCode_base_names };

static int _wrap__ErrorCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_ErrorCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_ErrorCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TUserDataResponse(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUserDataResponse *result = 0 ;
  
  SWIG_check_num_args("gs::TUserDataResponse::TUserDataResponse",0,0)
  result = (gs::TUserDataResponse *)new gs::TUserDataResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TUserDataResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TUserDataResponse(void *obj) {
gs::TUserDataResponse *arg1 = (gs::TUserDataResponse *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TUserDataResponse_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TUserDataResponse_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TUserDataResponse_bases[] = {0};
static const char *swig_gs_TUserDataResponse_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TUserDataResponse = { "TUserDataResponse", &SWIGTYPE_p_gs__TUserDataResponse,_wrap_new_TUserDataResponse, swig_delete_TUserDataResponse, swig_gs_TUserDataResponse_methods, swig_gs_TUserDataResponse_attributes, swig_gs_TUserDataResponse_bases, swig_gs_TUserDataResponse_base_names };

static int _wrap__TUserDataResponse_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TUserDataResponse_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TUserDataResponse_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TSetGameResult(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSetGameResult *result = 0 ;
  
  SWIG_check_num_args("gs::TSetGameResult::TSetGameResult",0,0)
  result = (gs::TSetGameResult *)new gs::TSetGameResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TSetGameResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TSetGameResult(void *obj) {
gs::TSetGameResult *arg1 = (gs::TSetGameResult *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TSetGameResult_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TSetGameResult_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TSetGameResult_bases[] = {0};
static const char *swig_gs_TSetGameResult_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TSetGameResult = { "TSetGameResult", &SWIGTYPE_p_gs__TSetGameResult,_wrap_new_TSetGameResult, swig_delete_TSetGameResult, swig_gs_TSetGameResult_methods, swig_gs_TSetGameResult_attributes, swig_gs_TSetGameResult_bases, swig_gs_TSetGameResult_base_names };

static int _wrap__TSetGameResult_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TSetGameResult_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TSetGameResult_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TAutoLoginResultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResultCode *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResultCode::TAutoLoginResultCode",0,0)
  result = (gs::TAutoLoginResultCode *)new gs::TAutoLoginResultCode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TAutoLoginResultCode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TAutoLoginResultCode(void *obj) {
gs::TAutoLoginResultCode *arg1 = (gs::TAutoLoginResultCode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TAutoLoginResultCode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs_TAutoLoginResultCode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gs_TAutoLoginResultCode_bases[] = {0};
static const char *swig_gs_TAutoLoginResultCode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TAutoLoginResultCode = { "TAutoLoginResultCode", &SWIGTYPE_p_gs__TAutoLoginResultCode,_wrap_new_TAutoLoginResultCode, swig_delete_TAutoLoginResultCode, swig_gs_TAutoLoginResultCode_methods, swig_gs_TAutoLoginResultCode_attributes, swig_gs_TAutoLoginResultCode_bases, swig_gs_TAutoLoginResultCode_base_names };

static int _wrap__TAutoLoginResultCode_VALUES_TO_NAMES_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,char const * > result;
  
  SWIG_check_num_args("gs::_TAutoLoginResultCode_VALUES_TO_NAMES",0,0)
  result = (std::map< int,char const * >)gs::_TAutoLoginResultCode_VALUES_TO_NAMES;
  {
    std::map< int,char const * > * resultptr = new std::map< int,char const * >((const std::map< int,char const * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_int_char_const_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TUser__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TUser__isset::_TUser__isset",0,0)
  result = (gs::_TUser__isset *)new gs::_TUser__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TUser__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_username_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TUser__isset::username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::username",1,"gs::_TUser__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TUser__isset::username",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_username_set",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->username = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_username_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TUser__isset::username",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::username",1,"gs::_TUser__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_username_get",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  result = (bool) ((arg1)->username);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_password_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TUser__isset::password",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::password",1,"gs::_TUser__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TUser__isset::password",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_password_set",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->password = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_password_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TUser__isset::password",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::password",1,"gs::_TUser__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_password_get",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  result = (bool) ((arg1)->password);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_email_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TUser__isset::email",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::email",1,"gs::_TUser__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TUser__isset::email",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_email_set",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->email = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_email_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TUser__isset::email",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::email",1,"gs::_TUser__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_email_get",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  result = (bool) ((arg1)->email);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TUser__isset::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::data",1,"gs::_TUser__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TUser__isset::data",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_data_set",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->data = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TUser__isset_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TUser__isset *arg1 = (gs::_TUser__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TUser__isset::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TUser__isset::data",1,"gs::_TUser__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("_TUser__isset_data_get",1,SWIGTYPE_p_gs___TUser__isset);
  }
  
  result = (bool) ((arg1)->data);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TUser__isset(void *obj) {
gs::_TUser__isset *arg1 = (gs::_TUser__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TUser__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TUser__isset_attributes[] = {
    { "username", _wrap__TUser__isset_username_get, _wrap__TUser__isset_username_set},
    { "password", _wrap__TUser__isset_password_get, _wrap__TUser__isset_password_set},
    { "email", _wrap__TUser__isset_email_get, _wrap__TUser__isset_email_set},
    { "data", _wrap__TUser__isset_data_get, _wrap__TUser__isset_data_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TUser__isset_bases[] = {0};
static const char *swig_gs__TUser__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TUser__isset = { "_TUser__isset", &SWIGTYPE_p_gs___TUser__isset,_wrap_new__TUser__isset, swig_delete__TUser__isset, swig_gs__TUser__isset_methods, swig_gs__TUser__isset_attributes, swig_gs__TUser__isset_bases, swig_gs__TUser__isset_base_names };

static int _wrap_TUser_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TUser::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TUser::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TUser::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TUser::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TUser::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::ascii_fingerprint",0,0)
  result = (char *)gs::TUser::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TUser::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TUser(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::TUser",0,0)
  result = (gs::TUser *)new gs::TUser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TUser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_username_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::username",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::username",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_username_set",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->username = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_username_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::username",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::username",1,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_username_get",1,SWIGTYPE_p_gs__TUser);
  }
  
  result = (std::string *) & ((arg1)->username);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_password_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::password",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::password",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::password",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_password_set",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->password = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_password_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::password",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::password",1,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_password_get",1,SWIGTYPE_p_gs__TUser);
  }
  
  result = (std::string *) & ((arg1)->password);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_email_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::email",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::email",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::email",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_email_set",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->email = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_email_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::email",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::email",1,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_email_get",1,SWIGTYPE_p_gs__TUser);
  }
  
  result = (std::string *) & ((arg1)->email);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::data",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_data_set",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->data = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::data",1,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_data_get",1,SWIGTYPE_p_gs__TUser);
  }
  
  result = (std::string *) & ((arg1)->data);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  gs::_TUser__isset *arg2 = (gs::_TUser__isset *) 0 ;
  
  SWIG_check_num_args("gs::TUser::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__isset",1,"gs::TUser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TUser::__isset",2,"gs::_TUser__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___isset_set",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TUser__isset,0))){
    SWIG_fail_ptr("TUser___isset_set",2,SWIGTYPE_p_gs___TUser__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  gs::_TUser__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TUser::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__isset",1,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___isset_get",1,SWIGTYPE_p_gs__TUser);
  }
  
  result = (gs::_TUser__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TUser__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___set_username(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::__set_username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__set_username",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::__set_username",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___set_username",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_username((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___set_password(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::__set_password",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__set_password",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::__set_password",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___set_password",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_password((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___set_email(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::__set_email",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__set_email",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::__set_email",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___set_email",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_email((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___set_data(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TUser::__set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::__set_data",1,"gs::TUser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TUser::__set_data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___set_data",1,SWIGTYPE_p_gs__TUser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_data((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  gs::TUser *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TUser::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::operator ==",1,"gs::TUser const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TUser::operator ==",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___eq",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___eq",2,SWIGTYPE_p_gs__TUser);
  }
  
  result = (bool)((gs::TUser const *)arg1)->operator ==((gs::TUser const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  gs::TUser *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TUser::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::operator <",1,"gs::TUser const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TUser::operator <",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___lt",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser___lt",2,SWIGTYPE_p_gs__TUser);
  }
  
  result = (bool)((gs::TUser const *)arg1)->operator <((gs::TUser const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TUser::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::read",1,"gs::TUser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TUser::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_read",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TUser_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TUser_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = (gs::TUser *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TUser::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TUser::write",1,"gs::TUser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TUser::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TUser_write",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TUser_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TUser const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TUser(void *obj) {
gs::TUser *arg1 = (gs::TUser *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TUser_methods[] = {
    {"__set_username", _wrap_TUser___set_username}, 
    {"__set_password", _wrap_TUser___set_password}, 
    {"__set_email", _wrap_TUser___set_email}, 
    {"__set_data", _wrap_TUser___set_data}, 
    {"__eq", _wrap_TUser___eq}, 
    {"__lt", _wrap_TUser___lt}, 
    {"read", _wrap_TUser_read}, 
    {"write", _wrap_TUser_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TUser_attributes[] = {
    { "username", _wrap_TUser_username_get, _wrap_TUser_username_set},
    { "password", _wrap_TUser_password_get, _wrap_TUser_password_set},
    { "email", _wrap_TUser_email_get, _wrap_TUser_email_set},
    { "data", _wrap_TUser_data_get, _wrap_TUser_data_set},
    { "__isset", _wrap_TUser___isset_get, _wrap_TUser___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TUser_bases[] = {0};
static const char *swig_gs_TUser_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TUser = { "TUser", &SWIGTYPE_p_gs__TUser,_wrap_new_TUser, swig_delete_TUser, swig_gs_TUser_methods, swig_gs_TUser_attributes, swig_gs_TUser_bases, swig_gs_TUser_base_names };

static int _wrap_swap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gs::TUser *arg1 = 0 ;
  gs::TUser *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TUser &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TUser &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TUser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TUser);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TScore__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TScore__isset::_TScore__isset",0,0)
  result = (gs::_TScore__isset *)new gs::_TScore__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TScore__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_score_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::score",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::score",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_score_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->score = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_score_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::score",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::score",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_score_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->score);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_time_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::time",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::time",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_time_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_time_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::time",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_time_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->time);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::data",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::data",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_data_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->data = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::data",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_data_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->data);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_username_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::username",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::username",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_username_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->username = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_username_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::username",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::username",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_username_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->username);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_gamename_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::gamename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::gamename",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::gamename",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_gamename_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->gamename = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_gamename_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::gamename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::gamename",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_gamename_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->gamename);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::mode",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::mode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_mode_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::mode",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_mode_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->mode);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_os_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TScore__isset::os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::os",1,"gs::_TScore__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TScore__isset::os",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_os_set",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->os = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TScore__isset_os_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TScore__isset *arg1 = (gs::_TScore__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TScore__isset::os",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TScore__isset::os",1,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("_TScore__isset_os_get",1,SWIGTYPE_p_gs___TScore__isset);
  }
  
  result = (bool) ((arg1)->os);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TScore__isset(void *obj) {
gs::_TScore__isset *arg1 = (gs::_TScore__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TScore__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TScore__isset_attributes[] = {
    { "score", _wrap__TScore__isset_score_get, _wrap__TScore__isset_score_set},
    { "time", _wrap__TScore__isset_time_get, _wrap__TScore__isset_time_set},
    { "data", _wrap__TScore__isset_data_get, _wrap__TScore__isset_data_set},
    { "username", _wrap__TScore__isset_username_get, _wrap__TScore__isset_username_set},
    { "gamename", _wrap__TScore__isset_gamename_get, _wrap__TScore__isset_gamename_set},
    { "mode", _wrap__TScore__isset_mode_get, _wrap__TScore__isset_mode_set},
    { "os", _wrap__TScore__isset_os_get, _wrap__TScore__isset_os_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TScore__isset_bases[] = {0};
static const char *swig_gs__TScore__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TScore__isset = { "_TScore__isset", &SWIGTYPE_p_gs___TScore__isset,_wrap_new__TScore__isset, swig_delete__TScore__isset, swig_gs__TScore__isset_methods, swig_gs__TScore__isset_attributes, swig_gs__TScore__isset_bases, swig_gs__TScore__isset_base_names };

static int _wrap_TScore_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TScore::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TScore::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TScore::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TScore::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TScore::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::ascii_fingerprint",0,0)
  result = (char *)gs::TScore::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TScore::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TScore(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::TScore",0,0)
  result = (gs::TScore *)new gs::TScore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TScore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_score_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gs::TScore::score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::score",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::score",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_score_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->score = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_score_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  double result;
  
  SWIG_check_num_args("gs::TScore::score",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::score",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_score_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (double) ((arg1)->score);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_time_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("gs::TScore::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::time",1,"gs::TScore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TScore::time",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_time_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("TScore_time_set",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_time_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("gs::TScore::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::time",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_time_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result =  ((arg1)->time);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::data",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_data_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->data = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::data",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_data_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (std::string *) & ((arg1)->data);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_username_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::username",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::username",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_username_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->username = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_username_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::username",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::username",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_username_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (std::string *) & ((arg1)->username);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_gamename_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::gamename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::gamename",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::gamename",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_gamename_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->gamename = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_gamename_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::gamename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::gamename",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_gamename_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (std::string *) & ((arg1)->gamename);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TScore::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::mode",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_mode_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TScore::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::mode",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_mode_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_os_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TScore::os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::os",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::os",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_os_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->os = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_os_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TScore::os",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::os",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_os_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (int) ((arg1)->os);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  gs::_TScore__isset *arg2 = (gs::_TScore__isset *) 0 ;
  
  SWIG_check_num_args("gs::TScore::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__isset",1,"gs::TScore *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TScore::__isset",2,"gs::_TScore__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___isset_set",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TScore__isset,0))){
    SWIG_fail_ptr("TScore___isset_set",2,SWIGTYPE_p_gs___TScore__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  gs::_TScore__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TScore::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__isset",1,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___isset_get",1,SWIGTYPE_p_gs__TScore);
  }
  
  result = (gs::_TScore__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TScore__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_score(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gs::TScore::__set_score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_score",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::__set_score",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_score",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->__set_score(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_time(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("gs::TScore::__set_time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_time",1,"gs::TScore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TScore::__set_time",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_time",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("TScore___set_time",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  (arg1)->__set_time(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_data(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::__set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_data",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::__set_data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_data",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_data((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_username(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::__set_username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_username",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::__set_username",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_username",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_username((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_gamename(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TScore::__set_gamename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_gamename",1,"gs::TScore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TScore::__set_gamename",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_gamename",1,SWIGTYPE_p_gs__TScore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_gamename((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_mode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TScore::__set_mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_mode",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::__set_mode",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_mode",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_mode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___set_os(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TScore::__set_os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::__set_os",1,"gs::TScore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TScore::__set_os",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___set_os",1,SWIGTYPE_p_gs__TScore);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_os(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  gs::TScore *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TScore::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::operator ==",1,"gs::TScore const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TScore::operator ==",2,"gs::TScore const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___eq",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___eq",2,SWIGTYPE_p_gs__TScore);
  }
  
  result = (bool)((gs::TScore const *)arg1)->operator ==((gs::TScore const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  gs::TScore *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TScore::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::operator <",1,"gs::TScore const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TScore::operator <",2,"gs::TScore const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___lt",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore___lt",2,SWIGTYPE_p_gs__TScore);
  }
  
  result = (bool)((gs::TScore const *)arg1)->operator <((gs::TScore const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TScore::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::read",1,"gs::TScore *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TScore::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_read",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TScore_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TScore_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = (gs::TScore *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TScore::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TScore::write",1,"gs::TScore const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TScore::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TScore_write",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TScore_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TScore const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TScore(void *obj) {
gs::TScore *arg1 = (gs::TScore *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TScore_methods[] = {
    {"__set_score", _wrap_TScore___set_score}, 
    {"__set_time", _wrap_TScore___set_time}, 
    {"__set_data", _wrap_TScore___set_data}, 
    {"__set_username", _wrap_TScore___set_username}, 
    {"__set_gamename", _wrap_TScore___set_gamename}, 
    {"__set_mode", _wrap_TScore___set_mode}, 
    {"__set_os", _wrap_TScore___set_os}, 
    {"__eq", _wrap_TScore___eq}, 
    {"__lt", _wrap_TScore___lt}, 
    {"read", _wrap_TScore_read}, 
    {"write", _wrap_TScore_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TScore_attributes[] = {
    { "score", _wrap_TScore_score_get, _wrap_TScore_score_set},
    { "time", _wrap_TScore_time_get, _wrap_TScore_time_set},
    { "data", _wrap_TScore_data_get, _wrap_TScore_data_set},
    { "username", _wrap_TScore_username_get, _wrap_TScore_username_set},
    { "gamename", _wrap_TScore_gamename_get, _wrap_TScore_gamename_set},
    { "mode", _wrap_TScore_mode_get, _wrap_TScore_mode_set},
    { "os", _wrap_TScore_os_get, _wrap_TScore_os_set},
    { "__isset", _wrap_TScore___isset_get, _wrap_TScore___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TScore_bases[] = {0};
static const char *swig_gs_TScore_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TScore = { "TScore", &SWIGTYPE_p_gs__TScore,_wrap_new_TScore, swig_delete_TScore, swig_gs_TScore_methods, swig_gs_TScore_attributes, swig_gs_TScore_bases, swig_gs_TScore_base_names };

static int _wrap_swap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gs::TScore *arg1 = 0 ;
  gs::TScore *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TScore &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TScore &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TScore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TScore);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TGame__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGame__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TGame__isset::_TGame__isset",0,0)
  result = (gs::_TGame__isset *)new gs::_TGame__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TGame__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGame__isset_name_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGame__isset *arg1 = (gs::_TGame__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TGame__isset::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGame__isset::name",1,"gs::_TGame__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TGame__isset::name",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGame__isset,0))){
    SWIG_fail_ptr("_TGame__isset_name_set",1,SWIGTYPE_p_gs___TGame__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGame__isset_name_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGame__isset *arg1 = (gs::_TGame__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TGame__isset::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGame__isset::name",1,"gs::_TGame__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGame__isset,0))){
    SWIG_fail_ptr("_TGame__isset_name_get",1,SWIGTYPE_p_gs___TGame__isset);
  }
  
  result = (bool) ((arg1)->name);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGame__isset_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGame__isset *arg1 = (gs::_TGame__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TGame__isset::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGame__isset::data",1,"gs::_TGame__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TGame__isset::data",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGame__isset,0))){
    SWIG_fail_ptr("_TGame__isset_data_set",1,SWIGTYPE_p_gs___TGame__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->data = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGame__isset_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGame__isset *arg1 = (gs::_TGame__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TGame__isset::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGame__isset::data",1,"gs::_TGame__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGame__isset,0))){
    SWIG_fail_ptr("_TGame__isset_data_get",1,SWIGTYPE_p_gs___TGame__isset);
  }
  
  result = (bool) ((arg1)->data);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TGame__isset(void *obj) {
gs::_TGame__isset *arg1 = (gs::_TGame__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TGame__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TGame__isset_attributes[] = {
    { "name", _wrap__TGame__isset_name_get, _wrap__TGame__isset_name_set},
    { "data", _wrap__TGame__isset_data_get, _wrap__TGame__isset_data_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TGame__isset_bases[] = {0};
static const char *swig_gs__TGame__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TGame__isset = { "_TGame__isset", &SWIGTYPE_p_gs___TGame__isset,_wrap_new__TGame__isset, swig_delete__TGame__isset, swig_gs__TGame__isset_methods, swig_gs__TGame__isset_attributes, swig_gs__TGame__isset_bases, swig_gs__TGame__isset_base_names };

static int _wrap_TGame_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TGame::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TGame::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TGame::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TGame::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TGame::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::ascii_fingerprint",0,0)
  result = (char *)gs::TGame::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TGame::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TGame(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::TGame",0,0)
  result = (gs::TGame *)new gs::TGame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TGame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_name_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TGame::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::name",1,"gs::TGame *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TGame::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_name_set",1,SWIGTYPE_p_gs__TGame);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_name_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::name",1,"gs::TGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_name_get",1,SWIGTYPE_p_gs__TGame);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_data_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TGame::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::data",1,"gs::TGame *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TGame::data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_data_set",1,SWIGTYPE_p_gs__TGame);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->data = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_data_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::data",1,"gs::TGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_data_get",1,SWIGTYPE_p_gs__TGame);
  }
  
  result = (std::string *) & ((arg1)->data);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  gs::_TGame__isset *arg2 = (gs::_TGame__isset *) 0 ;
  
  SWIG_check_num_args("gs::TGame::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::__isset",1,"gs::TGame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGame::__isset",2,"gs::_TGame__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___isset_set",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TGame__isset,0))){
    SWIG_fail_ptr("TGame___isset_set",2,SWIGTYPE_p_gs___TGame__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  gs::_TGame__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TGame::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::__isset",1,"gs::TGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___isset_get",1,SWIGTYPE_p_gs__TGame);
  }
  
  result = (gs::_TGame__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TGame__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___set_name(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TGame::__set_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::__set_name",1,"gs::TGame *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TGame::__set_name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___set_name",1,SWIGTYPE_p_gs__TGame);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_name((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___set_data(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TGame::__set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::__set_data",1,"gs::TGame *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TGame::__set_data",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___set_data",1,SWIGTYPE_p_gs__TGame);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_data((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  gs::TGame *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TGame::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::operator ==",1,"gs::TGame const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TGame::operator ==",2,"gs::TGame const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___eq",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___eq",2,SWIGTYPE_p_gs__TGame);
  }
  
  result = (bool)((gs::TGame const *)arg1)->operator ==((gs::TGame const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  gs::TGame *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TGame::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::operator <",1,"gs::TGame const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TGame::operator <",2,"gs::TGame const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___lt",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame___lt",2,SWIGTYPE_p_gs__TGame);
  }
  
  result = (bool)((gs::TGame const *)arg1)->operator <((gs::TGame const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TGame::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::read",1,"gs::TGame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGame::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_read",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TGame_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGame_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = (gs::TGame *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TGame::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGame::write",1,"gs::TGame const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGame::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("TGame_write",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TGame_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TGame const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TGame(void *obj) {
gs::TGame *arg1 = (gs::TGame *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TGame_methods[] = {
    {"__set_name", _wrap_TGame___set_name}, 
    {"__set_data", _wrap_TGame___set_data}, 
    {"__eq", _wrap_TGame___eq}, 
    {"__lt", _wrap_TGame___lt}, 
    {"read", _wrap_TGame_read}, 
    {"write", _wrap_TGame_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TGame_attributes[] = {
    { "name", _wrap_TGame_name_get, _wrap_TGame_name_set},
    { "data", _wrap_TGame_data_get, _wrap_TGame_data_set},
    { "__isset", _wrap_TGame___isset_get, _wrap_TGame___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TGame_bases[] = {0};
static const char *swig_gs_TGame_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TGame = { "TGame", &SWIGTYPE_p_gs__TGame,_wrap_new_TGame, swig_delete_TGame, swig_gs_TGame_methods, swig_gs_TGame_attributes, swig_gs_TGame_bases, swig_gs_TGame_base_names };

static int _wrap_swap__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGame *arg1 = 0 ;
  gs::TGame *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TGame &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TGame &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGame,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TGame);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TMode__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TMode__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TMode__isset::_TMode__isset",0,0)
  result = (gs::_TMode__isset *)new gs::_TMode__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TMode__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TMode__isset_modeNr_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TMode__isset *arg1 = (gs::_TMode__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TMode__isset::modeNr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TMode__isset::modeNr",1,"gs::_TMode__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TMode__isset::modeNr",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TMode__isset,0))){
    SWIG_fail_ptr("_TMode__isset_modeNr_set",1,SWIGTYPE_p_gs___TMode__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->modeNr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TMode__isset_modeNr_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TMode__isset *arg1 = (gs::_TMode__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TMode__isset::modeNr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TMode__isset::modeNr",1,"gs::_TMode__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TMode__isset,0))){
    SWIG_fail_ptr("_TMode__isset_modeNr_get",1,SWIGTYPE_p_gs___TMode__isset);
  }
  
  result = (bool) ((arg1)->modeNr);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TMode__isset(void *obj) {
gs::_TMode__isset *arg1 = (gs::_TMode__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TMode__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TMode__isset_attributes[] = {
    { "modeNr", _wrap__TMode__isset_modeNr_get, _wrap__TMode__isset_modeNr_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TMode__isset_bases[] = {0};
static const char *swig_gs__TMode__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TMode__isset = { "_TMode__isset", &SWIGTYPE_p_gs___TMode__isset,_wrap_new__TMode__isset, swig_delete__TMode__isset, swig_gs__TMode__isset_methods, swig_gs__TMode__isset_attributes, swig_gs__TMode__isset_bases, swig_gs__TMode__isset_base_names };

static int _wrap_TMode_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TMode::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TMode::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TMode::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TMode::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TMode::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TMode::ascii_fingerprint",0,0)
  result = (char *)gs::TMode::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TMode::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TMode::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TMode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *result = 0 ;
  
  SWIG_check_num_args("gs::TMode::TMode",0,0)
  result = (gs::TMode *)new gs::TMode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TMode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_modeNr_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TMode::modeNr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::modeNr",1,"gs::TMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TMode::modeNr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode_modeNr_set",1,SWIGTYPE_p_gs__TMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->modeNr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_modeNr_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TMode::modeNr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::modeNr",1,"gs::TMode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode_modeNr_get",1,SWIGTYPE_p_gs__TMode);
  }
  
  result = (int) ((arg1)->modeNr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  gs::_TMode__isset *arg2 = (gs::_TMode__isset *) 0 ;
  
  SWIG_check_num_args("gs::TMode::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::__isset",1,"gs::TMode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TMode::__isset",2,"gs::_TMode__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___isset_set",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TMode__isset,0))){
    SWIG_fail_ptr("TMode___isset_set",2,SWIGTYPE_p_gs___TMode__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  gs::_TMode__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TMode::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::__isset",1,"gs::TMode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___isset_get",1,SWIGTYPE_p_gs__TMode);
  }
  
  result = (gs::_TMode__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TMode__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode___set_modeNr(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TMode::__set_modeNr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::__set_modeNr",1,"gs::TMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TMode::__set_modeNr",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___set_modeNr",1,SWIGTYPE_p_gs__TMode);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_modeNr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  gs::TMode *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TMode::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::operator ==",1,"gs::TMode const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TMode::operator ==",2,"gs::TMode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___eq",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___eq",2,SWIGTYPE_p_gs__TMode);
  }
  
  result = (bool)((gs::TMode const *)arg1)->operator ==((gs::TMode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  gs::TMode *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TMode::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::operator <",1,"gs::TMode const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TMode::operator <",2,"gs::TMode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___lt",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode___lt",2,SWIGTYPE_p_gs__TMode);
  }
  
  result = (bool)((gs::TMode const *)arg1)->operator <((gs::TMode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TMode::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::read",1,"gs::TMode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TMode::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode_read",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TMode_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TMode_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = (gs::TMode *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TMode::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TMode::write",1,"gs::TMode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TMode::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("TMode_write",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TMode_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TMode const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TMode(void *obj) {
gs::TMode *arg1 = (gs::TMode *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TMode_methods[] = {
    {"__set_modeNr", _wrap_TMode___set_modeNr}, 
    {"__eq", _wrap_TMode___eq}, 
    {"__lt", _wrap_TMode___lt}, 
    {"read", _wrap_TMode_read}, 
    {"write", _wrap_TMode_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TMode_attributes[] = {
    { "modeNr", _wrap_TMode_modeNr_get, _wrap_TMode_modeNr_set},
    { "__isset", _wrap_TMode___isset_get, _wrap_TMode___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TMode_bases[] = {0};
static const char *swig_gs_TMode_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TMode = { "TMode", &SWIGTYPE_p_gs__TMode,_wrap_new_TMode, swig_delete_TMode, swig_gs_TMode_methods, swig_gs_TMode_attributes, swig_gs_TMode_bases, swig_gs_TMode_base_names };

static int _wrap_swap__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gs::TMode *arg1 = 0 ;
  gs::TMode *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TMode &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TMode,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TMode);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TRegInfo__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TRegInfo__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TRegInfo__isset::_TRegInfo__isset",0,0)
  result = (gs::_TRegInfo__isset *)new gs::_TRegInfo__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TRegInfo__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TRegInfo__isset_register_date_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TRegInfo__isset *arg1 = (gs::_TRegInfo__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TRegInfo__isset::register_date",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TRegInfo__isset::register_date",1,"gs::_TRegInfo__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TRegInfo__isset::register_date",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TRegInfo__isset,0))){
    SWIG_fail_ptr("_TRegInfo__isset_register_date_set",1,SWIGTYPE_p_gs___TRegInfo__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->register_date = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TRegInfo__isset_register_date_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TRegInfo__isset *arg1 = (gs::_TRegInfo__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TRegInfo__isset::register_date",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TRegInfo__isset::register_date",1,"gs::_TRegInfo__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TRegInfo__isset,0))){
    SWIG_fail_ptr("_TRegInfo__isset_register_date_get",1,SWIGTYPE_p_gs___TRegInfo__isset);
  }
  
  result = (bool) ((arg1)->register_date);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TRegInfo__isset_amount_logins_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TRegInfo__isset *arg1 = (gs::_TRegInfo__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TRegInfo__isset::amount_logins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TRegInfo__isset::amount_logins",1,"gs::_TRegInfo__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TRegInfo__isset::amount_logins",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TRegInfo__isset,0))){
    SWIG_fail_ptr("_TRegInfo__isset_amount_logins_set",1,SWIGTYPE_p_gs___TRegInfo__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->amount_logins = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TRegInfo__isset_amount_logins_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TRegInfo__isset *arg1 = (gs::_TRegInfo__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TRegInfo__isset::amount_logins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TRegInfo__isset::amount_logins",1,"gs::_TRegInfo__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TRegInfo__isset,0))){
    SWIG_fail_ptr("_TRegInfo__isset_amount_logins_get",1,SWIGTYPE_p_gs___TRegInfo__isset);
  }
  
  result = (bool) ((arg1)->amount_logins);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TRegInfo__isset(void *obj) {
gs::_TRegInfo__isset *arg1 = (gs::_TRegInfo__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TRegInfo__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TRegInfo__isset_attributes[] = {
    { "register_date", _wrap__TRegInfo__isset_register_date_get, _wrap__TRegInfo__isset_register_date_set},
    { "amount_logins", _wrap__TRegInfo__isset_amount_logins_get, _wrap__TRegInfo__isset_amount_logins_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TRegInfo__isset_bases[] = {0};
static const char *swig_gs__TRegInfo__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TRegInfo__isset = { "_TRegInfo__isset", &SWIGTYPE_p_gs___TRegInfo__isset,_wrap_new__TRegInfo__isset, swig_delete__TRegInfo__isset, swig_gs__TRegInfo__isset_methods, swig_gs__TRegInfo__isset_attributes, swig_gs__TRegInfo__isset_bases, swig_gs__TRegInfo__isset_base_names };

static int _wrap_TRegInfo_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TRegInfo::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TRegInfo::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TRegInfo::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TRegInfo::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::ascii_fingerprint",0,0)
  result = (char *)gs::TRegInfo::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TRegInfo::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TRegInfo(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *result = 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::TRegInfo",0,0)
  result = (gs::TRegInfo *)new gs::TRegInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TRegInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_register_date_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("gs::TRegInfo::register_date",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::register_date",1,"gs::TRegInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TRegInfo::register_date",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_register_date_set",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("TRegInfo_register_date_set",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->register_date = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_register_date_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("gs::TRegInfo::register_date",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::register_date",1,"gs::TRegInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_register_date_get",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  result =  ((arg1)->register_date);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_amount_logins_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TRegInfo::amount_logins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::amount_logins",1,"gs::TRegInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TRegInfo::amount_logins",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_amount_logins_set",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->amount_logins = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_amount_logins_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TRegInfo::amount_logins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::amount_logins",1,"gs::TRegInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_amount_logins_get",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  result = (int) ((arg1)->amount_logins);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  gs::_TRegInfo__isset *arg2 = (gs::_TRegInfo__isset *) 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::__isset",1,"gs::TRegInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TRegInfo::__isset",2,"gs::_TRegInfo__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___isset_set",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TRegInfo__isset,0))){
    SWIG_fail_ptr("TRegInfo___isset_set",2,SWIGTYPE_p_gs___TRegInfo__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  gs::_TRegInfo__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TRegInfo::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::__isset",1,"gs::TRegInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___isset_get",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  result = (gs::_TRegInfo__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TRegInfo__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___set_register_date(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("gs::TRegInfo::__set_register_date",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::__set_register_date",1,"gs::TRegInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TRegInfo::__set_register_date",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___set_register_date",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("TRegInfo___set_register_date",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  (arg1)->__set_register_date(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___set_amount_logins(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TRegInfo::__set_amount_logins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::__set_amount_logins",1,"gs::TRegInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TRegInfo::__set_amount_logins",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___set_amount_logins",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_amount_logins(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  gs::TRegInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TRegInfo::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::operator ==",1,"gs::TRegInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TRegInfo::operator ==",2,"gs::TRegInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___eq",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___eq",2,SWIGTYPE_p_gs__TRegInfo);
  }
  
  result = (bool)((gs::TRegInfo const *)arg1)->operator ==((gs::TRegInfo const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  gs::TRegInfo *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TRegInfo::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::operator <",1,"gs::TRegInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TRegInfo::operator <",2,"gs::TRegInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___lt",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo___lt",2,SWIGTYPE_p_gs__TRegInfo);
  }
  
  result = (bool)((gs::TRegInfo const *)arg1)->operator <((gs::TRegInfo const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TRegInfo::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::read",1,"gs::TRegInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TRegInfo::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_read",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TRegInfo_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TRegInfo_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = (gs::TRegInfo *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TRegInfo::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TRegInfo::write",1,"gs::TRegInfo const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TRegInfo::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("TRegInfo_write",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TRegInfo_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TRegInfo const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TRegInfo(void *obj) {
gs::TRegInfo *arg1 = (gs::TRegInfo *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TRegInfo_methods[] = {
    {"__set_register_date", _wrap_TRegInfo___set_register_date}, 
    {"__set_amount_logins", _wrap_TRegInfo___set_amount_logins}, 
    {"__eq", _wrap_TRegInfo___eq}, 
    {"__lt", _wrap_TRegInfo___lt}, 
    {"read", _wrap_TRegInfo_read}, 
    {"write", _wrap_TRegInfo_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TRegInfo_attributes[] = {
    { "register_date", _wrap_TRegInfo_register_date_get, _wrap_TRegInfo_register_date_set},
    { "amount_logins", _wrap_TRegInfo_amount_logins_get, _wrap_TRegInfo_amount_logins_set},
    { "__isset", _wrap_TRegInfo___isset_get, _wrap_TRegInfo___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TRegInfo_bases[] = {0};
static const char *swig_gs_TRegInfo_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TRegInfo = { "TRegInfo", &SWIGTYPE_p_gs__TRegInfo,_wrap_new_TRegInfo, swig_delete_TRegInfo, swig_gs_TRegInfo_methods, swig_gs_TRegInfo_attributes, swig_gs_TRegInfo_bases, swig_gs_TRegInfo_base_names };

static int _wrap_swap__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gs::TRegInfo *arg1 = 0 ;
  gs::TRegInfo *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TRegInfo &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TRegInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TRegInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TRegInfo,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TRegInfo);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TAddScoreResponse__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::_TAddScoreResponse__isset",0,0)
  result = (gs::_TAddScoreResponse__isset *)new gs::_TAddScoreResponse__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TAddScoreResponse__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::pos",1,"gs::_TAddScoreResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::pos",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_pos_set",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::pos",1,"gs::_TAddScoreResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_pos_get",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  result = (bool) ((arg1)->pos);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::result_code",1,"gs::_TAddScoreResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::result_code",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_result_code_set",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::result_code",1,"gs::_TAddScoreResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_result_code_get",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  result = (bool) ((arg1)->result_code);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_os_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::os",1,"gs::_TAddScoreResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::os",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_os_set",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->os = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAddScoreResponse__isset_os_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAddScoreResponse__isset::os",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAddScoreResponse__isset::os",1,"gs::_TAddScoreResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("_TAddScoreResponse__isset_os_get",1,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  result = (bool) ((arg1)->os);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TAddScoreResponse__isset(void *obj) {
gs::_TAddScoreResponse__isset *arg1 = (gs::_TAddScoreResponse__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TAddScoreResponse__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TAddScoreResponse__isset_attributes[] = {
    { "pos", _wrap__TAddScoreResponse__isset_pos_get, _wrap__TAddScoreResponse__isset_pos_set},
    { "result_code", _wrap__TAddScoreResponse__isset_result_code_get, _wrap__TAddScoreResponse__isset_result_code_set},
    { "os", _wrap__TAddScoreResponse__isset_os_get, _wrap__TAddScoreResponse__isset_os_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TAddScoreResponse__isset_bases[] = {0};
static const char *swig_gs__TAddScoreResponse__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TAddScoreResponse__isset = { "_TAddScoreResponse__isset", &SWIGTYPE_p_gs___TAddScoreResponse__isset,_wrap_new__TAddScoreResponse__isset, swig_delete__TAddScoreResponse__isset, swig_gs__TAddScoreResponse__isset_methods, swig_gs__TAddScoreResponse__isset_attributes, swig_gs__TAddScoreResponse__isset_bases, swig_gs__TAddScoreResponse__isset_base_names };

static int _wrap_TAddScoreResponse_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TAddScoreResponse::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TAddScoreResponse::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TAddScoreResponse::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::ascii_fingerprint",0,0)
  result = (char *)gs::TAddScoreResponse::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TAddScoreResponse::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TAddScoreResponse(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *result = 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::TAddScoreResponse",0,0)
  result = (gs::TAddScoreResponse *)new gs::TAddScoreResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TAddScoreResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::pos",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_pos_set",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::pos",1,"gs::TAddScoreResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_pos_get",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (int) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::TAddScoreResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::result_code",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::result_code",2,"gs::TAddScoreResultCode::type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_result_code_set",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (gs::TAddScoreResultCode::type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::TAddScoreResultCode::type result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::result_code",1,"gs::TAddScoreResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_result_code_get",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (gs::TAddScoreResultCode::type) ((arg1)->result_code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_os_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::os",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::os",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_os_set",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->os = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_os_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::os",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::os",1,"gs::TAddScoreResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_os_get",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (int) ((arg1)->os);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::_TAddScoreResponse__isset *arg2 = (gs::_TAddScoreResponse__isset *) 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::__isset",1,"gs::TAddScoreResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::__isset",2,"gs::_TAddScoreResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___isset_set",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TAddScoreResponse__isset,0))){
    SWIG_fail_ptr("TAddScoreResponse___isset_set",2,SWIGTYPE_p_gs___TAddScoreResponse__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::_TAddScoreResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::__isset",1,"gs::TAddScoreResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___isset_get",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (gs::_TAddScoreResponse__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TAddScoreResponse__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___set_pos(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::__set_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::__set_pos",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::__set_pos",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___set_pos",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_pos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___set_result_code(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::TAddScoreResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::__set_result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::__set_result_code",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::__set_result_code",2,"gs::TAddScoreResultCode::type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___set_result_code",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (gs::TAddScoreResultCode::type const)(int)lua_tonumber(L, 2);
  (arg1)->__set_result_code(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___set_os(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TAddScoreResponse::__set_os",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::__set_os",1,"gs::TAddScoreResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::__set_os",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___set_os",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_os(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::TAddScoreResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::operator ==",1,"gs::TAddScoreResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::operator ==",2,"gs::TAddScoreResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___eq",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___eq",2,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (bool)((gs::TAddScoreResponse const *)arg1)->operator ==((gs::TAddScoreResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  gs::TAddScoreResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::operator <",1,"gs::TAddScoreResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::operator <",2,"gs::TAddScoreResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___lt",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse___lt",2,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  result = (bool)((gs::TAddScoreResponse const *)arg1)->operator <((gs::TAddScoreResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::read",1,"gs::TAddScoreResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_read",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TAddScoreResponse_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAddScoreResponse_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TAddScoreResponse::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAddScoreResponse::write",1,"gs::TAddScoreResponse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAddScoreResponse::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("TAddScoreResponse_write",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TAddScoreResponse_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TAddScoreResponse const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TAddScoreResponse(void *obj) {
gs::TAddScoreResponse *arg1 = (gs::TAddScoreResponse *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TAddScoreResponse_methods[] = {
    {"__set_pos", _wrap_TAddScoreResponse___set_pos}, 
    {"__set_result_code", _wrap_TAddScoreResponse___set_result_code}, 
    {"__set_os", _wrap_TAddScoreResponse___set_os}, 
    {"__eq", _wrap_TAddScoreResponse___eq}, 
    {"__lt", _wrap_TAddScoreResponse___lt}, 
    {"read", _wrap_TAddScoreResponse_read}, 
    {"write", _wrap_TAddScoreResponse_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TAddScoreResponse_attributes[] = {
    { "pos", _wrap_TAddScoreResponse_pos_get, _wrap_TAddScoreResponse_pos_set},
    { "result_code", _wrap_TAddScoreResponse_result_code_get, _wrap_TAddScoreResponse_result_code_set},
    { "os", _wrap_TAddScoreResponse_os_get, _wrap_TAddScoreResponse_os_set},
    { "__isset", _wrap_TAddScoreResponse___isset_get, _wrap_TAddScoreResponse___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TAddScoreResponse_bases[] = {0};
static const char *swig_gs_TAddScoreResponse_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TAddScoreResponse = { "TAddScoreResponse", &SWIGTYPE_p_gs__TAddScoreResponse,_wrap_new_TAddScoreResponse, swig_delete_TAddScoreResponse, swig_gs_TAddScoreResponse_methods, swig_gs_TAddScoreResponse_attributes, swig_gs_TAddScoreResponse_bases, swig_gs_TAddScoreResponse_base_names };

static int _wrap_swap__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAddScoreResponse *arg1 = 0 ;
  gs::TAddScoreResponse *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TAddScoreResponse &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TAddScoreResponse &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAddScoreResponse,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TAddScoreResponse);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TLoginResponse__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TLoginResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TLoginResponse__isset::_TLoginResponse__isset",0,0)
  result = (gs::_TLoginResponse__isset *)new gs::_TLoginResponse__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TLoginResponse__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TLoginResponse__isset_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TLoginResponse__isset *arg1 = (gs::_TLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TLoginResponse__isset::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TLoginResponse__isset::result_code",1,"gs::_TLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TLoginResponse__isset::result_code",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TLoginResponse__isset,0))){
    SWIG_fail_ptr("_TLoginResponse__isset_result_code_set",1,SWIGTYPE_p_gs___TLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TLoginResponse__isset_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TLoginResponse__isset *arg1 = (gs::_TLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TLoginResponse__isset::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TLoginResponse__isset::result_code",1,"gs::_TLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TLoginResponse__isset,0))){
    SWIG_fail_ptr("_TLoginResponse__isset_result_code_get",1,SWIGTYPE_p_gs___TLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->result_code);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TLoginResponse__isset_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TLoginResponse__isset *arg1 = (gs::_TLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TLoginResponse__isset::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TLoginResponse__isset::user",1,"gs::_TLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TLoginResponse__isset::user",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TLoginResponse__isset,0))){
    SWIG_fail_ptr("_TLoginResponse__isset_user_set",1,SWIGTYPE_p_gs___TLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->user = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TLoginResponse__isset_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TLoginResponse__isset *arg1 = (gs::_TLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TLoginResponse__isset::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TLoginResponse__isset::user",1,"gs::_TLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TLoginResponse__isset,0))){
    SWIG_fail_ptr("_TLoginResponse__isset_user_get",1,SWIGTYPE_p_gs___TLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->user);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TLoginResponse__isset(void *obj) {
gs::_TLoginResponse__isset *arg1 = (gs::_TLoginResponse__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TLoginResponse__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TLoginResponse__isset_attributes[] = {
    { "result_code", _wrap__TLoginResponse__isset_result_code_get, _wrap__TLoginResponse__isset_result_code_set},
    { "user", _wrap__TLoginResponse__isset_user_get, _wrap__TLoginResponse__isset_user_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TLoginResponse__isset_bases[] = {0};
static const char *swig_gs__TLoginResponse__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TLoginResponse__isset = { "_TLoginResponse__isset", &SWIGTYPE_p_gs___TLoginResponse__isset,_wrap_new__TLoginResponse__isset, swig_delete__TLoginResponse__isset, swig_gs__TLoginResponse__isset_methods, swig_gs__TLoginResponse__isset_attributes, swig_gs__TLoginResponse__isset_bases, swig_gs__TLoginResponse__isset_base_names };

static int _wrap_TLoginResponse_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TLoginResponse::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TLoginResponse::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TLoginResponse::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TLoginResponse::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::ascii_fingerprint",0,0)
  result = (char *)gs::TLoginResponse::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TLoginResponse::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TLoginResponse(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::TLoginResponse",0,0)
  result = (gs::TLoginResponse *)new gs::TLoginResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TLoginResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TLoginResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TLoginResponse::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::result_code",1,"gs::TLoginResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TLoginResponse::result_code",2,"gs::TLoginResultCode::type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_result_code_set",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  arg2 = (gs::TLoginResultCode::type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TLoginResultCode::type result;
  
  SWIG_check_num_args("gs::TLoginResponse::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::result_code",1,"gs::TLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_result_code_get",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  result = (gs::TLoginResultCode::type) ((arg1)->result_code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TUser *arg2 = (gs::TUser *) 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::user",1,"gs::TLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TLoginResponse::user",2,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_user_set",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TLoginResponse_user_set",2,SWIGTYPE_p_gs__TUser);
  }
  
  if (arg1) (arg1)->user = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TUser *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::user",1,"gs::TLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_user_get",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  result = (gs::TUser *)& ((arg1)->user);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::_TLoginResponse__isset *arg2 = (gs::_TLoginResponse__isset *) 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::__isset",1,"gs::TLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TLoginResponse::__isset",2,"gs::_TLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___isset_set",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TLoginResponse__isset,0))){
    SWIG_fail_ptr("TLoginResponse___isset_set",2,SWIGTYPE_p_gs___TLoginResponse__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::_TLoginResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::__isset",1,"gs::TLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___isset_get",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  result = (gs::_TLoginResponse__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TLoginResponse__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___set_result_code(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TLoginResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TLoginResponse::__set_result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::__set_result_code",1,"gs::TLoginResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TLoginResponse::__set_result_code",2,"gs::TLoginResultCode::type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___set_result_code",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  arg2 = (gs::TLoginResultCode::type const)(int)lua_tonumber(L, 2);
  (arg1)->__set_result_code(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___set_user(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TUser *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TLoginResponse::__set_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::__set_user",1,"gs::TLoginResponse *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TLoginResponse::__set_user",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___set_user",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TLoginResponse___set_user",2,SWIGTYPE_p_gs__TUser);
  }
  
  (arg1)->__set_user((gs::TUser const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TLoginResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TLoginResponse::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::operator ==",1,"gs::TLoginResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TLoginResponse::operator ==",2,"gs::TLoginResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___eq",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___eq",2,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  result = (bool)((gs::TLoginResponse const *)arg1)->operator ==((gs::TLoginResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  gs::TLoginResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TLoginResponse::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::operator <",1,"gs::TLoginResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TLoginResponse::operator <",2,"gs::TLoginResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___lt",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse___lt",2,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  result = (bool)((gs::TLoginResponse const *)arg1)->operator <((gs::TLoginResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TLoginResponse::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::read",1,"gs::TLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TLoginResponse::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_read",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TLoginResponse_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TLoginResponse_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = (gs::TLoginResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TLoginResponse::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TLoginResponse::write",1,"gs::TLoginResponse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TLoginResponse::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("TLoginResponse_write",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TLoginResponse_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TLoginResponse const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TLoginResponse(void *obj) {
gs::TLoginResponse *arg1 = (gs::TLoginResponse *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TLoginResponse_methods[] = {
    {"__set_result_code", _wrap_TLoginResponse___set_result_code}, 
    {"__set_user", _wrap_TLoginResponse___set_user}, 
    {"__eq", _wrap_TLoginResponse___eq}, 
    {"__lt", _wrap_TLoginResponse___lt}, 
    {"read", _wrap_TLoginResponse_read}, 
    {"write", _wrap_TLoginResponse_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TLoginResponse_attributes[] = {
    { "result_code", _wrap_TLoginResponse_result_code_get, _wrap_TLoginResponse_result_code_set},
    { "user", _wrap_TLoginResponse_user_get, _wrap_TLoginResponse_user_set},
    { "__isset", _wrap_TLoginResponse___isset_get, _wrap_TLoginResponse___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TLoginResponse_bases[] = {0};
static const char *swig_gs_TLoginResponse_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TLoginResponse = { "TLoginResponse", &SWIGTYPE_p_gs__TLoginResponse,_wrap_new_TLoginResponse, swig_delete_TLoginResponse, swig_gs_TLoginResponse_methods, swig_gs_TLoginResponse_attributes, swig_gs_TLoginResponse_bases, swig_gs_TLoginResponse_base_names };

static int _wrap_swap__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  gs::TLoginResponse *arg1 = 0 ;
  gs::TLoginResponse *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TLoginResponse &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TLoginResponse &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TLoginResponse,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TLoginResponse);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TGetUserResponse__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGetUserResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TGetUserResponse__isset::_TGetUserResponse__isset",0,0)
  result = (gs::_TGetUserResponse__isset *)new gs::_TGetUserResponse__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TGetUserResponse__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGetUserResponse__isset_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGetUserResponse__isset *arg1 = (gs::_TGetUserResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TGetUserResponse__isset::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGetUserResponse__isset::result_code",1,"gs::_TGetUserResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TGetUserResponse__isset::result_code",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGetUserResponse__isset,0))){
    SWIG_fail_ptr("_TGetUserResponse__isset_result_code_set",1,SWIGTYPE_p_gs___TGetUserResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGetUserResponse__isset_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGetUserResponse__isset *arg1 = (gs::_TGetUserResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TGetUserResponse__isset::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGetUserResponse__isset::result_code",1,"gs::_TGetUserResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGetUserResponse__isset,0))){
    SWIG_fail_ptr("_TGetUserResponse__isset_result_code_get",1,SWIGTYPE_p_gs___TGetUserResponse__isset);
  }
  
  result = (bool) ((arg1)->result_code);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGetUserResponse__isset_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGetUserResponse__isset *arg1 = (gs::_TGetUserResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TGetUserResponse__isset::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGetUserResponse__isset::user",1,"gs::_TGetUserResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TGetUserResponse__isset::user",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGetUserResponse__isset,0))){
    SWIG_fail_ptr("_TGetUserResponse__isset_user_set",1,SWIGTYPE_p_gs___TGetUserResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->user = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TGetUserResponse__isset_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TGetUserResponse__isset *arg1 = (gs::_TGetUserResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TGetUserResponse__isset::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TGetUserResponse__isset::user",1,"gs::_TGetUserResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TGetUserResponse__isset,0))){
    SWIG_fail_ptr("_TGetUserResponse__isset_user_get",1,SWIGTYPE_p_gs___TGetUserResponse__isset);
  }
  
  result = (bool) ((arg1)->user);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TGetUserResponse__isset(void *obj) {
gs::_TGetUserResponse__isset *arg1 = (gs::_TGetUserResponse__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TGetUserResponse__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TGetUserResponse__isset_attributes[] = {
    { "result_code", _wrap__TGetUserResponse__isset_result_code_get, _wrap__TGetUserResponse__isset_result_code_set},
    { "user", _wrap__TGetUserResponse__isset_user_get, _wrap__TGetUserResponse__isset_user_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TGetUserResponse__isset_bases[] = {0};
static const char *swig_gs__TGetUserResponse__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TGetUserResponse__isset = { "_TGetUserResponse__isset", &SWIGTYPE_p_gs___TGetUserResponse__isset,_wrap_new__TGetUserResponse__isset, swig_delete__TGetUserResponse__isset, swig_gs__TGetUserResponse__isset_methods, swig_gs__TGetUserResponse__isset_attributes, swig_gs__TGetUserResponse__isset_bases, swig_gs__TGetUserResponse__isset_base_names };

static int _wrap_TGetUserResponse_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TGetUserResponse::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TGetUserResponse::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TGetUserResponse::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TGetUserResponse::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::ascii_fingerprint",0,0)
  result = (char *)gs::TGetUserResponse::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TGetUserResponse::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TGetUserResponse(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::TGetUserResponse",0,0)
  result = (gs::TGetUserResponse *)new gs::TGetUserResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TGetUserResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_result_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TGetUserResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::result_code",1,"gs::TGetUserResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TGetUserResponse::result_code",2,"gs::TGetUserResultCode::type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_result_code_set",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  arg2 = (gs::TGetUserResultCode::type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->result_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_result_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TGetUserResultCode::type result;
  
  SWIG_check_num_args("gs::TGetUserResponse::result_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::result_code",1,"gs::TGetUserResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_result_code_get",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  result = (gs::TGetUserResultCode::type) ((arg1)->result_code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TUser *arg2 = (gs::TUser *) 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::user",1,"gs::TGetUserResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGetUserResponse::user",2,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_user_set",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TGetUserResponse_user_set",2,SWIGTYPE_p_gs__TUser);
  }
  
  if (arg1) (arg1)->user = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TUser *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::user",1,"gs::TGetUserResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_user_get",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  result = (gs::TUser *)& ((arg1)->user);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::_TGetUserResponse__isset *arg2 = (gs::_TGetUserResponse__isset *) 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::__isset",1,"gs::TGetUserResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGetUserResponse::__isset",2,"gs::_TGetUserResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___isset_set",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TGetUserResponse__isset,0))){
    SWIG_fail_ptr("TGetUserResponse___isset_set",2,SWIGTYPE_p_gs___TGetUserResponse__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::_TGetUserResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::__isset",1,"gs::TGetUserResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___isset_get",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  result = (gs::_TGetUserResponse__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TGetUserResponse__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___set_result_code(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TGetUserResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::__set_result_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::__set_result_code",1,"gs::TGetUserResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TGetUserResponse::__set_result_code",2,"gs::TGetUserResultCode::type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___set_result_code",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  arg2 = (gs::TGetUserResultCode::type const)(int)lua_tonumber(L, 2);
  (arg1)->__set_result_code(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___set_user(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TUser *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TGetUserResponse::__set_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::__set_user",1,"gs::TGetUserResponse *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TGetUserResponse::__set_user",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___set_user",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TGetUserResponse___set_user",2,SWIGTYPE_p_gs__TUser);
  }
  
  (arg1)->__set_user((gs::TUser const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TGetUserResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TGetUserResponse::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::operator ==",1,"gs::TGetUserResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TGetUserResponse::operator ==",2,"gs::TGetUserResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___eq",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___eq",2,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  result = (bool)((gs::TGetUserResponse const *)arg1)->operator ==((gs::TGetUserResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  gs::TGetUserResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TGetUserResponse::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::operator <",1,"gs::TGetUserResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TGetUserResponse::operator <",2,"gs::TGetUserResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___lt",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse___lt",2,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  result = (bool)((gs::TGetUserResponse const *)arg1)->operator <((gs::TGetUserResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TGetUserResponse::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::read",1,"gs::TGetUserResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGetUserResponse::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_read",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TGetUserResponse_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TGetUserResponse_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TGetUserResponse::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TGetUserResponse::write",1,"gs::TGetUserResponse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TGetUserResponse::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("TGetUserResponse_write",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TGetUserResponse_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TGetUserResponse const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TGetUserResponse(void *obj) {
gs::TGetUserResponse *arg1 = (gs::TGetUserResponse *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TGetUserResponse_methods[] = {
    {"__set_result_code", _wrap_TGetUserResponse___set_result_code}, 
    {"__set_user", _wrap_TGetUserResponse___set_user}, 
    {"__eq", _wrap_TGetUserResponse___eq}, 
    {"__lt", _wrap_TGetUserResponse___lt}, 
    {"read", _wrap_TGetUserResponse_read}, 
    {"write", _wrap_TGetUserResponse_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TGetUserResponse_attributes[] = {
    { "result_code", _wrap_TGetUserResponse_result_code_get, _wrap_TGetUserResponse_result_code_set},
    { "user", _wrap_TGetUserResponse_user_get, _wrap_TGetUserResponse_user_set},
    { "__isset", _wrap_TGetUserResponse___isset_get, _wrap_TGetUserResponse___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TGetUserResponse_bases[] = {0};
static const char *swig_gs_TGetUserResponse_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TGetUserResponse = { "TGetUserResponse", &SWIGTYPE_p_gs__TGetUserResponse,_wrap_new_TGetUserResponse, swig_delete_TGetUserResponse, swig_gs_TGetUserResponse_methods, swig_gs_TGetUserResponse_attributes, swig_gs_TGetUserResponse_bases, swig_gs_TGetUserResponse_base_names };

static int _wrap_swap__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  gs::TGetUserResponse *arg1 = 0 ;
  gs::TGetUserResponse *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TGetUserResponse &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TGetUserResponse &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TGetUserResponse,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TGetUserResponse);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TErrorException__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TErrorException__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TErrorException__isset::_TErrorException__isset",0,0)
  result = (gs::_TErrorException__isset *)new gs::_TErrorException__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TErrorException__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TErrorException__isset_error_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TErrorException__isset *arg1 = (gs::_TErrorException__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TErrorException__isset::error_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TErrorException__isset::error_code",1,"gs::_TErrorException__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TErrorException__isset::error_code",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TErrorException__isset,0))){
    SWIG_fail_ptr("_TErrorException__isset_error_code_set",1,SWIGTYPE_p_gs___TErrorException__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->error_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TErrorException__isset_error_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TErrorException__isset *arg1 = (gs::_TErrorException__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TErrorException__isset::error_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TErrorException__isset::error_code",1,"gs::_TErrorException__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TErrorException__isset,0))){
    SWIG_fail_ptr("_TErrorException__isset_error_code_get",1,SWIGTYPE_p_gs___TErrorException__isset);
  }
  
  result = (bool) ((arg1)->error_code);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TErrorException__isset_error_msg_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TErrorException__isset *arg1 = (gs::_TErrorException__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TErrorException__isset::error_msg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TErrorException__isset::error_msg",1,"gs::_TErrorException__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TErrorException__isset::error_msg",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TErrorException__isset,0))){
    SWIG_fail_ptr("_TErrorException__isset_error_msg_set",1,SWIGTYPE_p_gs___TErrorException__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->error_msg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TErrorException__isset_error_msg_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TErrorException__isset *arg1 = (gs::_TErrorException__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TErrorException__isset::error_msg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TErrorException__isset::error_msg",1,"gs::_TErrorException__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TErrorException__isset,0))){
    SWIG_fail_ptr("_TErrorException__isset_error_msg_get",1,SWIGTYPE_p_gs___TErrorException__isset);
  }
  
  result = (bool) ((arg1)->error_msg);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TErrorException__isset(void *obj) {
gs::_TErrorException__isset *arg1 = (gs::_TErrorException__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TErrorException__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TErrorException__isset_attributes[] = {
    { "error_code", _wrap__TErrorException__isset_error_code_get, _wrap__TErrorException__isset_error_code_set},
    { "error_msg", _wrap__TErrorException__isset_error_msg_get, _wrap__TErrorException__isset_error_msg_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TErrorException__isset_bases[] = {0};
static const char *swig_gs__TErrorException__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TErrorException__isset = { "_TErrorException__isset", &SWIGTYPE_p_gs___TErrorException__isset,_wrap_new__TErrorException__isset, swig_delete__TErrorException__isset, swig_gs__TErrorException__isset_methods, swig_gs__TErrorException__isset_attributes, swig_gs__TErrorException__isset_bases, swig_gs__TErrorException__isset_base_names };

static int _wrap_TErrorException_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TErrorException::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TErrorException::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TErrorException::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TErrorException::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TErrorException::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TErrorException::ascii_fingerprint",0,0)
  result = (char *)gs::TErrorException::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TErrorException::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TErrorException::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TErrorException(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *result = 0 ;
  
  SWIG_check_num_args("gs::TErrorException::TErrorException",0,0)
  result = (gs::TErrorException *)new gs::TErrorException();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_error_code_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::ErrorCode::type arg2 ;
  
  SWIG_check_num_args("gs::TErrorException::error_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::error_code",1,"gs::TErrorException *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TErrorException::error_code",2,"gs::ErrorCode::type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_error_code_set",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  arg2 = (gs::ErrorCode::type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->error_code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_error_code_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::ErrorCode::type result;
  
  SWIG_check_num_args("gs::TErrorException::error_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::error_code",1,"gs::TErrorException *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_error_code_get",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  result = (gs::ErrorCode::type) ((arg1)->error_code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_error_msg_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TErrorException::error_msg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::error_msg",1,"gs::TErrorException *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TErrorException::error_msg",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_error_msg_set",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->error_msg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_error_msg_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TErrorException::error_msg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::error_msg",1,"gs::TErrorException *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_error_msg_get",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  result = (std::string *) & ((arg1)->error_msg);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::_TErrorException__isset *arg2 = (gs::_TErrorException__isset *) 0 ;
  
  SWIG_check_num_args("gs::TErrorException::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::__isset",1,"gs::TErrorException *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TErrorException::__isset",2,"gs::_TErrorException__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___isset_set",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TErrorException__isset,0))){
    SWIG_fail_ptr("TErrorException___isset_set",2,SWIGTYPE_p_gs___TErrorException__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::_TErrorException__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TErrorException::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::__isset",1,"gs::TErrorException *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___isset_get",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  result = (gs::_TErrorException__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TErrorException__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___set_error_code(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::ErrorCode::type arg2 ;
  
  SWIG_check_num_args("gs::TErrorException::__set_error_code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::__set_error_code",1,"gs::TErrorException *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TErrorException::__set_error_code",2,"gs::ErrorCode::type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___set_error_code",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  arg2 = (gs::ErrorCode::type const)(int)lua_tonumber(L, 2);
  (arg1)->__set_error_code(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___set_error_msg(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TErrorException::__set_error_msg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::__set_error_msg",1,"gs::TErrorException *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TErrorException::__set_error_msg",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___set_error_msg",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_error_msg((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::TErrorException *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TErrorException::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::operator ==",1,"gs::TErrorException const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TErrorException::operator ==",2,"gs::TErrorException const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___eq",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___eq",2,SWIGTYPE_p_gs__TErrorException);
  }
  
  result = (bool)((gs::TErrorException const *)arg1)->operator ==((gs::TErrorException const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  gs::TErrorException *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TErrorException::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::operator <",1,"gs::TErrorException const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TErrorException::operator <",2,"gs::TErrorException const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___lt",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException___lt",2,SWIGTYPE_p_gs__TErrorException);
  }
  
  result = (bool)((gs::TErrorException const *)arg1)->operator <((gs::TErrorException const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TErrorException::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::read",1,"gs::TErrorException *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TErrorException::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_read",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TErrorException_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TErrorException_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = (gs::TErrorException *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TErrorException::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TErrorException::write",1,"gs::TErrorException const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TErrorException::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("TErrorException_write",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TErrorException_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TErrorException const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TErrorException(void *obj) {
gs::TErrorException *arg1 = (gs::TErrorException *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TErrorException_methods[] = {
    {"__set_error_code", _wrap_TErrorException___set_error_code}, 
    {"__set_error_msg", _wrap_TErrorException___set_error_msg}, 
    {"__eq", _wrap_TErrorException___eq}, 
    {"__lt", _wrap_TErrorException___lt}, 
    {"read", _wrap_TErrorException_read}, 
    {"write", _wrap_TErrorException_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TErrorException_attributes[] = {
    { "error_code", _wrap_TErrorException_error_code_get, _wrap_TErrorException_error_code_set},
    { "error_msg", _wrap_TErrorException_error_msg_get, _wrap_TErrorException_error_msg_set},
    { "__isset", _wrap_TErrorException___isset_get, _wrap_TErrorException___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TErrorException_bases[] = {0};
static const char *swig_gs_TErrorException_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TErrorException = { "TErrorException", &SWIGTYPE_p_gs__TErrorException,_wrap_new_TErrorException, swig_delete_TErrorException, swig_gs_TErrorException_methods, swig_gs_TErrorException_attributes, swig_gs_TErrorException_bases, swig_gs_TErrorException_base_names };

static int _wrap_swap__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  gs::TErrorException *arg1 = 0 ;
  gs::TErrorException *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TErrorException &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TErrorException &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TErrorException);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TErrorException,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TErrorException);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TSessionCheck__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSessionCheck__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TSessionCheck__isset::_TSessionCheck__isset",0,0)
  result = (gs::_TSessionCheck__isset *)new gs::_TSessionCheck__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TSessionCheck__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSessionCheck__isset_hasGame_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSessionCheck__isset *arg1 = (gs::_TSessionCheck__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TSessionCheck__isset::hasGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasGame",1,"gs::_TSessionCheck__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasGame",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSessionCheck__isset,0))){
    SWIG_fail_ptr("_TSessionCheck__isset_hasGame_set",1,SWIGTYPE_p_gs___TSessionCheck__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasGame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSessionCheck__isset_hasGame_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSessionCheck__isset *arg1 = (gs::_TSessionCheck__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TSessionCheck__isset::hasGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasGame",1,"gs::_TSessionCheck__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSessionCheck__isset,0))){
    SWIG_fail_ptr("_TSessionCheck__isset_hasGame_get",1,SWIGTYPE_p_gs___TSessionCheck__isset);
  }
  
  result = (bool) ((arg1)->hasGame);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSessionCheck__isset_hasPlayer_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSessionCheck__isset *arg1 = (gs::_TSessionCheck__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TSessionCheck__isset::hasPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasPlayer",1,"gs::_TSessionCheck__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasPlayer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSessionCheck__isset,0))){
    SWIG_fail_ptr("_TSessionCheck__isset_hasPlayer_set",1,SWIGTYPE_p_gs___TSessionCheck__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasPlayer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSessionCheck__isset_hasPlayer_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSessionCheck__isset *arg1 = (gs::_TSessionCheck__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TSessionCheck__isset::hasPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSessionCheck__isset::hasPlayer",1,"gs::_TSessionCheck__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSessionCheck__isset,0))){
    SWIG_fail_ptr("_TSessionCheck__isset_hasPlayer_get",1,SWIGTYPE_p_gs___TSessionCheck__isset);
  }
  
  result = (bool) ((arg1)->hasPlayer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TSessionCheck__isset(void *obj) {
gs::_TSessionCheck__isset *arg1 = (gs::_TSessionCheck__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TSessionCheck__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TSessionCheck__isset_attributes[] = {
    { "hasGame", _wrap__TSessionCheck__isset_hasGame_get, _wrap__TSessionCheck__isset_hasGame_set},
    { "hasPlayer", _wrap__TSessionCheck__isset_hasPlayer_get, _wrap__TSessionCheck__isset_hasPlayer_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TSessionCheck__isset_bases[] = {0};
static const char *swig_gs__TSessionCheck__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TSessionCheck__isset = { "_TSessionCheck__isset", &SWIGTYPE_p_gs___TSessionCheck__isset,_wrap_new__TSessionCheck__isset, swig_delete__TSessionCheck__isset, swig_gs__TSessionCheck__isset_methods, swig_gs__TSessionCheck__isset_attributes, swig_gs__TSessionCheck__isset_bases, swig_gs__TSessionCheck__isset_base_names };

static int _wrap_TSessionCheck_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TSessionCheck::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TSessionCheck::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TSessionCheck::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TSessionCheck::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::ascii_fingerprint",0,0)
  result = (char *)gs::TSessionCheck::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TSessionCheck::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TSessionCheck(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *result = 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::TSessionCheck",0,0)
  result = (gs::TSessionCheck *)new gs::TSessionCheck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TSessionCheck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_hasGame_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::TSessionCheck::hasGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::hasGame",1,"gs::TSessionCheck *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::TSessionCheck::hasGame",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_hasGame_set",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasGame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_hasGame_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSessionCheck::hasGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::hasGame",1,"gs::TSessionCheck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_hasGame_get",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  result = (bool) ((arg1)->hasGame);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_hasPlayer_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::TSessionCheck::hasPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::hasPlayer",1,"gs::TSessionCheck *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::TSessionCheck::hasPlayer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_hasPlayer_set",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasPlayer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_hasPlayer_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSessionCheck::hasPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::hasPlayer",1,"gs::TSessionCheck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_hasPlayer_get",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  result = (bool) ((arg1)->hasPlayer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  gs::_TSessionCheck__isset *arg2 = (gs::_TSessionCheck__isset *) 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::__isset",1,"gs::TSessionCheck *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSessionCheck::__isset",2,"gs::_TSessionCheck__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___isset_set",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TSessionCheck__isset,0))){
    SWIG_fail_ptr("TSessionCheck___isset_set",2,SWIGTYPE_p_gs___TSessionCheck__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  gs::_TSessionCheck__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TSessionCheck::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::__isset",1,"gs::TSessionCheck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___isset_get",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  result = (gs::_TSessionCheck__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TSessionCheck__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___set_hasGame(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::TSessionCheck::__set_hasGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::__set_hasGame",1,"gs::TSessionCheck *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::TSessionCheck::__set_hasGame",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___set_hasGame",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->__set_hasGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___set_hasPlayer(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::TSessionCheck::__set_hasPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::__set_hasPlayer",1,"gs::TSessionCheck *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::TSessionCheck::__set_hasPlayer",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___set_hasPlayer",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->__set_hasPlayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  gs::TSessionCheck *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSessionCheck::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::operator ==",1,"gs::TSessionCheck const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TSessionCheck::operator ==",2,"gs::TSessionCheck const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___eq",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___eq",2,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  result = (bool)((gs::TSessionCheck const *)arg1)->operator ==((gs::TSessionCheck const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  gs::TSessionCheck *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSessionCheck::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::operator <",1,"gs::TSessionCheck const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TSessionCheck::operator <",2,"gs::TSessionCheck const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___lt",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck___lt",2,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  result = (bool)((gs::TSessionCheck const *)arg1)->operator <((gs::TSessionCheck const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TSessionCheck::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::read",1,"gs::TSessionCheck *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSessionCheck::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_read",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TSessionCheck_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSessionCheck_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = (gs::TSessionCheck *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TSessionCheck::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSessionCheck::write",1,"gs::TSessionCheck const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSessionCheck::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("TSessionCheck_write",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TSessionCheck_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TSessionCheck const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TSessionCheck(void *obj) {
gs::TSessionCheck *arg1 = (gs::TSessionCheck *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TSessionCheck_methods[] = {
    {"__set_hasGame", _wrap_TSessionCheck___set_hasGame}, 
    {"__set_hasPlayer", _wrap_TSessionCheck___set_hasPlayer}, 
    {"__eq", _wrap_TSessionCheck___eq}, 
    {"__lt", _wrap_TSessionCheck___lt}, 
    {"read", _wrap_TSessionCheck_read}, 
    {"write", _wrap_TSessionCheck_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TSessionCheck_attributes[] = {
    { "hasGame", _wrap_TSessionCheck_hasGame_get, _wrap_TSessionCheck_hasGame_set},
    { "hasPlayer", _wrap_TSessionCheck_hasPlayer_get, _wrap_TSessionCheck_hasPlayer_set},
    { "__isset", _wrap_TSessionCheck___isset_get, _wrap_TSessionCheck___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TSessionCheck_bases[] = {0};
static const char *swig_gs_TSessionCheck_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TSessionCheck = { "TSessionCheck", &SWIGTYPE_p_gs__TSessionCheck,_wrap_new_TSessionCheck, swig_delete_TSessionCheck, swig_gs_TSessionCheck_methods, swig_gs_TSessionCheck_attributes, swig_gs_TSessionCheck_bases, swig_gs_TSessionCheck_base_names };

static int _wrap_swap__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSessionCheck *arg1 = 0 ;
  gs::TSessionCheck *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TSessionCheck &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TSessionCheck &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSessionCheck,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TSessionCheck);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TSigninToken__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSigninToken__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TSigninToken__isset::_TSigninToken__isset",0,0)
  result = (gs::_TSigninToken__isset *)new gs::_TSigninToken__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TSigninToken__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSigninToken__isset_tokenName_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSigninToken__isset *arg1 = (gs::_TSigninToken__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TSigninToken__isset::tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenName",1,"gs::_TSigninToken__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSigninToken__isset,0))){
    SWIG_fail_ptr("_TSigninToken__isset_tokenName_set",1,SWIGTYPE_p_gs___TSigninToken__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->tokenName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSigninToken__isset_tokenName_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSigninToken__isset *arg1 = (gs::_TSigninToken__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TSigninToken__isset::tokenName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenName",1,"gs::_TSigninToken__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSigninToken__isset,0))){
    SWIG_fail_ptr("_TSigninToken__isset_tokenName_get",1,SWIGTYPE_p_gs___TSigninToken__isset);
  }
  
  result = (bool) ((arg1)->tokenName);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSigninToken__isset_tokenHash_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSigninToken__isset *arg1 = (gs::_TSigninToken__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TSigninToken__isset::tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenHash",1,"gs::_TSigninToken__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenHash",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSigninToken__isset,0))){
    SWIG_fail_ptr("_TSigninToken__isset_tokenHash_set",1,SWIGTYPE_p_gs___TSigninToken__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->tokenHash = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TSigninToken__isset_tokenHash_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TSigninToken__isset *arg1 = (gs::_TSigninToken__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TSigninToken__isset::tokenHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TSigninToken__isset::tokenHash",1,"gs::_TSigninToken__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TSigninToken__isset,0))){
    SWIG_fail_ptr("_TSigninToken__isset_tokenHash_get",1,SWIGTYPE_p_gs___TSigninToken__isset);
  }
  
  result = (bool) ((arg1)->tokenHash);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TSigninToken__isset(void *obj) {
gs::_TSigninToken__isset *arg1 = (gs::_TSigninToken__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TSigninToken__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TSigninToken__isset_attributes[] = {
    { "tokenName", _wrap__TSigninToken__isset_tokenName_get, _wrap__TSigninToken__isset_tokenName_set},
    { "tokenHash", _wrap__TSigninToken__isset_tokenHash_get, _wrap__TSigninToken__isset_tokenHash_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TSigninToken__isset_bases[] = {0};
static const char *swig_gs__TSigninToken__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TSigninToken__isset = { "_TSigninToken__isset", &SWIGTYPE_p_gs___TSigninToken__isset,_wrap_new__TSigninToken__isset, swig_delete__TSigninToken__isset, swig_gs__TSigninToken__isset_methods, swig_gs__TSigninToken__isset_attributes, swig_gs__TSigninToken__isset_bases, swig_gs__TSigninToken__isset_base_names };

static int _wrap_TSigninToken_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TSigninToken::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TSigninToken::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TSigninToken::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TSigninToken::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::ascii_fingerprint",0,0)
  result = (char *)gs::TSigninToken::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TSigninToken::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TSigninToken(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::TSigninToken",0,0)
  result = (gs::TSigninToken *)new gs::TSigninToken();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TSigninToken,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_tokenName_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TSigninToken::tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::tokenName",1,"gs::TSigninToken *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TSigninToken::tokenName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_tokenName_set",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->tokenName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_tokenName_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::tokenName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::tokenName",1,"gs::TSigninToken *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_tokenName_get",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  result = (std::string *) & ((arg1)->tokenName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_tokenHash_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TSigninToken::tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::tokenHash",1,"gs::TSigninToken *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TSigninToken::tokenHash",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_tokenHash_set",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->tokenHash = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_tokenHash_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::tokenHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::tokenHash",1,"gs::TSigninToken *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_tokenHash_get",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  result = (std::string *) & ((arg1)->tokenHash);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  gs::_TSigninToken__isset *arg2 = (gs::_TSigninToken__isset *) 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::__isset",1,"gs::TSigninToken *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSigninToken::__isset",2,"gs::_TSigninToken__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___isset_set",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TSigninToken__isset,0))){
    SWIG_fail_ptr("TSigninToken___isset_set",2,SWIGTYPE_p_gs___TSigninToken__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  gs::_TSigninToken__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TSigninToken::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::__isset",1,"gs::TSigninToken *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___isset_get",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  result = (gs::_TSigninToken__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TSigninToken__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___set_tokenName(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TSigninToken::__set_tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::__set_tokenName",1,"gs::TSigninToken *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TSigninToken::__set_tokenName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___set_tokenName",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_tokenName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___set_tokenHash(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TSigninToken::__set_tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::__set_tokenHash",1,"gs::TSigninToken *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TSigninToken::__set_tokenHash",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___set_tokenHash",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_tokenHash((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  gs::TSigninToken *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSigninToken::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::operator ==",1,"gs::TSigninToken const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TSigninToken::operator ==",2,"gs::TSigninToken const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___eq",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___eq",2,SWIGTYPE_p_gs__TSigninToken);
  }
  
  result = (bool)((gs::TSigninToken const *)arg1)->operator ==((gs::TSigninToken const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  gs::TSigninToken *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TSigninToken::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::operator <",1,"gs::TSigninToken const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TSigninToken::operator <",2,"gs::TSigninToken const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___lt",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken___lt",2,SWIGTYPE_p_gs__TSigninToken);
  }
  
  result = (bool)((gs::TSigninToken const *)arg1)->operator <((gs::TSigninToken const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TSigninToken::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::read",1,"gs::TSigninToken *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSigninToken::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_read",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TSigninToken_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TSigninToken_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = (gs::TSigninToken *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TSigninToken::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TSigninToken::write",1,"gs::TSigninToken const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TSigninToken::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("TSigninToken_write",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TSigninToken_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TSigninToken const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TSigninToken(void *obj) {
gs::TSigninToken *arg1 = (gs::TSigninToken *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TSigninToken_methods[] = {
    {"__set_tokenName", _wrap_TSigninToken___set_tokenName}, 
    {"__set_tokenHash", _wrap_TSigninToken___set_tokenHash}, 
    {"__eq", _wrap_TSigninToken___eq}, 
    {"__lt", _wrap_TSigninToken___lt}, 
    {"read", _wrap_TSigninToken_read}, 
    {"write", _wrap_TSigninToken_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TSigninToken_attributes[] = {
    { "tokenName", _wrap_TSigninToken_tokenName_get, _wrap_TSigninToken_tokenName_set},
    { "tokenHash", _wrap_TSigninToken_tokenHash_get, _wrap_TSigninToken_tokenHash_set},
    { "__isset", _wrap_TSigninToken___isset_get, _wrap_TSigninToken___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TSigninToken_bases[] = {0};
static const char *swig_gs_TSigninToken_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TSigninToken = { "TSigninToken", &SWIGTYPE_p_gs__TSigninToken,_wrap_new_TSigninToken, swig_delete_TSigninToken, swig_gs_TSigninToken_methods, swig_gs_TSigninToken_attributes, swig_gs_TSigninToken_bases, swig_gs_TSigninToken_base_names };

static int _wrap_swap__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  gs::TSigninToken *arg1 = 0 ;
  gs::TSigninToken *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TSigninToken &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TSigninToken &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TSigninToken);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TSigninToken,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TSigninToken);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TAutoLoginResponse__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::_TAutoLoginResponse__isset",0,0)
  result = (gs::_TAutoLoginResponse__isset *)new gs::_TAutoLoginResponse__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TAutoLoginResponse__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_resultCode_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::resultCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::resultCode",1,"gs::_TAutoLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::resultCode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_resultCode_set",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->resultCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_resultCode_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::resultCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::resultCode",1,"gs::_TAutoLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_resultCode_get",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->resultCode);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_tokenName_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenName",1,"gs::_TAutoLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_tokenName_set",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->tokenName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_tokenName_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::tokenName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenName",1,"gs::_TAutoLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_tokenName_get",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->tokenName);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_tokenHash_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenHash",1,"gs::_TAutoLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenHash",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_tokenHash_set",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->tokenHash = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_tokenHash_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::tokenHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::tokenHash",1,"gs::_TAutoLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_tokenHash_get",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->tokenHash);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::user",1,"gs::_TAutoLoginResponse__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::user",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_user_set",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->user = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TAutoLoginResponse__isset_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TAutoLoginResponse__isset::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TAutoLoginResponse__isset::user",1,"gs::_TAutoLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("_TAutoLoginResponse__isset_user_get",1,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  result = (bool) ((arg1)->user);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TAutoLoginResponse__isset(void *obj) {
gs::_TAutoLoginResponse__isset *arg1 = (gs::_TAutoLoginResponse__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TAutoLoginResponse__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TAutoLoginResponse__isset_attributes[] = {
    { "resultCode", _wrap__TAutoLoginResponse__isset_resultCode_get, _wrap__TAutoLoginResponse__isset_resultCode_set},
    { "tokenName", _wrap__TAutoLoginResponse__isset_tokenName_get, _wrap__TAutoLoginResponse__isset_tokenName_set},
    { "tokenHash", _wrap__TAutoLoginResponse__isset_tokenHash_get, _wrap__TAutoLoginResponse__isset_tokenHash_set},
    { "user", _wrap__TAutoLoginResponse__isset_user_get, _wrap__TAutoLoginResponse__isset_user_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TAutoLoginResponse__isset_bases[] = {0};
static const char *swig_gs__TAutoLoginResponse__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TAutoLoginResponse__isset = { "_TAutoLoginResponse__isset", &SWIGTYPE_p_gs___TAutoLoginResponse__isset,_wrap_new__TAutoLoginResponse__isset, swig_delete__TAutoLoginResponse__isset, swig_gs__TAutoLoginResponse__isset_methods, swig_gs__TAutoLoginResponse__isset_attributes, swig_gs__TAutoLoginResponse__isset_bases, swig_gs__TAutoLoginResponse__isset_base_names };

static int _wrap_TAutoLoginResponse_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TAutoLoginResponse::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TAutoLoginResponse::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TAutoLoginResponse::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::ascii_fingerprint",0,0)
  result = (char *)gs::TAutoLoginResponse::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TAutoLoginResponse::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TAutoLoginResponse(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::TAutoLoginResponse",0,0)
  result = (gs::TAutoLoginResponse *)new gs::TAutoLoginResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TAutoLoginResponse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_resultCode_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TAutoLoginResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::resultCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::resultCode",1,"gs::TAutoLoginResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::resultCode",2,"gs::TAutoLoginResultCode::type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_resultCode_set",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  arg2 = (gs::TAutoLoginResultCode::type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->resultCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_resultCode_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TAutoLoginResultCode::type result;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::resultCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::resultCode",1,"gs::TAutoLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_resultCode_get",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (gs::TAutoLoginResultCode::type) ((arg1)->resultCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_tokenName_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenName",1,"gs::TAutoLoginResponse *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_tokenName_set",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->tokenName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_tokenName_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::tokenName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenName",1,"gs::TAutoLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_tokenName_get",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (std::string *) & ((arg1)->tokenName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_tokenHash_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenHash",1,"gs::TAutoLoginResponse *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenHash",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_tokenHash_set",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->tokenHash = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_tokenHash_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::tokenHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::tokenHash",1,"gs::TAutoLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_tokenHash_get",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (std::string *) & ((arg1)->tokenHash);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_user_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TUser *arg2 = (gs::TUser *) 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::user",1,"gs::TAutoLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::user",2,"gs::TUser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_user_set",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TAutoLoginResponse_user_set",2,SWIGTYPE_p_gs__TUser);
  }
  
  if (arg1) (arg1)->user = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_user_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TUser *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::user",1,"gs::TAutoLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_user_get",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (gs::TUser *)& ((arg1)->user);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TUser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::_TAutoLoginResponse__isset *arg2 = (gs::_TAutoLoginResponse__isset *) 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__isset",1,"gs::TAutoLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::__isset",2,"gs::_TAutoLoginResponse__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___isset_set",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0))){
    SWIG_fail_ptr("TAutoLoginResponse___isset_set",2,SWIGTYPE_p_gs___TAutoLoginResponse__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::_TAutoLoginResponse__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__isset",1,"gs::TAutoLoginResponse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___isset_get",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (gs::_TAutoLoginResponse__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TAutoLoginResponse__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___set_resultCode(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TAutoLoginResultCode::type arg2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__set_resultCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_resultCode",1,"gs::TAutoLoginResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_resultCode",2,"gs::TAutoLoginResultCode::type const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___set_resultCode",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  arg2 = (gs::TAutoLoginResultCode::type const)(int)lua_tonumber(L, 2);
  (arg1)->__set_resultCode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___set_tokenName(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__set_tokenName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_tokenName",1,"gs::TAutoLoginResponse *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_tokenName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___set_tokenName",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_tokenName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___set_tokenHash(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__set_tokenHash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_tokenHash",1,"gs::TAutoLoginResponse *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_tokenHash",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___set_tokenHash",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->__set_tokenHash((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___set_user(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TUser *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::__set_user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_user",1,"gs::TAutoLoginResponse *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::__set_user",2,"gs::TUser const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___set_user",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TUser,0))){
    SWIG_fail_ptr("TAutoLoginResponse___set_user",2,SWIGTYPE_p_gs__TUser);
  }
  
  (arg1)->__set_user((gs::TUser const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TAutoLoginResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::operator ==",1,"gs::TAutoLoginResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::operator ==",2,"gs::TAutoLoginResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___eq",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___eq",2,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (bool)((gs::TAutoLoginResponse const *)arg1)->operator ==((gs::TAutoLoginResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  gs::TAutoLoginResponse *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::operator <",1,"gs::TAutoLoginResponse const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::operator <",2,"gs::TAutoLoginResponse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___lt",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse___lt",2,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  result = (bool)((gs::TAutoLoginResponse const *)arg1)->operator <((gs::TAutoLoginResponse const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::read",1,"gs::TAutoLoginResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_read",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TAutoLoginResponse_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAutoLoginResponse_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TAutoLoginResponse::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TAutoLoginResponse::write",1,"gs::TAutoLoginResponse const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TAutoLoginResponse::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("TAutoLoginResponse_write",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TAutoLoginResponse_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TAutoLoginResponse const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TAutoLoginResponse(void *obj) {
gs::TAutoLoginResponse *arg1 = (gs::TAutoLoginResponse *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TAutoLoginResponse_methods[] = {
    {"__set_resultCode", _wrap_TAutoLoginResponse___set_resultCode}, 
    {"__set_tokenName", _wrap_TAutoLoginResponse___set_tokenName}, 
    {"__set_tokenHash", _wrap_TAutoLoginResponse___set_tokenHash}, 
    {"__set_user", _wrap_TAutoLoginResponse___set_user}, 
    {"__eq", _wrap_TAutoLoginResponse___eq}, 
    {"__lt", _wrap_TAutoLoginResponse___lt}, 
    {"read", _wrap_TAutoLoginResponse_read}, 
    {"write", _wrap_TAutoLoginResponse_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TAutoLoginResponse_attributes[] = {
    { "resultCode", _wrap_TAutoLoginResponse_resultCode_get, _wrap_TAutoLoginResponse_resultCode_set},
    { "tokenName", _wrap_TAutoLoginResponse_tokenName_get, _wrap_TAutoLoginResponse_tokenName_set},
    { "tokenHash", _wrap_TAutoLoginResponse_tokenHash_get, _wrap_TAutoLoginResponse_tokenHash_set},
    { "user", _wrap_TAutoLoginResponse_user_get, _wrap_TAutoLoginResponse_user_set},
    { "__isset", _wrap_TAutoLoginResponse___isset_get, _wrap_TAutoLoginResponse___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TAutoLoginResponse_bases[] = {0};
static const char *swig_gs_TAutoLoginResponse_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TAutoLoginResponse = { "TAutoLoginResponse", &SWIGTYPE_p_gs__TAutoLoginResponse,_wrap_new_TAutoLoginResponse, swig_delete_TAutoLoginResponse, swig_gs_TAutoLoginResponse_methods, swig_gs_TAutoLoginResponse_attributes, swig_gs_TAutoLoginResponse_bases, swig_gs_TAutoLoginResponse_base_names };

static int _wrap_swap__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  gs::TAutoLoginResponse *arg1 = 0 ;
  gs::TAutoLoginResponse *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TAutoLoginResponse &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TAutoLoginResponse &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TAutoLoginResponse,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TAutoLoginResponse);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new__TBeforeLevelData__isset(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *result = 0 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::_TBeforeLevelData__isset",0,0)
  result = (gs::_TBeforeLevelData__isset *)new gs::_TBeforeLevelData__isset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TBeforeLevelData__isset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_top_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::top",1,"gs::_TBeforeLevelData__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::top",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_top_set",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->top = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_top_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::top",1,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_top_get",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  result = (bool) ((arg1)->top);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_around_player_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::around_player",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player",1,"gs::_TBeforeLevelData__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_around_player_set",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->around_player = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_around_player_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::around_player",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player",1,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_around_player_get",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  result = (bool) ((arg1)->around_player);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_around_player_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::around_player_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player_offset",1,"gs::_TBeforeLevelData__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player_offset",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_around_player_offset_set",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->around_player_offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_around_player_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::around_player_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::around_player_offset",1,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_around_player_offset_get",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  result = (bool) ((arg1)->around_player_offset);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_player_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::player_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_pos",1,"gs::_TBeforeLevelData__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_pos",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_player_pos_set",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->player_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_player_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::player_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_pos",1,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_player_pos_get",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  result = (bool) ((arg1)->player_pos);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_player_score_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::player_score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_score",1,"gs::_TBeforeLevelData__isset *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_score",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_player_score_set",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->player_score = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__TBeforeLevelData__isset_player_score_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) 0 ;
  bool result;
  
  SWIG_check_num_args("gs::_TBeforeLevelData__isset::player_score",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::_TBeforeLevelData__isset::player_score",1,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("_TBeforeLevelData__isset_player_score_get",1,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  result = (bool) ((arg1)->player_score);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete__TBeforeLevelData__isset(void *obj) {
gs::_TBeforeLevelData__isset *arg1 = (gs::_TBeforeLevelData__isset *) obj;
delete arg1;
}
static swig_lua_method swig_gs__TBeforeLevelData__isset_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gs__TBeforeLevelData__isset_attributes[] = {
    { "top", _wrap__TBeforeLevelData__isset_top_get, _wrap__TBeforeLevelData__isset_top_set},
    { "around_player", _wrap__TBeforeLevelData__isset_around_player_get, _wrap__TBeforeLevelData__isset_around_player_set},
    { "around_player_offset", _wrap__TBeforeLevelData__isset_around_player_offset_get, _wrap__TBeforeLevelData__isset_around_player_offset_set},
    { "player_pos", _wrap__TBeforeLevelData__isset_player_pos_get, _wrap__TBeforeLevelData__isset_player_pos_set},
    { "player_score", _wrap__TBeforeLevelData__isset_player_score_get, _wrap__TBeforeLevelData__isset_player_score_set},
    {0,0,0}
};
static swig_lua_class *swig_gs__TBeforeLevelData__isset_bases[] = {0};
static const char *swig_gs__TBeforeLevelData__isset_base_names[] = {0};
static swig_lua_class _wrap_class_gs__TBeforeLevelData__isset = { "_TBeforeLevelData__isset", &SWIGTYPE_p_gs___TBeforeLevelData__isset,_wrap_new__TBeforeLevelData__isset, swig_delete__TBeforeLevelData__isset, swig_gs__TBeforeLevelData__isset_methods, swig_gs__TBeforeLevelData__isset_attributes, swig_gs__TBeforeLevelData__isset_bases, swig_gs__TBeforeLevelData__isset_base_names };

static int _wrap_TBeforeLevelData_ascii_fingerprint_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::ascii_fingerprint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::ascii_fingerprint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) {
      gs::TBeforeLevelData::ascii_fingerprint = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)gs::TBeforeLevelData::ascii_fingerprint, (const char *)arg1);
    } else {
      gs::TBeforeLevelData::ascii_fingerprint = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_ascii_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::ascii_fingerprint",0,0)
  result = (char *)gs::TBeforeLevelData::ascii_fingerprint;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_binary_fingerprint_get(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::binary_fingerprint",0,0)
  result = (uint8_t *)(uint8_t *)gs::TBeforeLevelData::binary_fingerprint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TBeforeLevelData(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::TBeforeLevelData",0,0)
  result = (gs::TBeforeLevelData *)new gs::TBeforeLevelData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TBeforeLevelData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_top_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *arg2 = (std::vector< gs::TScore > *) 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::top",1,"gs::TBeforeLevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::top",2,"std::vector< gs::TScore > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_top_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("TBeforeLevelData_top_set",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  if (arg1) (arg1)->top = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_top_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::top",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_top_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (std::vector< gs::TScore > *)& ((arg1)->top);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_around_player_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *arg2 = (std::vector< gs::TScore > *) 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::around_player",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::around_player",1,"gs::TBeforeLevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::around_player",2,"std::vector< gs::TScore > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_around_player_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("TBeforeLevelData_around_player_set",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  if (arg1) (arg1)->around_player = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_around_player_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::around_player",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::around_player",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_around_player_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (std::vector< gs::TScore > *)& ((arg1)->around_player);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_around_player_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::around_player_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::around_player_offset",1,"gs::TBeforeLevelData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::around_player_offset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_around_player_offset_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->around_player_offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_around_player_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::around_player_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::around_player_offset",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_around_player_offset_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (int) ((arg1)->around_player_offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_player_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::player_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::player_pos",1,"gs::TBeforeLevelData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::player_pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_player_pos_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->player_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_player_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::player_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::player_pos",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_player_pos_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (int) ((arg1)->player_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_player_score_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::TScore *arg2 = (gs::TScore *) 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::player_score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::player_score",1,"gs::TBeforeLevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::player_score",2,"gs::TScore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_player_score_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TBeforeLevelData_player_score_set",2,SWIGTYPE_p_gs__TScore);
  }
  
  if (arg1) (arg1)->player_score = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_player_score_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::TScore *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::player_score",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::player_score",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_player_score_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (gs::TScore *)& ((arg1)->player_score);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs__TScore,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___isset_set(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::_TBeforeLevelData__isset *arg2 = (gs::_TBeforeLevelData__isset *) 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__isset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__isset",1,"gs::TBeforeLevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__isset",2,"gs::_TBeforeLevelData__isset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___isset_set",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs___TBeforeLevelData__isset,0))){
    SWIG_fail_ptr("TBeforeLevelData___isset_set",2,SWIGTYPE_p_gs___TBeforeLevelData__isset);
  }
  
  if (arg1) (arg1)->__isset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___isset_get(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::_TBeforeLevelData__isset *result = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__isset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__isset",1,"gs::TBeforeLevelData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___isset_get",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (gs::_TBeforeLevelData__isset *)& ((arg1)->__isset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gs___TBeforeLevelData__isset,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___set_top(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__set_top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__set_top",1,"gs::TBeforeLevelData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__set_top",2,"std::vector< gs::TScore > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_top",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_top",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  (arg1)->__set_top((std::vector< gs::TScore > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___set_around_player(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  std::vector< gs::TScore > *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__set_around_player",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__set_around_player",1,"gs::TBeforeLevelData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__set_around_player",2,"std::vector< gs::TScore > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_around_player",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_around_player",2,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  (arg1)->__set_around_player((std::vector< gs::TScore > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___set_around_player_offset(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__set_around_player_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__set_around_player_offset",1,"gs::TBeforeLevelData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__set_around_player_offset",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_around_player_offset",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_around_player_offset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___set_player_pos(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__set_player_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__set_player_pos",1,"gs::TBeforeLevelData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__set_player_pos",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_player_pos",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  (arg1)->__set_player_pos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___set_player_score(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::TScore *arg2 = 0 ;
  
  SWIG_check_num_args("gs::TBeforeLevelData::__set_player_score",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::__set_player_score",1,"gs::TBeforeLevelData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::__set_player_score",2,"gs::TScore const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_player_score",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("TBeforeLevelData___set_player_score",2,SWIGTYPE_p_gs__TScore);
  }
  
  (arg1)->__set_player_score((gs::TScore const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___eq(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::TBeforeLevelData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::operator ==",1,"gs::TBeforeLevelData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::operator ==",2,"gs::TBeforeLevelData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___eq",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___eq",2,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (bool)((gs::TBeforeLevelData const *)arg1)->operator ==((gs::TBeforeLevelData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData___lt(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  gs::TBeforeLevelData *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::operator <",1,"gs::TBeforeLevelData const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::operator <",2,"gs::TBeforeLevelData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___lt",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData___lt",2,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  result = (bool)((gs::TBeforeLevelData const *)arg1)->operator <((gs::TBeforeLevelData const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_read(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::read",1,"gs::TBeforeLevelData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::read",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_read",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TBeforeLevelData_read",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = (arg1)->read(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TBeforeLevelData_write(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) 0 ;
  ::apache::thrift::protocol::TProtocol *arg2 = (::apache::thrift::protocol::TProtocol *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gs::TBeforeLevelData::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gs::TBeforeLevelData::write",1,"gs::TBeforeLevelData const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gs::TBeforeLevelData::write",2,"::apache::thrift::protocol::TProtocol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("TBeforeLevelData_write",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_apache__thrift__protocol__TProtocol,0))){
    SWIG_fail_ptr("TBeforeLevelData_write",2,SWIGTYPE_p_apache__thrift__protocol__TProtocol);
  }
  
  result = ((gs::TBeforeLevelData const *)arg1)->write(arg2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TBeforeLevelData(void *obj) {
gs::TBeforeLevelData *arg1 = (gs::TBeforeLevelData *) obj;
delete arg1;
}
static swig_lua_method swig_gs_TBeforeLevelData_methods[] = {
    {"__set_top", _wrap_TBeforeLevelData___set_top}, 
    {"__set_around_player", _wrap_TBeforeLevelData___set_around_player}, 
    {"__set_around_player_offset", _wrap_TBeforeLevelData___set_around_player_offset}, 
    {"__set_player_pos", _wrap_TBeforeLevelData___set_player_pos}, 
    {"__set_player_score", _wrap_TBeforeLevelData___set_player_score}, 
    {"__eq", _wrap_TBeforeLevelData___eq}, 
    {"__lt", _wrap_TBeforeLevelData___lt}, 
    {"read", _wrap_TBeforeLevelData_read}, 
    {"write", _wrap_TBeforeLevelData_write}, 
    {0,0}
};
static swig_lua_attribute swig_gs_TBeforeLevelData_attributes[] = {
    { "top", _wrap_TBeforeLevelData_top_get, _wrap_TBeforeLevelData_top_set},
    { "around_player", _wrap_TBeforeLevelData_around_player_get, _wrap_TBeforeLevelData_around_player_set},
    { "around_player_offset", _wrap_TBeforeLevelData_around_player_offset_get, _wrap_TBeforeLevelData_around_player_offset_set},
    { "player_pos", _wrap_TBeforeLevelData_player_pos_get, _wrap_TBeforeLevelData_player_pos_set},
    { "player_score", _wrap_TBeforeLevelData_player_score_get, _wrap_TBeforeLevelData_player_score_set},
    { "__isset", _wrap_TBeforeLevelData___isset_get, _wrap_TBeforeLevelData___isset_set},
    {0,0,0}
};
static swig_lua_class *swig_gs_TBeforeLevelData_bases[] = {0};
static const char *swig_gs_TBeforeLevelData_base_names[] = {0};
static swig_lua_class _wrap_class_gs_TBeforeLevelData = { "TBeforeLevelData", &SWIGTYPE_p_gs__TBeforeLevelData,_wrap_new_TBeforeLevelData, swig_delete_TBeforeLevelData, swig_gs_TBeforeLevelData_methods, swig_gs_TBeforeLevelData_attributes, swig_gs_TBeforeLevelData_bases, swig_gs_TBeforeLevelData_base_names };

static int _wrap_swap__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  gs::TBeforeLevelData *arg1 = 0 ;
  gs::TBeforeLevelData *arg2 = 0 ;
  
  SWIG_check_num_args("gs::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gs::swap",1,"gs::TBeforeLevelData &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gs::swap",2,"gs::TBeforeLevelData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gs__TBeforeLevelData,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_gs__TBeforeLevelData);
  }
  
  gs::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_swap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TUser, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TUser, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TScore, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TScore, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TGame, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TGame, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TMode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TMode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TRegInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TRegInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TAddScoreResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TAddScoreResponse, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TLoginResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TLoginResponse, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TGetUserResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TGetUserResponse, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TErrorException, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TErrorException, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TSessionCheck, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TSessionCheck, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TSigninToken, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TSigninToken, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TAutoLoginResponse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TAutoLoginResponse, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gs__TBeforeLevelData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TBeforeLevelData, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_12(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'swap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gs::swap(gs::TUser &,gs::TUser &)\n"
    "    gs::swap(gs::TScore &,gs::TScore &)\n"
    "    gs::swap(gs::TGame &,gs::TGame &)\n"
    "    gs::swap(gs::TMode &,gs::TMode &)\n"
    "    gs::swap(gs::TRegInfo &,gs::TRegInfo &)\n"
    "    gs::swap(gs::TAddScoreResponse &,gs::TAddScoreResponse &)\n"
    "    gs::swap(gs::TLoginResponse &,gs::TLoginResponse &)\n"
    "    gs::swap(gs::TGetUserResponse &,gs::TGetUserResponse &)\n"
    "    gs::swap(gs::TErrorException &,gs::TErrorException &)\n"
    "    gs::swap(gs::TSessionCheck &,gs::TSessionCheck &)\n"
    "    gs::swap(gs::TSigninToken &,gs::TSigninToken &)\n"
    "    gs::swap(gs::TAutoLoginResponse &,gs::TAutoLoginResponse &)\n"
    "    gs::swap(gs::TBeforeLevelData &,gs::TBeforeLevelData &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_vectori__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_vectori",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_vectori__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectori__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectori__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectori__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_vectori'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_int_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_int_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectori(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_int_Sg__methods[] = {
    {"size", _wrap_vectori_size}, 
    {"max_size", _wrap_vectori_max_size}, 
    {"empty", _wrap_vectori_empty}, 
    {"clear", _wrap_vectori_clear}, 
    {"push_back", _wrap_vectori_push_back}, 
    {"pop_back", _wrap_vectori_pop_back}, 
    {"front", _wrap_vectori_front}, 
    {"back", _wrap_vectori_back}, 
    {"__getitem", _wrap_vectori___getitem}, 
    {"__setitem", _wrap_vectori___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_int_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_int_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_int_Sg_ = { "vectori", &SWIGTYPE_p_std__vectorT_int_t,_wrap_new_vectori, swig_delete_vectori, swig_std_vector_Sl_int_Sg__methods, swig_std_vector_Sl_int_Sg__attributes, swig_std_vector_Sl_int_Sg__bases, swig_std_vector_Sl_int_Sg__base_names };

static int _wrap_new_vectord__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectord__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectord__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_vectord",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectord__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectord(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_vectord__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectord__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectord__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectord__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_vectord'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_vectord_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_double_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectord___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectord___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectord(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_double_Sg__methods[] = {
    {"size", _wrap_vectord_size}, 
    {"max_size", _wrap_vectord_max_size}, 
    {"empty", _wrap_vectord_empty}, 
    {"clear", _wrap_vectord_clear}, 
    {"push_back", _wrap_vectord_push_back}, 
    {"pop_back", _wrap_vectord_pop_back}, 
    {"front", _wrap_vectord_front}, 
    {"back", _wrap_vectord_back}, 
    {"__getitem", _wrap_vectord___getitem}, 
    {"__setitem", _wrap_vectord___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_double_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_double_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_double_Sg_ = { "vectord", &SWIGTYPE_p_std__vectorT_double_t,_wrap_new_vectord, swig_delete_vectord, swig_std_vector_Sl_double_Sg__methods, swig_std_vector_Sl_double_Sg__attributes, swig_std_vector_Sl_double_Sg__bases, swig_std_vector_Sl_double_Sg__base_names };

static int _wrap_new_vector_score__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::vector",0,0)
  result = (std::vector< gs::TScore > *)new std::vector< gs::TScore >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_score__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< gs::TScore > *)new std::vector< gs::TScore >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_score__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = 0 ;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::vector",1,"std::vector< gs::TScore > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("new_vector_score",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = (std::vector< gs::TScore > *)new std::vector< gs::TScore >((std::vector< gs::TScore > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_score__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gs::TScore arg2 ;
  gs::TScore *argp2 ;
  std::vector< gs::TScore > *result = 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< gs::TScore >::vector",2,"gs::TScore");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("new_vector_score",2,SWIGTYPE_p_gs__TScore);
  }
  arg2 = *argp2;
  
  result = (std::vector< gs::TScore > *)new std::vector< gs::TScore >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gs__TScore_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_score(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_vector_score__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_gs__TScore_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vector_score__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vector_score__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gs__TScore, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_vector_score__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_vector_score'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gs::TScore >::vector()\n"
    "    std::vector< gs::TScore >::vector(unsigned int)\n"
    "    std::vector< gs::TScore >::vector(std::vector< gs::TScore > const &)\n"
    "    std::vector< gs::TScore >::vector(unsigned int,gs::TScore)\n");
  lua_error(L);return 0;
}


static int _wrap_vector_score_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::size",1,"std::vector< gs::TScore > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_size",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = (unsigned int)((std::vector< gs::TScore > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::max_size",1,"std::vector< gs::TScore > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_max_size",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = (unsigned int)((std::vector< gs::TScore > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::empty",1,"std::vector< gs::TScore > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_empty",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = (bool)((std::vector< gs::TScore > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::clear",1,"std::vector< gs::TScore > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_clear",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  gs::TScore arg2 ;
  gs::TScore *argp2 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::push_back",1,"std::vector< gs::TScore > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< gs::TScore >::push_back",2,"gs::TScore");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_push_back",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("vector_score_push_back",2,SWIGTYPE_p_gs__TScore);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::pop_back",1,"std::vector< gs::TScore > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_pop_back",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  gs::TScore result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::front",1,"std::vector< gs::TScore > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_front",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = ((std::vector< gs::TScore > const *)arg1)->front();
  {
    gs::TScore * resultptr = new gs::TScore((const gs::TScore &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gs__TScore,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  gs::TScore result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::back",1,"std::vector< gs::TScore > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score_back",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  result = ((std::vector< gs::TScore > const *)arg1)->back();
  {
    gs::TScore * resultptr = new gs::TScore((const gs::TScore &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gs__TScore,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  unsigned int arg2 ;
  gs::TScore result;
  
  SWIG_check_num_args("std::vector< gs::TScore >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::__getitem__",1,"std::vector< gs::TScore > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< gs::TScore >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score___getitem",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_gs_TScore_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    gs::TScore * resultptr = new gs::TScore((const gs::TScore &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gs__TScore,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_score___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) 0 ;
  unsigned int arg2 ;
  gs::TScore arg3 ;
  gs::TScore *argp3 ;
  
  SWIG_check_num_args("std::vector< gs::TScore >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< gs::TScore >::__setitem__",1,"std::vector< gs::TScore > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< gs::TScore >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< gs::TScore >::__setitem__",3,"gs::TScore");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_gs__TScore_t,0))){
    SWIG_fail_ptr("vector_score___setitem",1,SWIGTYPE_p_std__vectorT_gs__TScore_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_gs__TScore,0))){
    SWIG_fail_ptr("vector_score___setitem",3,SWIGTYPE_p_gs__TScore);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_gs_TScore_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vector_score(void *obj) {
std::vector< gs::TScore > *arg1 = (std::vector< gs::TScore > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_gs_TScore_Sg__methods[] = {
    {"size", _wrap_vector_score_size}, 
    {"max_size", _wrap_vector_score_max_size}, 
    {"empty", _wrap_vector_score_empty}, 
    {"clear", _wrap_vector_score_clear}, 
    {"push_back", _wrap_vector_score_push_back}, 
    {"pop_back", _wrap_vector_score_pop_back}, 
    {"front", _wrap_vector_score_front}, 
    {"back", _wrap_vector_score_back}, 
    {"__getitem", _wrap_vector_score___getitem}, 
    {"__setitem", _wrap_vector_score___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_gs_TScore_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_gs_TScore_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_gs_TScore_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_gs_TScore_Sg_ = { "vector_score", &SWIGTYPE_p_std__vectorT_gs__TScore_t,_wrap_new_vector_score, swig_delete_vector_score, swig_std_vector_Sl_gs_TScore_Sg__methods, swig_std_vector_Sl_gs_TScore_Sg__attributes, swig_std_vector_Sl_gs_TScore_Sg__bases, swig_std_vector_Sl_gs_TScore_Sg__base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "getThriftService", _wrap_getThriftService},
    { "swap",_wrap_swap},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "_TAddUserResultCode_VALUES_TO_NAMES", _wrap__TAddUserResultCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TAddScoreResultCode_VALUES_TO_NAMES", _wrap__TAddScoreResultCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TLoginResultCode_VALUES_TO_NAMES", _wrap__TLoginResultCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TGetUserResultCode_VALUES_TO_NAMES", _wrap__TGetUserResultCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_ErrorCode_VALUES_TO_NAMES", _wrap__ErrorCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TUserDataResponse_VALUES_TO_NAMES", _wrap__TUserDataResponse_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TSetGameResult_VALUES_TO_NAMES", _wrap__TSetGameResult_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "_TAutoLoginResultCode_VALUES_TO_NAMES", _wrap__TAutoLoginResultCode_VALUES_TO_NAMES_get, SWIG_Lua_set_immutable },
    { "TUser_ascii_fingerprint", _wrap_TUser_ascii_fingerprint_get, _wrap_TUser_ascii_fingerprint_set },
    { "TUser_binary_fingerprint", _wrap_TUser_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TScore_ascii_fingerprint", _wrap_TScore_ascii_fingerprint_get, _wrap_TScore_ascii_fingerprint_set },
    { "TScore_binary_fingerprint", _wrap_TScore_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TGame_ascii_fingerprint", _wrap_TGame_ascii_fingerprint_get, _wrap_TGame_ascii_fingerprint_set },
    { "TGame_binary_fingerprint", _wrap_TGame_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TMode_ascii_fingerprint", _wrap_TMode_ascii_fingerprint_get, _wrap_TMode_ascii_fingerprint_set },
    { "TMode_binary_fingerprint", _wrap_TMode_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TRegInfo_ascii_fingerprint", _wrap_TRegInfo_ascii_fingerprint_get, _wrap_TRegInfo_ascii_fingerprint_set },
    { "TRegInfo_binary_fingerprint", _wrap_TRegInfo_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TAddScoreResponse_ascii_fingerprint", _wrap_TAddScoreResponse_ascii_fingerprint_get, _wrap_TAddScoreResponse_ascii_fingerprint_set },
    { "TAddScoreResponse_binary_fingerprint", _wrap_TAddScoreResponse_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TLoginResponse_ascii_fingerprint", _wrap_TLoginResponse_ascii_fingerprint_get, _wrap_TLoginResponse_ascii_fingerprint_set },
    { "TLoginResponse_binary_fingerprint", _wrap_TLoginResponse_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TGetUserResponse_ascii_fingerprint", _wrap_TGetUserResponse_ascii_fingerprint_get, _wrap_TGetUserResponse_ascii_fingerprint_set },
    { "TGetUserResponse_binary_fingerprint", _wrap_TGetUserResponse_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TErrorException_ascii_fingerprint", _wrap_TErrorException_ascii_fingerprint_get, _wrap_TErrorException_ascii_fingerprint_set },
    { "TErrorException_binary_fingerprint", _wrap_TErrorException_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TSessionCheck_ascii_fingerprint", _wrap_TSessionCheck_ascii_fingerprint_get, _wrap_TSessionCheck_ascii_fingerprint_set },
    { "TSessionCheck_binary_fingerprint", _wrap_TSessionCheck_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TSigninToken_ascii_fingerprint", _wrap_TSigninToken_ascii_fingerprint_get, _wrap_TSigninToken_ascii_fingerprint_set },
    { "TSigninToken_binary_fingerprint", _wrap_TSigninToken_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TAutoLoginResponse_ascii_fingerprint", _wrap_TAutoLoginResponse_ascii_fingerprint_get, _wrap_TAutoLoginResponse_ascii_fingerprint_set },
    { "TAutoLoginResponse_binary_fingerprint", _wrap_TAutoLoginResponse_binary_fingerprint_get, SWIG_Lua_set_immutable },
    { "TBeforeLevelData_ascii_fingerprint", _wrap_TBeforeLevelData_ascii_fingerprint_get, _wrap_TBeforeLevelData_ascii_fingerprint_set },
    { "TBeforeLevelData_binary_fingerprint", _wrap_TBeforeLevelData_binary_fingerprint_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"CLIENT_VERSION", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_PING", (long) AsyncCaller::PING, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_CREATE_GAME", (long) AsyncCaller::CREATE_GAME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_ADD_USER", (long) AsyncCaller::ADD_USER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_ADD_SCORE", (long) AsyncCaller::ADD_SCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_LOGIN_USER", (long) AsyncCaller::LOGIN_USER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_PLAYER_SCORES", (long) AsyncCaller::GET_PLAYER_SCORES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_HIGHSCORES", (long) AsyncCaller::GET_HIGHSCORES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_SET_GAME", (long) AsyncCaller::SET_GAME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_CHECK_SESSION", (long) AsyncCaller::CHECK_SESSION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_CHECK_USERDATA", (long) AsyncCaller::CHECK_USERDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_PLAYER_POS", (long) AsyncCaller::GET_PLAYER_POS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_POS_BY_SCORE", (long) AsyncCaller::GET_POS_BY_SCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_REQUEST_SIGNINTOKEN", (long) AsyncCaller::REQUEST_SIGNINTOKEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_LOGIN_BY_TOKEN", (long) AsyncCaller::LOGIN_BY_TOKEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_PLAYER_HIGHSCORE", (long) AsyncCaller::GET_PLAYER_HIGHSCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_PLAYER_HIGHSCORES", (long) AsyncCaller::GET_PLAYER_HIGHSCORES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AsyncCaller_GET_BEFORELEVEL_DATA", (long) AsyncCaller::GET_BEFORELEVEL_DATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddUserResultCode_ok", (long) gs::TAddUserResultCode::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddUserResultCode_username_exists", (long) gs::TAddUserResultCode::username_exists, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddUserResultCode_email_exists", (long) gs::TAddUserResultCode::email_exists, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddUserResultCode_not_allowed_operation", (long) gs::TAddUserResultCode::not_allowed_operation, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddScoreResultCode_nothing_special", (long) gs::TAddScoreResultCode::nothing_special, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddScoreResultCode_player_highscore", (long) gs::TAddScoreResultCode::player_highscore, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddScoreResultCode_current_highscore", (long) gs::TAddScoreResultCode::current_highscore, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAddScoreResultCode_alltime_highscore", (long) gs::TAddScoreResultCode::alltime_highscore, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_ok", (long) gs::TLoginResultCode::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_no_game", (long) gs::TLoginResultCode::no_game, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_player_not_allowed_to_register_for_game", (long) gs::TLoginResultCode::player_not_allowed_to_register_for_game, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_player_password_invalid", (long) gs::TLoginResultCode::player_password_invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_player_suspended", (long) gs::TLoginResultCode::player_suspended, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TLoginResultCode_no_salt_requested", (long) gs::TLoginResultCode::no_salt_requested, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TGetUserResultCode_ok", (long) gs::TGetUserResultCode::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TGetUserResultCode_unknown", (long) gs::TGetUserResultCode::unknown, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ErrorCode_no_user", (long) gs::ErrorCode::no_user, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ErrorCode_no_game", (long) gs::ErrorCode::no_game, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ErrorCode_unknown_mode", (long) gs::ErrorCode::unknown_mode, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ErrorCode_no_os", (long) gs::ErrorCode::no_os, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TUserDataResponse_ok", (long) gs::TUserDataResponse::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TUserDataResponse_email_used", (long) gs::TUserDataResponse::email_used, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TUserDataResponse_username_used", (long) gs::TUserDataResponse::username_used, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TUserDataResponse_both", (long) gs::TUserDataResponse::both, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TSetGameResult_ok", (long) gs::TSetGameResult::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TSetGameResult_unknown", (long) gs::TSetGameResult::unknown, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TSetGameResult_client_not_supported", (long) gs::TSetGameResult::client_not_supported, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAutoLoginResultCode_ok", (long) gs::TAutoLoginResultCode::ok, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAutoLoginResultCode_invalid", (long) gs::TAutoLoginResultCode::invalid, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TAutoLoginResultCode_wrong_meta", (long) gs::TAutoLoginResultCode::wrong_meta, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_AsyncCaller = {"_p_AsyncCaller", "AsyncCaller *", 0, 0, (void*)&_wrap_class_AsyncCaller, 0};
static swig_type_info _swigt__p_AsyncThriftService = {"_p_AsyncThriftService", "AsyncThriftService *", 0, 0, (void*)&_wrap_class_AsyncThriftService, 0};
static swig_type_info _swigt__p_Thrift = {"_p_Thrift", "Thrift *", 0, 0, (void*)&_wrap_class_Thrift, 0};
static swig_type_info _swigt__p_ThriftService = {"_p_ThriftService", "ThriftService *", 0, 0, (void*)&_wrap_class_ThriftService, 0};
static swig_type_info _swigt__p_apache__thrift__protocol__TProtocol = {"_p_apache__thrift__protocol__TProtocol", "::apache::thrift::protocol::TProtocol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gkPreparedLuaEvent = {"_p_gkPreparedLuaEvent", "gkPreparedLuaEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gs__ErrorCode = {"_p_gs__ErrorCode", "gs::ErrorCode *", 0, 0, (void*)&_wrap_class_gs_ErrorCode, 0};
static swig_type_info _swigt__p_gs__TAddScoreResponse = {"_p_gs__TAddScoreResponse", "gs::TAddScoreResponse *", 0, 0, (void*)&_wrap_class_gs_TAddScoreResponse, 0};
static swig_type_info _swigt__p_gs__TAddScoreResultCode = {"_p_gs__TAddScoreResultCode", "gs::TAddScoreResultCode *", 0, 0, (void*)&_wrap_class_gs_TAddScoreResultCode, 0};
static swig_type_info _swigt__p_gs__TAddUserResultCode = {"_p_gs__TAddUserResultCode", "gs::TAddUserResultCode *", 0, 0, (void*)&_wrap_class_gs_TAddUserResultCode, 0};
static swig_type_info _swigt__p_gs__TAutoLoginResponse = {"_p_gs__TAutoLoginResponse", "gs::TAutoLoginResponse *", 0, 0, (void*)&_wrap_class_gs_TAutoLoginResponse, 0};
static swig_type_info _swigt__p_gs__TAutoLoginResultCode = {"_p_gs__TAutoLoginResultCode", "gs::TAutoLoginResultCode *", 0, 0, (void*)&_wrap_class_gs_TAutoLoginResultCode, 0};
static swig_type_info _swigt__p_gs__TBeforeLevelData = {"_p_gs__TBeforeLevelData", "gs::TBeforeLevelData *", 0, 0, (void*)&_wrap_class_gs_TBeforeLevelData, 0};
static swig_type_info _swigt__p_gs__TErrorException = {"_p_gs__TErrorException", "gs::TErrorException *", 0, 0, (void*)&_wrap_class_gs_TErrorException, 0};
static swig_type_info _swigt__p_gs__TGame = {"_p_gs__TGame", "gs::TGame *", 0, 0, (void*)&_wrap_class_gs_TGame, 0};
static swig_type_info _swigt__p_gs__TGetUserResponse = {"_p_gs__TGetUserResponse", "gs::TGetUserResponse *", 0, 0, (void*)&_wrap_class_gs_TGetUserResponse, 0};
static swig_type_info _swigt__p_gs__TGetUserResultCode = {"_p_gs__TGetUserResultCode", "gs::TGetUserResultCode *", 0, 0, (void*)&_wrap_class_gs_TGetUserResultCode, 0};
static swig_type_info _swigt__p_gs__TLoginResponse = {"_p_gs__TLoginResponse", "gs::TLoginResponse *", 0, 0, (void*)&_wrap_class_gs_TLoginResponse, 0};
static swig_type_info _swigt__p_gs__TLoginResultCode = {"_p_gs__TLoginResultCode", "gs::TLoginResultCode *", 0, 0, (void*)&_wrap_class_gs_TLoginResultCode, 0};
static swig_type_info _swigt__p_gs__TMode = {"_p_gs__TMode", "gs::TMode *", 0, 0, (void*)&_wrap_class_gs_TMode, 0};
static swig_type_info _swigt__p_gs__TRegInfo = {"_p_gs__TRegInfo", "gs::TRegInfo *", 0, 0, (void*)&_wrap_class_gs_TRegInfo, 0};
static swig_type_info _swigt__p_gs__TScore = {"_p_gs__TScore", "gs::TScore *", 0, 0, (void*)&_wrap_class_gs_TScore, 0};
static swig_type_info _swigt__p_gs__TSessionCheck = {"_p_gs__TSessionCheck", "gs::TSessionCheck *", 0, 0, (void*)&_wrap_class_gs_TSessionCheck, 0};
static swig_type_info _swigt__p_gs__TSetGameResult = {"_p_gs__TSetGameResult", "gs::TSetGameResult *", 0, 0, (void*)&_wrap_class_gs_TSetGameResult, 0};
static swig_type_info _swigt__p_gs__TSigninToken = {"_p_gs__TSigninToken", "gs::TSigninToken *", 0, 0, (void*)&_wrap_class_gs_TSigninToken, 0};
static swig_type_info _swigt__p_gs__TUser = {"_p_gs__TUser", "gs::TUser *", 0, 0, (void*)&_wrap_class_gs_TUser, 0};
static swig_type_info _swigt__p_gs__TUserDataResponse = {"_p_gs__TUserDataResponse", "gs::TUserDataResponse *", 0, 0, (void*)&_wrap_class_gs_TUserDataResponse, 0};
static swig_type_info _swigt__p_gs___TAddScoreResponse__isset = {"_p_gs___TAddScoreResponse__isset", "gs::_TAddScoreResponse__isset *", 0, 0, (void*)&_wrap_class_gs__TAddScoreResponse__isset, 0};
static swig_type_info _swigt__p_gs___TAutoLoginResponse__isset = {"_p_gs___TAutoLoginResponse__isset", "gs::_TAutoLoginResponse__isset *", 0, 0, (void*)&_wrap_class_gs__TAutoLoginResponse__isset, 0};
static swig_type_info _swigt__p_gs___TBeforeLevelData__isset = {"_p_gs___TBeforeLevelData__isset", "gs::_TBeforeLevelData__isset *", 0, 0, (void*)&_wrap_class_gs__TBeforeLevelData__isset, 0};
static swig_type_info _swigt__p_gs___TErrorException__isset = {"_p_gs___TErrorException__isset", "gs::_TErrorException__isset *", 0, 0, (void*)&_wrap_class_gs__TErrorException__isset, 0};
static swig_type_info _swigt__p_gs___TGame__isset = {"_p_gs___TGame__isset", "gs::_TGame__isset *", 0, 0, (void*)&_wrap_class_gs__TGame__isset, 0};
static swig_type_info _swigt__p_gs___TGetUserResponse__isset = {"_p_gs___TGetUserResponse__isset", "gs::_TGetUserResponse__isset *", 0, 0, (void*)&_wrap_class_gs__TGetUserResponse__isset, 0};
static swig_type_info _swigt__p_gs___TLoginResponse__isset = {"_p_gs___TLoginResponse__isset", "gs::_TLoginResponse__isset *", 0, 0, (void*)&_wrap_class_gs__TLoginResponse__isset, 0};
static swig_type_info _swigt__p_gs___TMode__isset = {"_p_gs___TMode__isset", "gs::_TMode__isset *", 0, 0, (void*)&_wrap_class_gs__TMode__isset, 0};
static swig_type_info _swigt__p_gs___TRegInfo__isset = {"_p_gs___TRegInfo__isset", "gs::_TRegInfo__isset *", 0, 0, (void*)&_wrap_class_gs__TRegInfo__isset, 0};
static swig_type_info _swigt__p_gs___TScore__isset = {"_p_gs___TScore__isset", "gs::_TScore__isset *", 0, 0, (void*)&_wrap_class_gs__TScore__isset, 0};
static swig_type_info _swigt__p_gs___TSessionCheck__isset = {"_p_gs___TSessionCheck__isset", "gs::_TSessionCheck__isset *", 0, 0, (void*)&_wrap_class_gs__TSessionCheck__isset, 0};
static swig_type_info _swigt__p_gs___TSigninToken__isset = {"_p_gs___TSigninToken__isset", "gs::_TSigninToken__isset *", 0, 0, (void*)&_wrap_class_gs__TSigninToken__isset, 0};
static swig_type_info _swigt__p_gs___TUser__isset = {"_p_gs___TUser__isset", "gs::_TUser__isset *", 0, 0, (void*)&_wrap_class_gs__TUser__isset, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_char_const_p_t = {"_p_std__mapT_int_char_const_p_t", "std::map< int,char const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_gs__TGame_t = {"_p_std__setT_gs__TGame_t", "std::set< gs::TGame > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_gs__TUser_t = {"_p_std__setT_gs__TUser_t", "std::set< gs::TUser > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_gs__TAddScoreResponse_t = {"_p_std__vectorT_gs__TAddScoreResponse_t", "std::vector< gs::TAddScoreResponse > *|AddScoreResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_gs__TScore_t = {"_p_std__vectorT_gs__TScore_t", "std::vector< gs::TScore > *|ScoresVec *", 0, 0, (void*)&_wrap_class_std_vector_Sl_gs_TScore_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AsyncCaller,
  &_swigt__p_AsyncThriftService,
  &_swigt__p_Thrift,
  &_swigt__p_ThriftService,
  &_swigt__p_apache__thrift__protocol__TProtocol,
  &_swigt__p_gkPreparedLuaEvent,
  &_swigt__p_gs__ErrorCode,
  &_swigt__p_gs__TAddScoreResponse,
  &_swigt__p_gs__TAddScoreResultCode,
  &_swigt__p_gs__TAddUserResultCode,
  &_swigt__p_gs__TAutoLoginResponse,
  &_swigt__p_gs__TAutoLoginResultCode,
  &_swigt__p_gs__TBeforeLevelData,
  &_swigt__p_gs__TErrorException,
  &_swigt__p_gs__TGame,
  &_swigt__p_gs__TGetUserResponse,
  &_swigt__p_gs__TGetUserResultCode,
  &_swigt__p_gs__TLoginResponse,
  &_swigt__p_gs__TLoginResultCode,
  &_swigt__p_gs__TMode,
  &_swigt__p_gs__TRegInfo,
  &_swigt__p_gs__TScore,
  &_swigt__p_gs__TSessionCheck,
  &_swigt__p_gs__TSetGameResult,
  &_swigt__p_gs__TSigninToken,
  &_swigt__p_gs__TUser,
  &_swigt__p_gs__TUserDataResponse,
  &_swigt__p_gs___TAddScoreResponse__isset,
  &_swigt__p_gs___TAutoLoginResponse__isset,
  &_swigt__p_gs___TBeforeLevelData__isset,
  &_swigt__p_gs___TErrorException__isset,
  &_swigt__p_gs___TGame__isset,
  &_swigt__p_gs___TGetUserResponse__isset,
  &_swigt__p_gs___TLoginResponse__isset,
  &_swigt__p_gs___TMode__isset,
  &_swigt__p_gs___TRegInfo__isset,
  &_swigt__p_gs___TScore__isset,
  &_swigt__p_gs___TSessionCheck__isset,
  &_swigt__p_gs___TSigninToken__isset,
  &_swigt__p_gs___TUser__isset,
  &_swigt__p_int64_t,
  &_swigt__p_std__mapT_int_char_const_p_t,
  &_swigt__p_std__setT_gs__TGame_t,
  &_swigt__p_std__setT_gs__TUser_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_gs__TAddScoreResponse_t,
  &_swigt__p_std__vectorT_gs__TScore_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint8_t,
};

static swig_cast_info _swigc__p_AsyncCaller[] = {  {&_swigt__p_AsyncCaller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AsyncThriftService[] = {  {&_swigt__p_AsyncThriftService, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Thrift[] = {  {&_swigt__p_Thrift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThriftService[] = {  {&_swigt__p_ThriftService, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_apache__thrift__protocol__TProtocol[] = {  {&_swigt__p_apache__thrift__protocol__TProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gkPreparedLuaEvent[] = {  {&_swigt__p_gkPreparedLuaEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__ErrorCode[] = {  {&_swigt__p_gs__ErrorCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TAddScoreResponse[] = {  {&_swigt__p_gs__TAddScoreResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TAddScoreResultCode[] = {  {&_swigt__p_gs__TAddScoreResultCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TAddUserResultCode[] = {  {&_swigt__p_gs__TAddUserResultCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TAutoLoginResponse[] = {  {&_swigt__p_gs__TAutoLoginResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TAutoLoginResultCode[] = {  {&_swigt__p_gs__TAutoLoginResultCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TBeforeLevelData[] = {  {&_swigt__p_gs__TBeforeLevelData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TErrorException[] = {  {&_swigt__p_gs__TErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TGame[] = {  {&_swigt__p_gs__TGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TGetUserResponse[] = {  {&_swigt__p_gs__TGetUserResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TGetUserResultCode[] = {  {&_swigt__p_gs__TGetUserResultCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TLoginResponse[] = {  {&_swigt__p_gs__TLoginResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TLoginResultCode[] = {  {&_swigt__p_gs__TLoginResultCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TMode[] = {  {&_swigt__p_gs__TMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TRegInfo[] = {  {&_swigt__p_gs__TRegInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TScore[] = {  {&_swigt__p_gs__TScore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TSessionCheck[] = {  {&_swigt__p_gs__TSessionCheck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TSetGameResult[] = {  {&_swigt__p_gs__TSetGameResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TSigninToken[] = {  {&_swigt__p_gs__TSigninToken, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TUser[] = {  {&_swigt__p_gs__TUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs__TUserDataResponse[] = {  {&_swigt__p_gs__TUserDataResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TAddScoreResponse__isset[] = {  {&_swigt__p_gs___TAddScoreResponse__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TAutoLoginResponse__isset[] = {  {&_swigt__p_gs___TAutoLoginResponse__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TBeforeLevelData__isset[] = {  {&_swigt__p_gs___TBeforeLevelData__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TErrorException__isset[] = {  {&_swigt__p_gs___TErrorException__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TGame__isset[] = {  {&_swigt__p_gs___TGame__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TGetUserResponse__isset[] = {  {&_swigt__p_gs___TGetUserResponse__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TLoginResponse__isset[] = {  {&_swigt__p_gs___TLoginResponse__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TMode__isset[] = {  {&_swigt__p_gs___TMode__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TRegInfo__isset[] = {  {&_swigt__p_gs___TRegInfo__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TScore__isset[] = {  {&_swigt__p_gs___TScore__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TSessionCheck__isset[] = {  {&_swigt__p_gs___TSessionCheck__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TSigninToken__isset[] = {  {&_swigt__p_gs___TSigninToken__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gs___TUser__isset[] = {  {&_swigt__p_gs___TUser__isset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_char_const_p_t[] = {  {&_swigt__p_std__mapT_int_char_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_gs__TGame_t[] = {  {&_swigt__p_std__setT_gs__TGame_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_gs__TUser_t[] = {  {&_swigt__p_std__setT_gs__TUser_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gs__TAddScoreResponse_t[] = {  {&_swigt__p_std__vectorT_gs__TAddScoreResponse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gs__TScore_t[] = {  {&_swigt__p_std__vectorT_gs__TScore_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AsyncCaller,
  _swigc__p_AsyncThriftService,
  _swigc__p_Thrift,
  _swigc__p_ThriftService,
  _swigc__p_apache__thrift__protocol__TProtocol,
  _swigc__p_gkPreparedLuaEvent,
  _swigc__p_gs__ErrorCode,
  _swigc__p_gs__TAddScoreResponse,
  _swigc__p_gs__TAddScoreResultCode,
  _swigc__p_gs__TAddUserResultCode,
  _swigc__p_gs__TAutoLoginResponse,
  _swigc__p_gs__TAutoLoginResultCode,
  _swigc__p_gs__TBeforeLevelData,
  _swigc__p_gs__TErrorException,
  _swigc__p_gs__TGame,
  _swigc__p_gs__TGetUserResponse,
  _swigc__p_gs__TGetUserResultCode,
  _swigc__p_gs__TLoginResponse,
  _swigc__p_gs__TLoginResultCode,
  _swigc__p_gs__TMode,
  _swigc__p_gs__TRegInfo,
  _swigc__p_gs__TScore,
  _swigc__p_gs__TSessionCheck,
  _swigc__p_gs__TSetGameResult,
  _swigc__p_gs__TSigninToken,
  _swigc__p_gs__TUser,
  _swigc__p_gs__TUserDataResponse,
  _swigc__p_gs___TAddScoreResponse__isset,
  _swigc__p_gs___TAutoLoginResponse__isset,
  _swigc__p_gs___TBeforeLevelData__isset,
  _swigc__p_gs___TErrorException__isset,
  _swigc__p_gs___TGame__isset,
  _swigc__p_gs___TGetUserResponse__isset,
  _swigc__p_gs___TLoginResponse__isset,
  _swigc__p_gs___TMode__isset,
  _swigc__p_gs___TRegInfo__isset,
  _swigc__p_gs___TScore__isset,
  _swigc__p_gs___TSessionCheck__isset,
  _swigc__p_gs___TSigninToken__isset,
  _swigc__p_gs___TUser__isset,
  _swigc__p_int64_t,
  _swigc__p_std__mapT_int_char_const_p_t,
  _swigc__p_std__setT_gs__TGame_t,
  _swigc__p_std__setT_gs__TUser_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_gs__TAddScoreResponse_t,
  _swigc__p_std__vectorT_gs__TScore_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_uint32_t,
  _swigc__p_uint8_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

