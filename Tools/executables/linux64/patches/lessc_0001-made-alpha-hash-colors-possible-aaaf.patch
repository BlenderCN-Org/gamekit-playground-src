From 352837422364b8b6bb00b73a9f6b08ae3aaf04c1 Mon Sep 17 00:00:00 2001
From: Thomas Trocha <thomas.trocha@googlemail.com>
Date: Wed, 10 Sep 2014 13:33:03 +0200
Subject: [PATCH] made alpha hash-colors possible: #aaaf

---
 src/value/Color.cpp | 38 ++++++++++++++++++++++++++++++++++++--
 1 file changed, 36 insertions(+), 2 deletions(-)

diff --git a/src/value/Color.cpp b/src/value/Color.cpp
index 40abd51..4adc6d5 100644
--- a/src/value/Color.cpp
+++ b/src/value/Color.cpp
@@ -52,11 +52,23 @@ Color::Color(Token* token): Value() {
   valueChanged = false;
     
   type = Value::COLOR;
-  
+ 
+  bool hasAlpha = false;
+ 
   if (token->str.size() == 4)
     len = 1;
   else if (token->str.size() == 7)
     len = 2;
+  else if (token->str.size()==5)
+  {
+    len = 1;
+    hasAlpha = true;
+  }
+  else if (token->str.size()==8)
+  {
+    len = 2;
+    hasAlpha = true;	
+  }
   else {
     throw new ValueException("A color value requires either three or six hexadecimal characters.");
   }
@@ -67,7 +79,18 @@ Color::Color(Token* token): Value() {
     if (len == 1)
       color[i] = color[i] * 0x11;
   }
-  alpha = 1;
+  if (!hasAlpha) 
+	  alpha = 1;
+  else
+  {
+	int tempAlpha;
+    istringstream stm(token->str.substr(1 + (3 * len), len));
+    stm >> hex >> tempAlpha;
+    if (len == 1)
+      tempAlpha = tempAlpha * 0x11;
+
+    alpha = tempAlpha / 255.0;
+  }
 }
 Color::Color(unsigned int red, unsigned int green, unsigned int blue): Value() {
   type = Value::COLOR;
@@ -161,6 +184,7 @@ Value* Color::add(Value* v) {
     color[RGB_RED] += c->getRed();
     color[RGB_GREEN] += c->getGreen();
     color[RGB_BLUE] += c->getBlue();
+    alpha += c->getAlpha();
   } else if (v->type == NUMBER ||
              v->type == PERCENTAGE ||
              v->type == DIMENSION) {
@@ -191,6 +215,7 @@ Value* Color::substract(Value* v) {
       color[RGB_GREEN] - c->getGreen() : 0;
     color[RGB_BLUE] = color[RGB_BLUE] > c->getBlue() ?
       color[RGB_BLUE] - c->getBlue() : 0;
+    alpha = alpha > c->getAlpha() ? alpha - c->getAlpha() : 0;
   } else if (v->type == Value::NUMBER ||
              v->type == Value::PERCENTAGE ||
              v->type == Value::DIMENSION) {
@@ -219,6 +244,13 @@ Value* Color::multiply(Value* v) {
     color[RGB_GREEN] = max(min(result, 255), 0);
     result = color[RGB_BLUE] * c->getBlue();
     color[RGB_BLUE] = max(min(result, 255), 0);
+    alpha = alpha * c->getAlpha();
+
+    if (alpha < 0) 
+    	alpha = 0;
+    else if(alpha>1)
+    	alpha = 1;
+
   } else if (v->type == Value::NUMBER ||
              v->type == Value::PERCENTAGE ||
              v->type == Value::DIMENSION) {
@@ -242,6 +274,8 @@ Value* Color::divide(Value* v) {
     color[RGB_RED] /= c->getRed();
     color[RGB_GREEN] /= c->getGreen();
     color[RGB_BLUE] /= c->getBlue();
+    if (c->getAlpha()>0)
+    	alpha /= c->getAlpha();
   } else if (v->type == Value::NUMBER ||
              v->type == Value::PERCENTAGE ||
              v->type == Value::DIMENSION){
-- 
1.8.0

